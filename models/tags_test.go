// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTags(t *testing.T) {
	t.Parallel()

	query := Tags(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tag.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tags(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TagSlice{tag}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TagExists(tx, tag.ID)
	if err != nil {
		t.Errorf("Unable to check if Tag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TagExistsG to return true, but got false.")
	}
}
func testTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	tagFound, err := FindTag(tx, tag.ID)
	if err != nil {
		t.Error(err)
	}

	if tagFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Tags(tx).Bind(tag); err != nil {
		t.Error(err)
	}
}

func testTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Tags(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagOne := &Tag{}
	tagTwo := &Tag{}
	if err = randomize.Struct(seed, tagOne, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	if err = randomize.Struct(seed, tagTwo, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tagTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tags(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tagOne := &Tag{}
	tagTwo := &Tag{}
	if err = randomize.Struct(seed, tagOne, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	if err = randomize.Struct(seed, tagTwo, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tagTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tagBeforeInsertHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagAfterInsertHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagAfterSelectHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagBeforeUpdateHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagAfterUpdateHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagBeforeDeleteHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagAfterDeleteHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagBeforeUpsertHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func tagAfterUpsertHook(e boil.Executor, o *Tag) error {
	*o = Tag{}
	return nil
}

func testTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Tag{}
	o := &Tag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tag object: %s", err)
	}

	AddTagHook(boil.BeforeInsertHook, tagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tagBeforeInsertHooks = []TagHook{}

	AddTagHook(boil.AfterInsertHook, tagAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tagAfterInsertHooks = []TagHook{}

	AddTagHook(boil.AfterSelectHook, tagAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tagAfterSelectHooks = []TagHook{}

	AddTagHook(boil.BeforeUpdateHook, tagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tagBeforeUpdateHooks = []TagHook{}

	AddTagHook(boil.AfterUpdateHook, tagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tagAfterUpdateHooks = []TagHook{}

	AddTagHook(boil.BeforeDeleteHook, tagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tagBeforeDeleteHooks = []TagHook{}

	AddTagHook(boil.AfterDeleteHook, tagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tagAfterDeleteHooks = []TagHook{}

	AddTagHook(boil.BeforeUpsertHook, tagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tagBeforeUpsertHooks = []TagHook{}

	AddTagHook(boil.AfterUpsertHook, tagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tagAfterUpsertHooks = []TagHook{}
}
func testTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx, tagColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTagToManySongDatabaseTags(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tag
	var b, c SongDatabaseTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...)
	randomize.Struct(seed, &c, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...)

	b.TagID = a.ID
	c.TagID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	songDatabaseTag, err := a.SongDatabaseTags(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range songDatabaseTag {
		if v.TagID == b.TagID {
			bFound = true
		}
		if v.TagID == c.TagID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TagSlice{&a}
	if err = a.L.LoadSongDatabaseTags(tx, false, (*[]*Tag)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SongDatabaseTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SongDatabaseTags = nil
	if err = a.L.LoadSongDatabaseTags(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SongDatabaseTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", songDatabaseTag)
	}
}

func testTagToManyTagVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tag
	var b, c TagVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, tagVariationDBTypes, false, tagVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, tagVariationDBTypes, false, tagVariationColumnsWithDefault...)

	b.TagID = a.ID
	c.TagID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tagVariation, err := a.TagVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tagVariation {
		if v.TagID == b.TagID {
			bFound = true
		}
		if v.TagID == c.TagID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TagSlice{&a}
	if err = a.L.LoadTagVariations(tx, false, (*[]*Tag)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TagVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TagVariations = nil
	if err = a.L.LoadTagVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TagVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tagVariation)
	}
}

func testTagToManyAddOpSongDatabaseTags(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tag
	var b, c, d, e SongDatabaseTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SongDatabaseTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, songDatabaseTagDBTypes, false, strmangle.SetComplement(songDatabaseTagPrimaryKeyColumns, songDatabaseTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SongDatabaseTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSongDatabaseTags(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TagID {
			t.Error("foreign key was wrong value", a.ID, first.TagID)
		}
		if a.ID != second.TagID {
			t.Error("foreign key was wrong value", a.ID, second.TagID)
		}

		if first.R.Tag != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tag != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SongDatabaseTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SongDatabaseTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SongDatabaseTags(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTagToManyAddOpTagVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Tag
	var b, c, d, e TagVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TagVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagVariationDBTypes, false, strmangle.SetComplement(tagVariationPrimaryKeyColumns, tagVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TagVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTagVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TagID {
			t.Error("foreign key was wrong value", a.ID, first.TagID)
		}
		if a.ID != second.TagID {
			t.Error("foreign key was wrong value", a.ID, second.TagID)
		}

		if first.R.Tag != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Tag != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TagVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TagVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TagVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tag.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TagSlice{tag}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Tags(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tagDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `Name`: `varchar`, `UpdatedAt`: `datetime`}
	_          = bytes.MinRead
)

func testTagsUpdate(t *testing.T) {
	t.Parallel()

	if len(tagColumns) == len(tagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err = tag.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tagColumns) == len(tagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tag := &Tag{}
	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tag, tagDBTypes, true, tagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tagColumns, tagPrimaryKeyColumns) {
		fields = tagColumns
	} else {
		fields = strmangle.SetComplement(
			tagColumns,
			tagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(tag))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TagSlice{tag}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(tagColumns) == len(tagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	tag := Tag{}
	if err = randomize.Struct(seed, &tag, tagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tag.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Tag: %s", err)
	}

	count, err := Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &tag, tagDBTypes, false, tagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err = tag.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Tag: %s", err)
	}

	count, err = Tags(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

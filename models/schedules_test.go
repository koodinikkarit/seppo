// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSchedules(t *testing.T) {
	t.Parallel()

	query := Schedules(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSchedulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = schedule.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Schedules(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchedulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ScheduleSlice{schedule}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSchedulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ScheduleExists(tx, schedule.ID)
	if err != nil {
		t.Errorf("Unable to check if Schedule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScheduleExistsG to return true, but got false.")
	}
}
func testSchedulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	scheduleFound, err := FindSchedule(tx, schedule.ID)
	if err != nil {
		t.Error(err)
	}

	if scheduleFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSchedulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Schedules(tx).Bind(schedule); err != nil {
		t.Error(err)
	}
}

func testSchedulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Schedules(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSchedulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleOne := &Schedule{}
	scheduleTwo := &Schedule{}
	if err = randomize.Struct(seed, scheduleOne, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleTwo, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = scheduleTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Schedules(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSchedulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scheduleOne := &Schedule{}
	scheduleTwo := &Schedule{}
	if err = randomize.Struct(seed, scheduleOne, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleTwo, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = scheduleTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func scheduleBeforeInsertHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterInsertHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterSelectHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleBeforeUpdateHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterUpdateHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleBeforeDeleteHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterDeleteHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleBeforeUpsertHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func scheduleAfterUpsertHook(e boil.Executor, o *Schedule) error {
	*o = Schedule{}
	return nil
}

func testSchedulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Schedule{}
	o := &Schedule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scheduleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Schedule object: %s", err)
	}

	AddScheduleHook(boil.BeforeInsertHook, scheduleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeInsertHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterInsertHook, scheduleAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scheduleAfterInsertHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterSelectHook, scheduleAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scheduleAfterSelectHooks = []ScheduleHook{}

	AddScheduleHook(boil.BeforeUpdateHook, scheduleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeUpdateHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterUpdateHook, scheduleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleAfterUpdateHooks = []ScheduleHook{}

	AddScheduleHook(boil.BeforeDeleteHook, scheduleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeDeleteHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterDeleteHook, scheduleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleAfterDeleteHooks = []ScheduleHook{}

	AddScheduleHook(boil.BeforeUpsertHook, scheduleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleBeforeUpsertHooks = []ScheduleHook{}

	AddScheduleHook(boil.AfterUpsertHook, scheduleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleAfterUpsertHooks = []ScheduleHook{}
}
func testSchedulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSchedulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx, scheduleColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScheduleToManyEventSchedules(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Schedule
	var b, c EventSchedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...)
	randomize.Struct(seed, &c, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...)

	b.ScheduleID = a.ID
	c.ScheduleID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	eventSchedule, err := a.EventSchedules(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range eventSchedule {
		if v.ScheduleID == b.ScheduleID {
			bFound = true
		}
		if v.ScheduleID == c.ScheduleID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ScheduleSlice{&a}
	if err = a.L.LoadEventSchedules(tx, false, (*[]*Schedule)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventSchedules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EventSchedules = nil
	if err = a.L.LoadEventSchedules(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventSchedules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", eventSchedule)
	}
}

func testScheduleToManyScheduleVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Schedule
	var b, c ScheduleVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...)

	b.ScheduleID = a.ID
	c.ScheduleID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	scheduleVariation, err := a.ScheduleVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range scheduleVariation {
		if v.ScheduleID == b.ScheduleID {
			bFound = true
		}
		if v.ScheduleID == c.ScheduleID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ScheduleSlice{&a}
	if err = a.L.LoadScheduleVariations(tx, false, (*[]*Schedule)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ScheduleVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ScheduleVariations = nil
	if err = a.L.LoadScheduleVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ScheduleVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", scheduleVariation)
	}
}

func testScheduleToManyAddOpEventSchedules(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Schedule
	var b, c, d, e EventSchedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EventSchedule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventScheduleDBTypes, false, strmangle.SetComplement(eventSchedulePrimaryKeyColumns, eventScheduleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EventSchedule{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEventSchedules(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ScheduleID {
			t.Error("foreign key was wrong value", a.ID, first.ScheduleID)
		}
		if a.ID != second.ScheduleID {
			t.Error("foreign key was wrong value", a.ID, second.ScheduleID)
		}

		if first.R.Schedule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Schedule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EventSchedules[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EventSchedules[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EventSchedules(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testScheduleToManyAddOpScheduleVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Schedule
	var b, c, d, e ScheduleVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ScheduleVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, scheduleVariationDBTypes, false, strmangle.SetComplement(scheduleVariationPrimaryKeyColumns, scheduleVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ScheduleVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddScheduleVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ScheduleID {
			t.Error("foreign key was wrong value", a.ID, first.ScheduleID)
		}
		if a.ID != second.ScheduleID {
			t.Error("foreign key was wrong value", a.ID, second.ScheduleID)
		}

		if first.R.Schedule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Schedule != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ScheduleVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ScheduleVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ScheduleVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSchedulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = schedule.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSchedulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ScheduleSlice{schedule}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSchedulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Schedules(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scheduleDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `End`: `datetime`, `ID`: `bigint`, `Name`: `varchar`, `Start`: `datetime`, `UpdatedAt`: `datetime`}
	_               = bytes.MinRead
)

func testSchedulesUpdate(t *testing.T) {
	t.Parallel()

	if len(scheduleColumns) == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err = schedule.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSchedulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scheduleColumns) == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	schedule := &Schedule{}
	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, schedule, scheduleDBTypes, true, schedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scheduleColumns, schedulePrimaryKeyColumns) {
		fields = scheduleColumns
	} else {
		fields = strmangle.SetComplement(
			scheduleColumns,
			schedulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(schedule))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ScheduleSlice{schedule}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSchedulesUpsert(t *testing.T) {
	t.Parallel()

	if len(scheduleColumns) == len(schedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	schedule := Schedule{}
	if err = randomize.Struct(seed, &schedule, scheduleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schedule.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Schedule: %s", err)
	}

	count, err := Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &schedule, scheduleDBTypes, false, schedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err = schedule.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Schedule: %s", err)
	}

	count, err = Schedules(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

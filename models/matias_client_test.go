// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testMatiasClients(t *testing.T) {
	t.Parallel()

	query := MatiasClients(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMatiasClientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = matiasClient.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatiasClientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = MatiasClients(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMatiasClientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MatiasClientSlice{matiasClient}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMatiasClientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MatiasClientExists(tx, matiasClient.ID)
	if err != nil {
		t.Errorf("Unable to check if MatiasClient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MatiasClientExistsG to return true, but got false.")
	}
}
func testMatiasClientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	matiasClientFound, err := FindMatiasClient(tx, matiasClient.ID)
	if err != nil {
		t.Error(err)
	}

	if matiasClientFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMatiasClientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = MatiasClients(tx).Bind(matiasClient); err != nil {
		t.Error(err)
	}
}

func testMatiasClientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := MatiasClients(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMatiasClientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClientOne := &MatiasClient{}
	matiasClientTwo := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClientOne, matiasClientDBTypes, false, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}
	if err = randomize.Struct(seed, matiasClientTwo, matiasClientDBTypes, false, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClientOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = matiasClientTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := MatiasClients(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMatiasClientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	matiasClientOne := &MatiasClient{}
	matiasClientTwo := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClientOne, matiasClientDBTypes, false, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}
	if err = randomize.Struct(seed, matiasClientTwo, matiasClientDBTypes, false, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClientOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = matiasClientTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func matiasClientBeforeInsertHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientAfterInsertHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientAfterSelectHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientBeforeUpdateHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientAfterUpdateHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientBeforeDeleteHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientAfterDeleteHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientBeforeUpsertHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func matiasClientAfterUpsertHook(e boil.Executor, o *MatiasClient) error {
	*o = MatiasClient{}
	return nil
}

func testMatiasClientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &MatiasClient{}
	o := &MatiasClient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, matiasClientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MatiasClient object: %s", err)
	}

	AddMatiasClientHook(boil.BeforeInsertHook, matiasClientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	matiasClientBeforeInsertHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.AfterInsertHook, matiasClientAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	matiasClientAfterInsertHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.AfterSelectHook, matiasClientAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	matiasClientAfterSelectHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.BeforeUpdateHook, matiasClientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	matiasClientBeforeUpdateHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.AfterUpdateHook, matiasClientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	matiasClientAfterUpdateHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.BeforeDeleteHook, matiasClientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	matiasClientBeforeDeleteHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.AfterDeleteHook, matiasClientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	matiasClientAfterDeleteHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.BeforeUpsertHook, matiasClientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	matiasClientBeforeUpsertHooks = []MatiasClientHook{}

	AddMatiasClientHook(boil.AfterUpsertHook, matiasClientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	matiasClientAfterUpsertHooks = []MatiasClientHook{}
}
func testMatiasClientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatiasClientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx, matiasClientColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMatiasClientToManyEwDatabases(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a MatiasClient
	var b, c EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...)
	randomize.Struct(seed, &c, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...)

	b.MatiasClientID.Valid = true
	c.MatiasClientID.Valid = true
	b.MatiasClientID.Uint64 = a.ID
	c.MatiasClientID.Uint64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	ewDatabase, err := a.EwDatabases(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ewDatabase {
		if v.MatiasClientID.Uint64 == b.MatiasClientID.Uint64 {
			bFound = true
		}
		if v.MatiasClientID.Uint64 == c.MatiasClientID.Uint64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MatiasClientSlice{&a}
	if err = a.L.LoadEwDatabases(tx, false, (*[]*MatiasClient)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EwDatabases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EwDatabases = nil
	if err = a.L.LoadEwDatabases(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EwDatabases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ewDatabase)
	}
}

func testMatiasClientToManyAddOpEwDatabases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a MatiasClient
	var b, c, d, e EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matiasClientDBTypes, false, strmangle.SetComplement(matiasClientPrimaryKeyColumns, matiasClientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EwDatabase{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EwDatabase{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEwDatabases(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MatiasClientID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, first.MatiasClientID.Uint64)
		}
		if a.ID != second.MatiasClientID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, second.MatiasClientID.Uint64)
		}

		if first.R.MatiasClient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MatiasClient != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EwDatabases[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EwDatabases[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EwDatabases(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMatiasClientToManySetOpEwDatabases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a MatiasClient
	var b, c, d, e EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matiasClientDBTypes, false, strmangle.SetComplement(matiasClientPrimaryKeyColumns, matiasClientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EwDatabase{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetEwDatabases(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.EwDatabases(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetEwDatabases(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.EwDatabases(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.MatiasClientID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.MatiasClientID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.MatiasClientID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, d.MatiasClientID.Uint64)
	}
	if a.ID != e.MatiasClientID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, e.MatiasClientID.Uint64)
	}

	if b.R.MatiasClient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MatiasClient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MatiasClient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MatiasClient != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.EwDatabases[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.EwDatabases[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMatiasClientToManyRemoveOpEwDatabases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a MatiasClient
	var b, c, d, e EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, matiasClientDBTypes, false, strmangle.SetComplement(matiasClientPrimaryKeyColumns, matiasClientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EwDatabase{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddEwDatabases(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.EwDatabases(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveEwDatabases(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.EwDatabases(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.MatiasClientID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.MatiasClientID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MatiasClient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MatiasClient != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MatiasClient != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MatiasClient != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.EwDatabases) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.EwDatabases[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.EwDatabases[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMatiasClientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = matiasClient.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMatiasClientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MatiasClientSlice{matiasClient}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMatiasClientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := MatiasClients(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	matiasClientDBTypes = map[string]string{`ClientKey`: `varchar`, `CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `UpdatedAt`: `datetime`}
	_                   = bytes.MinRead
)

func testMatiasClientsUpdate(t *testing.T) {
	t.Parallel()

	if len(matiasClientColumns) == len(matiasClientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	if err = matiasClient.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMatiasClientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(matiasClientColumns) == len(matiasClientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	matiasClient := &MatiasClient{}
	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, matiasClient, matiasClientDBTypes, true, matiasClientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(matiasClientColumns, matiasClientPrimaryKeyColumns) {
		fields = matiasClientColumns
	} else {
		fields = strmangle.SetComplement(
			matiasClientColumns,
			matiasClientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(matiasClient))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MatiasClientSlice{matiasClient}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMatiasClientsUpsert(t *testing.T) {
	t.Parallel()

	if len(matiasClientColumns) == len(matiasClientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	matiasClient := MatiasClient{}
	if err = randomize.Struct(seed, &matiasClient, matiasClientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = matiasClient.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert MatiasClient: %s", err)
	}

	count, err := MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &matiasClient, matiasClientDBTypes, false, matiasClientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	if err = matiasClient.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert MatiasClient: %s", err)
	}

	count, err = MatiasClients(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

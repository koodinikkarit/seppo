// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSongDatabaseVariations(t *testing.T) {
	t.Parallel()

	query := SongDatabaseVariations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSongDatabaseVariationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = songDatabaseVariation.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongDatabaseVariationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SongDatabaseVariations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongDatabaseVariationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongDatabaseVariationSlice{songDatabaseVariation}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSongDatabaseVariationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SongDatabaseVariationExists(tx, songDatabaseVariation.ID)
	if err != nil {
		t.Errorf("Unable to check if SongDatabaseVariation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SongDatabaseVariationExistsG to return true, but got false.")
	}
}
func testSongDatabaseVariationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	songDatabaseVariationFound, err := FindSongDatabaseVariation(tx, songDatabaseVariation.ID)
	if err != nil {
		t.Error(err)
	}

	if songDatabaseVariationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSongDatabaseVariationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SongDatabaseVariations(tx).Bind(songDatabaseVariation); err != nil {
		t.Error(err)
	}
}

func testSongDatabaseVariationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SongDatabaseVariations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSongDatabaseVariationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariationOne := &SongDatabaseVariation{}
	songDatabaseVariationTwo := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariationOne, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, songDatabaseVariationTwo, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songDatabaseVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SongDatabaseVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSongDatabaseVariationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	songDatabaseVariationOne := &SongDatabaseVariation{}
	songDatabaseVariationTwo := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariationOne, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, songDatabaseVariationTwo, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songDatabaseVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func songDatabaseVariationBeforeInsertHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationAfterInsertHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationAfterSelectHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationBeforeUpdateHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationAfterUpdateHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationBeforeDeleteHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationAfterDeleteHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationBeforeUpsertHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func songDatabaseVariationAfterUpsertHook(e boil.Executor, o *SongDatabaseVariation) error {
	*o = SongDatabaseVariation{}
	return nil
}

func testSongDatabaseVariationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SongDatabaseVariation{}
	o := &SongDatabaseVariation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, songDatabaseVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation object: %s", err)
	}

	AddSongDatabaseVariationHook(boil.BeforeInsertHook, songDatabaseVariationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationBeforeInsertHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.AfterInsertHook, songDatabaseVariationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationAfterInsertHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.AfterSelectHook, songDatabaseVariationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationAfterSelectHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.BeforeUpdateHook, songDatabaseVariationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationBeforeUpdateHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.AfterUpdateHook, songDatabaseVariationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationAfterUpdateHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.BeforeDeleteHook, songDatabaseVariationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationBeforeDeleteHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.AfterDeleteHook, songDatabaseVariationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationAfterDeleteHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.BeforeUpsertHook, songDatabaseVariationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationBeforeUpsertHooks = []SongDatabaseVariationHook{}

	AddSongDatabaseVariationHook(boil.AfterUpsertHook, songDatabaseVariationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseVariationAfterUpsertHooks = []SongDatabaseVariationHook{}
}
func testSongDatabaseVariationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongDatabaseVariationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx, songDatabaseVariationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongDatabaseVariationToOneSongDatabaseUsingSongDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SongDatabaseVariation
	var foreign SongDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SongDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SongDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SongDatabaseVariationSlice{&local}
	if err = local.L.LoadSongDatabase(tx, false, (*[]*SongDatabaseVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SongDatabase = nil
	if err = local.L.LoadSongDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongDatabaseVariationToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SongDatabaseVariation
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SongDatabaseVariationSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*SongDatabaseVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongDatabaseVariationToOneSetOpSongDatabaseUsingSongDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabaseVariation
	var b, c SongDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseVariationDBTypes, false, strmangle.SetComplement(songDatabaseVariationPrimaryKeyColumns, songDatabaseVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SongDatabase{&b, &c} {
		err = a.SetSongDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SongDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SongDatabaseVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SongDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.SongDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID, x.ID)
		}
	}
}
func testSongDatabaseVariationToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabaseVariation
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseVariationDBTypes, false, strmangle.SetComplement(songDatabaseVariationPrimaryKeyColumns, songDatabaseVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SongDatabaseVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testSongDatabaseVariationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = songDatabaseVariation.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSongDatabaseVariationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongDatabaseVariationSlice{songDatabaseVariation}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSongDatabaseVariationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SongDatabaseVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	songDatabaseVariationDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `SongDatabaseID`: `bigint`, `VariationID`: `bigint`}
	_                            = bytes.MinRead
)

func testSongDatabaseVariationsUpdate(t *testing.T) {
	t.Parallel()

	if len(songDatabaseVariationColumns) == len(songDatabaseVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	if err = songDatabaseVariation.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSongDatabaseVariationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(songDatabaseVariationColumns) == len(songDatabaseVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	songDatabaseVariation := &SongDatabaseVariation{}
	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, songDatabaseVariation, songDatabaseVariationDBTypes, true, songDatabaseVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(songDatabaseVariationColumns, songDatabaseVariationPrimaryKeyColumns) {
		fields = songDatabaseVariationColumns
	} else {
		fields = strmangle.SetComplement(
			songDatabaseVariationColumns,
			songDatabaseVariationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(songDatabaseVariation))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SongDatabaseVariationSlice{songDatabaseVariation}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSongDatabaseVariationsUpsert(t *testing.T) {
	t.Parallel()

	if len(songDatabaseVariationColumns) == len(songDatabaseVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	songDatabaseVariation := SongDatabaseVariation{}
	if err = randomize.Struct(seed, &songDatabaseVariation, songDatabaseVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SongDatabaseVariation: %s", err)
	}

	count, err := SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &songDatabaseVariation, songDatabaseVariationDBTypes, false, songDatabaseVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseVariation struct: %s", err)
	}

	if err = songDatabaseVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SongDatabaseVariation: %s", err)
	}

	count, err = SongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

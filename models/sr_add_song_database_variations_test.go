// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSRAddSongDatabaseVariations(t *testing.T) {
	t.Parallel()

	query := SRAddSongDatabaseVariations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSRAddSongDatabaseVariationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srAddSongDatabaseVariation.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRAddSongDatabaseVariationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRAddSongDatabaseVariations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRAddSongDatabaseVariationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRAddSongDatabaseVariationSlice{srAddSongDatabaseVariation}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSRAddSongDatabaseVariationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SRAddSongDatabaseVariationExists(tx, srAddSongDatabaseVariation.ID)
	if err != nil {
		t.Errorf("Unable to check if SRAddSongDatabaseVariation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SRAddSongDatabaseVariationExistsG to return true, but got false.")
	}
}
func testSRAddSongDatabaseVariationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	srAddSongDatabaseVariationFound, err := FindSRAddSongDatabaseVariation(tx, srAddSongDatabaseVariation.ID)
	if err != nil {
		t.Error(err)
	}

	if srAddSongDatabaseVariationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSRAddSongDatabaseVariationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRAddSongDatabaseVariations(tx).Bind(srAddSongDatabaseVariation); err != nil {
		t.Error(err)
	}
}

func testSRAddSongDatabaseVariationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SRAddSongDatabaseVariations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSRAddSongDatabaseVariationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariationOne := &SRAddSongDatabaseVariation{}
	srAddSongDatabaseVariationTwo := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariationOne, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, srAddSongDatabaseVariationTwo, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srAddSongDatabaseVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRAddSongDatabaseVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSRAddSongDatabaseVariationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srAddSongDatabaseVariationOne := &SRAddSongDatabaseVariation{}
	srAddSongDatabaseVariationTwo := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariationOne, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, srAddSongDatabaseVariationTwo, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srAddSongDatabaseVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srAddSongDatabaseVariationBeforeInsertHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationAfterInsertHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationAfterSelectHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationBeforeUpdateHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationAfterUpdateHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationBeforeDeleteHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationAfterDeleteHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationBeforeUpsertHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func srAddSongDatabaseVariationAfterUpsertHook(e boil.Executor, o *SRAddSongDatabaseVariation) error {
	*o = SRAddSongDatabaseVariation{}
	return nil
}

func testSRAddSongDatabaseVariationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SRAddSongDatabaseVariation{}
	o := &SRAddSongDatabaseVariation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srAddSongDatabaseVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation object: %s", err)
	}

	AddSRAddSongDatabaseVariationHook(boil.BeforeInsertHook, srAddSongDatabaseVariationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationBeforeInsertHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.AfterInsertHook, srAddSongDatabaseVariationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationAfterInsertHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.AfterSelectHook, srAddSongDatabaseVariationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationAfterSelectHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.BeforeUpdateHook, srAddSongDatabaseVariationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationBeforeUpdateHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.AfterUpdateHook, srAddSongDatabaseVariationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationAfterUpdateHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.BeforeDeleteHook, srAddSongDatabaseVariationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationBeforeDeleteHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.AfterDeleteHook, srAddSongDatabaseVariationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationAfterDeleteHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.BeforeUpsertHook, srAddSongDatabaseVariationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationBeforeUpsertHooks = []SRAddSongDatabaseVariationHook{}

	AddSRAddSongDatabaseVariationHook(boil.AfterUpsertHook, srAddSongDatabaseVariationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srAddSongDatabaseVariationAfterUpsertHooks = []SRAddSongDatabaseVariationHook{}
}
func testSRAddSongDatabaseVariationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRAddSongDatabaseVariationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx, srAddSongDatabaseVariationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRAddSongDatabaseVariationToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRAddSongDatabaseVariation
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRAddSongDatabaseVariationSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SRAddSongDatabaseVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRAddSongDatabaseVariationToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRAddSongDatabaseVariation
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRAddSongDatabaseVariationSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*SRAddSongDatabaseVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRAddSongDatabaseVariationToOneSongDatabaseUsingSongDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRAddSongDatabaseVariation
	var foreign SongDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SongDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SongDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRAddSongDatabaseVariationSlice{&local}
	if err = local.L.LoadSongDatabase(tx, false, (*[]*SRAddSongDatabaseVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SongDatabase = nil
	if err = local.L.LoadSongDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRAddSongDatabaseVariationToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRAddSongDatabaseVariation
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srAddSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srAddSongDatabaseVariationPrimaryKeyColumns, srAddSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSRAddSongDatabaseVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSRAddSongDatabaseVariationToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRAddSongDatabaseVariation
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srAddSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srAddSongDatabaseVariationPrimaryKeyColumns, srAddSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRAddSongDatabaseVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testSRAddSongDatabaseVariationToOneSetOpSongDatabaseUsingSongDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRAddSongDatabaseVariation
	var b, c SongDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srAddSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srAddSongDatabaseVariationPrimaryKeyColumns, srAddSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SongDatabase{&b, &c} {
		err = a.SetSongDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SongDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRAddSongDatabaseVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SongDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.SongDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID, x.ID)
		}
	}
}
func testSRAddSongDatabaseVariationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srAddSongDatabaseVariation.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSRAddSongDatabaseVariationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRAddSongDatabaseVariationSlice{srAddSongDatabaseVariation}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSRAddSongDatabaseVariationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRAddSongDatabaseVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srAddSongDatabaseVariationDBTypes = map[string]string{`ID`: `bigint`, `SRID`: `bigint`, `SongDatabaseID`: `bigint`, `VariationID`: `bigint`}
	_                                 = bytes.MinRead
)

func testSRAddSongDatabaseVariationsUpdate(t *testing.T) {
	t.Parallel()

	if len(srAddSongDatabaseVariationColumns) == len(srAddSongDatabaseVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	if err = srAddSongDatabaseVariation.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSRAddSongDatabaseVariationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srAddSongDatabaseVariationColumns) == len(srAddSongDatabaseVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srAddSongDatabaseVariation := &SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true, srAddSongDatabaseVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srAddSongDatabaseVariationColumns, srAddSongDatabaseVariationPrimaryKeyColumns) {
		fields = srAddSongDatabaseVariationColumns
	} else {
		fields = strmangle.SetComplement(
			srAddSongDatabaseVariationColumns,
			srAddSongDatabaseVariationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srAddSongDatabaseVariation))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SRAddSongDatabaseVariationSlice{srAddSongDatabaseVariation}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSRAddSongDatabaseVariationsUpsert(t *testing.T) {
	t.Parallel()

	if len(srAddSongDatabaseVariationColumns) == len(srAddSongDatabaseVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srAddSongDatabaseVariation := SRAddSongDatabaseVariation{}
	if err = randomize.Struct(seed, &srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srAddSongDatabaseVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRAddSongDatabaseVariation: %s", err)
	}

	count, err := SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srAddSongDatabaseVariation, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRAddSongDatabaseVariation struct: %s", err)
	}

	if err = srAddSongDatabaseVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRAddSongDatabaseVariation: %s", err)
	}

	count, err = SRAddSongDatabaseVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

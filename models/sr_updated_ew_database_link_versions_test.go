// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSRUpdatedEwDatabaseLinkVersions(t *testing.T) {
	t.Parallel()

	query := SRUpdatedEwDatabaseLinkVersions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSRUpdatedEwDatabaseLinkVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srUpdatedEwDatabaseLinkVersion.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRUpdatedEwDatabaseLinkVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRUpdatedEwDatabaseLinkVersions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRUpdatedEwDatabaseLinkVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRUpdatedEwDatabaseLinkVersionSlice{srUpdatedEwDatabaseLinkVersion}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSRUpdatedEwDatabaseLinkVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SRUpdatedEwDatabaseLinkVersionExists(tx, srUpdatedEwDatabaseLinkVersion.ID)
	if err != nil {
		t.Errorf("Unable to check if SRUpdatedEwDatabaseLinkVersion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SRUpdatedEwDatabaseLinkVersionExistsG to return true, but got false.")
	}
}
func testSRUpdatedEwDatabaseLinkVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	srUpdatedEwDatabaseLinkVersionFound, err := FindSRUpdatedEwDatabaseLinkVersion(tx, srUpdatedEwDatabaseLinkVersion.ID)
	if err != nil {
		t.Error(err)
	}

	if srUpdatedEwDatabaseLinkVersionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSRUpdatedEwDatabaseLinkVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRUpdatedEwDatabaseLinkVersions(tx).Bind(srUpdatedEwDatabaseLinkVersion); err != nil {
		t.Error(err)
	}
}

func testSRUpdatedEwDatabaseLinkVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SRUpdatedEwDatabaseLinkVersions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSRUpdatedEwDatabaseLinkVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersionOne := &SRUpdatedEwDatabaseLinkVersion{}
	srUpdatedEwDatabaseLinkVersionTwo := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersionOne, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersionTwo, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srUpdatedEwDatabaseLinkVersionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRUpdatedEwDatabaseLinkVersions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSRUpdatedEwDatabaseLinkVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srUpdatedEwDatabaseLinkVersionOne := &SRUpdatedEwDatabaseLinkVersion{}
	srUpdatedEwDatabaseLinkVersionTwo := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersionOne, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersionTwo, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srUpdatedEwDatabaseLinkVersionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srUpdatedEwDatabaseLinkVersionBeforeInsertHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionAfterInsertHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionAfterSelectHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionBeforeUpdateHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionAfterUpdateHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionBeforeDeleteHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionAfterDeleteHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionBeforeUpsertHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func srUpdatedEwDatabaseLinkVersionAfterUpsertHook(e boil.Executor, o *SRUpdatedEwDatabaseLinkVersion) error {
	*o = SRUpdatedEwDatabaseLinkVersion{}
	return nil
}

func testSRUpdatedEwDatabaseLinkVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SRUpdatedEwDatabaseLinkVersion{}
	o := &SRUpdatedEwDatabaseLinkVersion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srUpdatedEwDatabaseLinkVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion object: %s", err)
	}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.BeforeInsertHook, srUpdatedEwDatabaseLinkVersionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionBeforeInsertHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.AfterInsertHook, srUpdatedEwDatabaseLinkVersionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionAfterInsertHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.AfterSelectHook, srUpdatedEwDatabaseLinkVersionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionAfterSelectHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.BeforeUpdateHook, srUpdatedEwDatabaseLinkVersionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionBeforeUpdateHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.AfterUpdateHook, srUpdatedEwDatabaseLinkVersionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionAfterUpdateHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.BeforeDeleteHook, srUpdatedEwDatabaseLinkVersionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionBeforeDeleteHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.AfterDeleteHook, srUpdatedEwDatabaseLinkVersionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionAfterDeleteHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.BeforeUpsertHook, srUpdatedEwDatabaseLinkVersionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionBeforeUpsertHooks = []SRUpdatedEwDatabaseLinkVersionHook{}

	AddSRUpdatedEwDatabaseLinkVersionHook(boil.AfterUpsertHook, srUpdatedEwDatabaseLinkVersionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srUpdatedEwDatabaseLinkVersionAfterUpsertHooks = []SRUpdatedEwDatabaseLinkVersionHook{}
}
func testSRUpdatedEwDatabaseLinkVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRUpdatedEwDatabaseLinkVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx, srUpdatedEwDatabaseLinkVersionColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRUpdatedEwDatabaseLinkVersionToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRUpdatedEwDatabaseLinkVersion
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRUpdatedEwDatabaseLinkVersionSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SRUpdatedEwDatabaseLinkVersion)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRUpdatedEwDatabaseLinkVersionToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRUpdatedEwDatabaseLinkVersion
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRUpdatedEwDatabaseLinkVersionSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*SRUpdatedEwDatabaseLinkVersion)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRUpdatedEwDatabaseLinkVersionToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRUpdatedEwDatabaseLinkVersion
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srUpdatedEwDatabaseLinkVersionDBTypes, false, strmangle.SetComplement(srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns, srUpdatedEwDatabaseLinkVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSRUpdatedEwDatabaseLinkVersions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSRUpdatedEwDatabaseLinkVersionToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRUpdatedEwDatabaseLinkVersion
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srUpdatedEwDatabaseLinkVersionDBTypes, false, strmangle.SetComplement(srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns, srUpdatedEwDatabaseLinkVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRUpdatedEwDatabaseLinkVersions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testSRUpdatedEwDatabaseLinkVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srUpdatedEwDatabaseLinkVersion.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSRUpdatedEwDatabaseLinkVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRUpdatedEwDatabaseLinkVersionSlice{srUpdatedEwDatabaseLinkVersion}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSRUpdatedEwDatabaseLinkVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRUpdatedEwDatabaseLinkVersions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srUpdatedEwDatabaseLinkVersionDBTypes = map[string]string{`ChangedVersion`: `int`, `ID`: `bigint`, `OrigVersion`: `int`, `SRID`: `bigint`, `VariationID`: `bigint`}
	_                                     = bytes.MinRead
)

func testSRUpdatedEwDatabaseLinkVersionsUpdate(t *testing.T) {
	t.Parallel()

	if len(srUpdatedEwDatabaseLinkVersionColumns) == len(srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	if err = srUpdatedEwDatabaseLinkVersion.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSRUpdatedEwDatabaseLinkVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srUpdatedEwDatabaseLinkVersionColumns) == len(srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srUpdatedEwDatabaseLinkVersion := &SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true, srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srUpdatedEwDatabaseLinkVersionColumns, srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns) {
		fields = srUpdatedEwDatabaseLinkVersionColumns
	} else {
		fields = strmangle.SetComplement(
			srUpdatedEwDatabaseLinkVersionColumns,
			srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srUpdatedEwDatabaseLinkVersion))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SRUpdatedEwDatabaseLinkVersionSlice{srUpdatedEwDatabaseLinkVersion}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSRUpdatedEwDatabaseLinkVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(srUpdatedEwDatabaseLinkVersionColumns) == len(srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srUpdatedEwDatabaseLinkVersion := SRUpdatedEwDatabaseLinkVersion{}
	if err = randomize.Struct(seed, &srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srUpdatedEwDatabaseLinkVersion.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRUpdatedEwDatabaseLinkVersion: %s", err)
	}

	count, err := SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srUpdatedEwDatabaseLinkVersion, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRUpdatedEwDatabaseLinkVersion struct: %s", err)
	}

	if err = srUpdatedEwDatabaseLinkVersion.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRUpdatedEwDatabaseLinkVersion: %s", err)
	}

	count, err = SRUpdatedEwDatabaseLinkVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

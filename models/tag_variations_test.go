// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTagVariations(t *testing.T) {
	t.Parallel()

	query := TagVariations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTagVariationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tagVariation.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagVariationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TagVariations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTagVariationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TagVariationSlice{tagVariation}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTagVariationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TagVariationExists(tx, tagVariation.ID)
	if err != nil {
		t.Errorf("Unable to check if TagVariation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TagVariationExistsG to return true, but got false.")
	}
}
func testTagVariationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	tagVariationFound, err := FindTagVariation(tx, tagVariation.ID)
	if err != nil {
		t.Error(err)
	}

	if tagVariationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTagVariationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TagVariations(tx).Bind(tagVariation); err != nil {
		t.Error(err)
	}
}

func testTagVariationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := TagVariations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTagVariationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariationOne := &TagVariation{}
	tagVariationTwo := &TagVariation{}
	if err = randomize.Struct(seed, tagVariationOne, tagVariationDBTypes, false, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, tagVariationTwo, tagVariationDBTypes, false, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tagVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TagVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTagVariationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tagVariationOne := &TagVariation{}
	tagVariationTwo := &TagVariation{}
	if err = randomize.Struct(seed, tagVariationOne, tagVariationDBTypes, false, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, tagVariationTwo, tagVariationDBTypes, false, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tagVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tagVariationBeforeInsertHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationAfterInsertHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationAfterSelectHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationBeforeUpdateHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationAfterUpdateHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationBeforeDeleteHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationAfterDeleteHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationBeforeUpsertHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func tagVariationAfterUpsertHook(e boil.Executor, o *TagVariation) error {
	*o = TagVariation{}
	return nil
}

func testTagVariationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TagVariation{}
	o := &TagVariation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tagVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TagVariation object: %s", err)
	}

	AddTagVariationHook(boil.BeforeInsertHook, tagVariationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tagVariationBeforeInsertHooks = []TagVariationHook{}

	AddTagVariationHook(boil.AfterInsertHook, tagVariationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tagVariationAfterInsertHooks = []TagVariationHook{}

	AddTagVariationHook(boil.AfterSelectHook, tagVariationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tagVariationAfterSelectHooks = []TagVariationHook{}

	AddTagVariationHook(boil.BeforeUpdateHook, tagVariationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tagVariationBeforeUpdateHooks = []TagVariationHook{}

	AddTagVariationHook(boil.AfterUpdateHook, tagVariationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tagVariationAfterUpdateHooks = []TagVariationHook{}

	AddTagVariationHook(boil.BeforeDeleteHook, tagVariationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tagVariationBeforeDeleteHooks = []TagVariationHook{}

	AddTagVariationHook(boil.AfterDeleteHook, tagVariationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tagVariationAfterDeleteHooks = []TagVariationHook{}

	AddTagVariationHook(boil.BeforeUpsertHook, tagVariationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tagVariationBeforeUpsertHooks = []TagVariationHook{}

	AddTagVariationHook(boil.AfterUpsertHook, tagVariationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tagVariationAfterUpsertHooks = []TagVariationHook{}
}
func testTagVariationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTagVariationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx, tagVariationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTagVariationToOneTagUsingTag(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local TagVariation
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tagVariationDBTypes, false, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TagVariationSlice{&local}
	if err = local.L.LoadTag(tx, false, (*[]*TagVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTagVariationToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local TagVariation
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tagVariationDBTypes, false, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TagVariationSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*TagVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTagVariationToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a TagVariation
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagVariationDBTypes, false, strmangle.SetComplement(tagVariationPrimaryKeyColumns, tagVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TagVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}
func testTagVariationToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a TagVariation
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tagVariationDBTypes, false, strmangle.SetComplement(tagVariationPrimaryKeyColumns, tagVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TagVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testTagVariationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tagVariation.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTagVariationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TagVariationSlice{tagVariation}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTagVariationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TagVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tagVariationDBTypes = map[string]string{`CreatedAt`: `datetime`, `ID`: `bigint`, `TagID`: `bigint`, `VariationID`: `bigint`}
	_                   = bytes.MinRead
)

func testTagVariationsUpdate(t *testing.T) {
	t.Parallel()

	if len(tagVariationColumns) == len(tagVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	if err = tagVariation.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTagVariationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tagVariationColumns) == len(tagVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tagVariation := &TagVariation{}
	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tagVariation, tagVariationDBTypes, true, tagVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tagVariationColumns, tagVariationPrimaryKeyColumns) {
		fields = tagVariationColumns
	} else {
		fields = strmangle.SetComplement(
			tagVariationColumns,
			tagVariationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(tagVariation))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TagVariationSlice{tagVariation}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTagVariationsUpsert(t *testing.T) {
	t.Parallel()

	if len(tagVariationColumns) == len(tagVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	tagVariation := TagVariation{}
	if err = randomize.Struct(seed, &tagVariation, tagVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tagVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert TagVariation: %s", err)
	}

	count, err := TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &tagVariation, tagVariationDBTypes, false, tagVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TagVariation struct: %s", err)
	}

	if err = tagVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert TagVariation: %s", err)
	}

	count, err = TagVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSREwSongs(t *testing.T) {
	t.Parallel()

	query := SREwSongs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSREwSongsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srEwSong.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSREwSongsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SREwSongs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSREwSongsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SREwSongSlice{srEwSong}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSREwSongsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SREwSongExists(tx, srEwSong.ID)
	if err != nil {
		t.Errorf("Unable to check if SREwSong exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SREwSongExistsG to return true, but got false.")
	}
}
func testSREwSongsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	srEwSongFound, err := FindSREwSong(tx, srEwSong.ID)
	if err != nil {
		t.Error(err)
	}

	if srEwSongFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSREwSongsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SREwSongs(tx).Bind(srEwSong); err != nil {
		t.Error(err)
	}
}

func testSREwSongsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SREwSongs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSREwSongsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSongOne := &SREwSong{}
	srEwSongTwo := &SREwSong{}
	if err = randomize.Struct(seed, srEwSongOne, srEwSongDBTypes, false, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}
	if err = randomize.Struct(seed, srEwSongTwo, srEwSongDBTypes, false, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSongOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srEwSongTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SREwSongs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSREwSongsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srEwSongOne := &SREwSong{}
	srEwSongTwo := &SREwSong{}
	if err = randomize.Struct(seed, srEwSongOne, srEwSongDBTypes, false, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}
	if err = randomize.Struct(seed, srEwSongTwo, srEwSongDBTypes, false, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSongOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srEwSongTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srEwSongBeforeInsertHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongAfterInsertHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongAfterSelectHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongBeforeUpdateHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongAfterUpdateHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongBeforeDeleteHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongAfterDeleteHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongBeforeUpsertHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func srEwSongAfterUpsertHook(e boil.Executor, o *SREwSong) error {
	*o = SREwSong{}
	return nil
}

func testSREwSongsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SREwSong{}
	o := &SREwSong{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srEwSongDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SREwSong object: %s", err)
	}

	AddSREwSongHook(boil.BeforeInsertHook, srEwSongBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srEwSongBeforeInsertHooks = []SREwSongHook{}

	AddSREwSongHook(boil.AfterInsertHook, srEwSongAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srEwSongAfterInsertHooks = []SREwSongHook{}

	AddSREwSongHook(boil.AfterSelectHook, srEwSongAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srEwSongAfterSelectHooks = []SREwSongHook{}

	AddSREwSongHook(boil.BeforeUpdateHook, srEwSongBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srEwSongBeforeUpdateHooks = []SREwSongHook{}

	AddSREwSongHook(boil.AfterUpdateHook, srEwSongAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srEwSongAfterUpdateHooks = []SREwSongHook{}

	AddSREwSongHook(boil.BeforeDeleteHook, srEwSongBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srEwSongBeforeDeleteHooks = []SREwSongHook{}

	AddSREwSongHook(boil.AfterDeleteHook, srEwSongAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srEwSongAfterDeleteHooks = []SREwSongHook{}

	AddSREwSongHook(boil.BeforeUpsertHook, srEwSongBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srEwSongBeforeUpsertHooks = []SREwSongHook{}

	AddSREwSongHook(boil.AfterUpsertHook, srEwSongAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srEwSongAfterUpsertHooks = []SREwSongHook{}
}
func testSREwSongsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSREwSongsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx, srEwSongColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSREwSongToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwSong
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwSongDBTypes, false, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwSongSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SREwSong)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwSongToOneVariationVersionUsingVariationVersion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwSong
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwSongDBTypes, false, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationVersionID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VariationVersion(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwSongSlice{&local}
	if err = local.L.LoadVariationVersion(tx, false, (*[]*SREwSong)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VariationVersion = nil
	if err = local.L.LoadVariationVersion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwSongToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwSong
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwSongDBTypes, false, strmangle.SetComplement(srEwSongPrimaryKeyColumns, srEwSongColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSREwSongs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSREwSongToOneSetOpVariationVersionUsingVariationVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwSong
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwSongDBTypes, false, strmangle.SetComplement(srEwSongPrimaryKeyColumns, srEwSongColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetVariationVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VariationVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SREwSongs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationVersionID))
		reflect.Indirect(reflect.ValueOf(&a.VariationVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersionID, x.ID)
		}
	}
}
func testSREwSongsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srEwSong.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSREwSongsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SREwSongSlice{srEwSong}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSREwSongsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SREwSongs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srEwSongDBTypes = map[string]string{`ID`: `bigint`, `Operation`: `tinyint`, `SRID`: `bigint`, `VariationVersionID`: `bigint`}
	_               = bytes.MinRead
)

func testSREwSongsUpdate(t *testing.T) {
	t.Parallel()

	if len(srEwSongColumns) == len(srEwSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	if err = srEwSong.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSREwSongsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srEwSongColumns) == len(srEwSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srEwSong := &SREwSong{}
	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srEwSong, srEwSongDBTypes, true, srEwSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srEwSongColumns, srEwSongPrimaryKeyColumns) {
		fields = srEwSongColumns
	} else {
		fields = strmangle.SetComplement(
			srEwSongColumns,
			srEwSongPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srEwSong))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SREwSongSlice{srEwSong}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSREwSongsUpsert(t *testing.T) {
	t.Parallel()

	if len(srEwSongColumns) == len(srEwSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srEwSong := SREwSong{}
	if err = randomize.Struct(seed, &srEwSong, srEwSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwSong.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SREwSong: %s", err)
	}

	count, err := SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srEwSong, srEwSongDBTypes, false, srEwSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SREwSong struct: %s", err)
	}

	if err = srEwSong.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SREwSong: %s", err)
	}

	count, err = SREwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

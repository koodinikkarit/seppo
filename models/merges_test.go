// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testMerges(t *testing.T) {
	t.Parallel()

	query := Merges(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testMergesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = merge.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMergesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Merges(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMergesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MergeSlice{merge}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testMergesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MergeExists(tx, merge.ID)
	if err != nil {
		t.Errorf("Unable to check if Merge exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MergeExistsG to return true, but got false.")
	}
}
func testMergesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	mergeFound, err := FindMerge(tx, merge.ID)
	if err != nil {
		t.Error(err)
	}

	if mergeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testMergesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Merges(tx).Bind(merge); err != nil {
		t.Error(err)
	}
}

func testMergesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Merges(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMergesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mergeOne := &Merge{}
	mergeTwo := &Merge{}
	if err = randomize.Struct(seed, mergeOne, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}
	if err = randomize.Struct(seed, mergeTwo, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mergeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = mergeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Merges(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMergesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mergeOne := &Merge{}
	mergeTwo := &Merge{}
	if err = randomize.Struct(seed, mergeOne, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}
	if err = randomize.Struct(seed, mergeTwo, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = mergeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = mergeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func mergeBeforeInsertHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeAfterInsertHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeAfterSelectHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeBeforeUpdateHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeAfterUpdateHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeBeforeDeleteHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeAfterDeleteHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeBeforeUpsertHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func mergeAfterUpsertHook(e boil.Executor, o *Merge) error {
	*o = Merge{}
	return nil
}

func testMergesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Merge{}
	o := &Merge{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mergeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Merge object: %s", err)
	}

	AddMergeHook(boil.BeforeInsertHook, mergeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mergeBeforeInsertHooks = []MergeHook{}

	AddMergeHook(boil.AfterInsertHook, mergeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mergeAfterInsertHooks = []MergeHook{}

	AddMergeHook(boil.AfterSelectHook, mergeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mergeAfterSelectHooks = []MergeHook{}

	AddMergeHook(boil.BeforeUpdateHook, mergeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mergeBeforeUpdateHooks = []MergeHook{}

	AddMergeHook(boil.AfterUpdateHook, mergeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mergeAfterUpdateHooks = []MergeHook{}

	AddMergeHook(boil.BeforeDeleteHook, mergeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mergeBeforeDeleteHooks = []MergeHook{}

	AddMergeHook(boil.AfterDeleteHook, mergeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mergeAfterDeleteHooks = []MergeHook{}

	AddMergeHook(boil.BeforeUpsertHook, mergeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mergeBeforeUpsertHooks = []MergeHook{}

	AddMergeHook(boil.AfterUpsertHook, mergeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mergeAfterUpsertHooks = []MergeHook{}
}
func testMergesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMergesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx, mergeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMergeToOneVariationVersionUsingVariationVersion1(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Merge
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationVersion1ID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VariationVersion1(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MergeSlice{&local}
	if err = local.L.LoadVariationVersion1(tx, false, (*[]*Merge)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion1 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VariationVersion1 = nil
	if err = local.L.LoadVariationVersion1(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion1 == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMergeToOneVariationVersionUsingVariationVersion2(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Merge
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationVersion2ID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VariationVersion2(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MergeSlice{&local}
	if err = local.L.LoadVariationVersion2(tx, false, (*[]*Merge)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion2 == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VariationVersion2 = nil
	if err = local.L.LoadVariationVersion2(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion2 == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMergeToOneVariationVersionUsingDestinationVariationVersion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Merge
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mergeDBTypes, false, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.DestinationVariationVersionID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.DestinationVariationVersion(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MergeSlice{&local}
	if err = local.L.LoadDestinationVariationVersion(tx, false, (*[]*Merge)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.DestinationVariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DestinationVariationVersion = nil
	if err = local.L.LoadDestinationVariationVersion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.DestinationVariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMergeToOneSetOpVariationVersionUsingVariationVersion1(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Merge
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mergeDBTypes, false, strmangle.SetComplement(mergePrimaryKeyColumns, mergeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetVariationVersion1(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VariationVersion1 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VariationVersion1Merges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationVersion1ID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersion1ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationVersion1ID))
		reflect.Indirect(reflect.ValueOf(&a.VariationVersion1ID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationVersion1ID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersion1ID, x.ID)
		}
	}
}
func testMergeToOneSetOpVariationVersionUsingVariationVersion2(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Merge
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mergeDBTypes, false, strmangle.SetComplement(mergePrimaryKeyColumns, mergeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetVariationVersion2(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VariationVersion2 != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VariationVersion2Merges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationVersion2ID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersion2ID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationVersion2ID))
		reflect.Indirect(reflect.ValueOf(&a.VariationVersion2ID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationVersion2ID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersion2ID, x.ID)
		}
	}
}
func testMergeToOneSetOpVariationVersionUsingDestinationVariationVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Merge
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mergeDBTypes, false, strmangle.SetComplement(mergePrimaryKeyColumns, mergeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetDestinationVariationVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DestinationVariationVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DestinationVariationVersionMerges[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DestinationVariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.DestinationVariationVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DestinationVariationVersionID))
		reflect.Indirect(reflect.ValueOf(&a.DestinationVariationVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DestinationVariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.DestinationVariationVersionID, x.ID)
		}
	}
}
func testMergesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = merge.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMergesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MergeSlice{merge}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testMergesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Merges(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mergeDBTypes = map[string]string{`CreatedAt`: `datetime`, `DestinationVariationVersionID`: `bigint`, `ID`: `bigint`, `VariationVersion1ID`: `bigint`, `VariationVersion2ID`: `bigint`}
	_            = bytes.MinRead
)

func testMergesUpdate(t *testing.T) {
	t.Parallel()

	if len(mergeColumns) == len(mergePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	if err = merge.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMergesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mergeColumns) == len(mergePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	merge := &Merge{}
	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, merge, mergeDBTypes, true, mergePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mergeColumns, mergePrimaryKeyColumns) {
		fields = mergeColumns
	} else {
		fields = strmangle.SetComplement(
			mergeColumns,
			mergePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(merge))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MergeSlice{merge}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testMergesUpsert(t *testing.T) {
	t.Parallel()

	if len(mergeColumns) == len(mergePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	merge := Merge{}
	if err = randomize.Struct(seed, &merge, mergeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = merge.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Merge: %s", err)
	}

	count, err := Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &merge, mergeDBTypes, false, mergePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Merge struct: %s", err)
	}

	if err = merge.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Merge: %s", err)
	}

	count, err = Merges(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

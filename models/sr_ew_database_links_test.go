// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSREwDatabaseLinks(t *testing.T) {
	t.Parallel()

	query := SREwDatabaseLinks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSREwDatabaseLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srEwDatabaseLink.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSREwDatabaseLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SREwDatabaseLinks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSREwDatabaseLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SREwDatabaseLinkSlice{srEwDatabaseLink}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSREwDatabaseLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SREwDatabaseLinkExists(tx, srEwDatabaseLink.ID)
	if err != nil {
		t.Errorf("Unable to check if SREwDatabaseLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SREwDatabaseLinkExistsG to return true, but got false.")
	}
}
func testSREwDatabaseLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	srEwDatabaseLinkFound, err := FindSREwDatabaseLink(tx, srEwDatabaseLink.ID)
	if err != nil {
		t.Error(err)
	}

	if srEwDatabaseLinkFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSREwDatabaseLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SREwDatabaseLinks(tx).Bind(srEwDatabaseLink); err != nil {
		t.Error(err)
	}
}

func testSREwDatabaseLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SREwDatabaseLinks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSREwDatabaseLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLinkOne := &SREwDatabaseLink{}
	srEwDatabaseLinkTwo := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLinkOne, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}
	if err = randomize.Struct(seed, srEwDatabaseLinkTwo, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLinkOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srEwDatabaseLinkTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SREwDatabaseLinks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSREwDatabaseLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srEwDatabaseLinkOne := &SREwDatabaseLink{}
	srEwDatabaseLinkTwo := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLinkOne, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}
	if err = randomize.Struct(seed, srEwDatabaseLinkTwo, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLinkOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srEwDatabaseLinkTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srEwDatabaseLinkBeforeInsertHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkAfterInsertHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkAfterSelectHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkBeforeUpdateHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkAfterUpdateHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkBeforeDeleteHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkAfterDeleteHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkBeforeUpsertHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func srEwDatabaseLinkAfterUpsertHook(e boil.Executor, o *SREwDatabaseLink) error {
	*o = SREwDatabaseLink{}
	return nil
}

func testSREwDatabaseLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SREwDatabaseLink{}
	o := &SREwDatabaseLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srEwDatabaseLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink object: %s", err)
	}

	AddSREwDatabaseLinkHook(boil.BeforeInsertHook, srEwDatabaseLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkBeforeInsertHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.AfterInsertHook, srEwDatabaseLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkAfterInsertHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.AfterSelectHook, srEwDatabaseLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkAfterSelectHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.BeforeUpdateHook, srEwDatabaseLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkBeforeUpdateHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.AfterUpdateHook, srEwDatabaseLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkAfterUpdateHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.BeforeDeleteHook, srEwDatabaseLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkBeforeDeleteHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.AfterDeleteHook, srEwDatabaseLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkAfterDeleteHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.BeforeUpsertHook, srEwDatabaseLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkBeforeUpsertHooks = []SREwDatabaseLinkHook{}

	AddSREwDatabaseLinkHook(boil.AfterUpsertHook, srEwDatabaseLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srEwDatabaseLinkAfterUpsertHooks = []SREwDatabaseLinkHook{}
}
func testSREwDatabaseLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSREwDatabaseLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx, srEwDatabaseLinkColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSREwDatabaseLinkToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwDatabaseLink
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwDatabaseLinkSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SREwDatabaseLink)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwDatabaseLinkToOneEwDatabaseUsingEwDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwDatabaseLink
	var foreign EwDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.EwDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.EwDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwDatabaseLinkSlice{&local}
	if err = local.L.LoadEwDatabase(tx, false, (*[]*SREwDatabaseLink)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.EwDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EwDatabase = nil
	if err = local.L.LoadEwDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.EwDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwDatabaseLinkToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwDatabaseLink
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwDatabaseLinkSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*SREwDatabaseLink)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwDatabaseLinkToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwDatabaseLink
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwDatabaseLinkDBTypes, false, strmangle.SetComplement(srEwDatabaseLinkPrimaryKeyColumns, srEwDatabaseLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSREwDatabaseLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSREwDatabaseLinkToOneSetOpEwDatabaseUsingEwDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwDatabaseLink
	var b, c EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwDatabaseLinkDBTypes, false, strmangle.SetComplement(srEwDatabaseLinkPrimaryKeyColumns, srEwDatabaseLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*EwDatabase{&b, &c} {
		err = a.SetEwDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EwDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SREwDatabaseLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EwDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.EwDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EwDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.EwDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EwDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.EwDatabaseID, x.ID)
		}
	}
}
func testSREwDatabaseLinkToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwDatabaseLink
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwDatabaseLinkDBTypes, false, strmangle.SetComplement(srEwDatabaseLinkPrimaryKeyColumns, srEwDatabaseLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SREwDatabaseLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testSREwDatabaseLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srEwDatabaseLink.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSREwDatabaseLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SREwDatabaseLinkSlice{srEwDatabaseLink}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSREwDatabaseLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SREwDatabaseLinks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srEwDatabaseLinkDBTypes = map[string]string{`Author`: `varchar`, `Copyright`: `varchar`, `EwDatabaseID`: `bigint`, `EwDatabaseSongID`: `bigint`, `ID`: `bigint`, `Operation`: `tinyint`, `SRID`: `bigint`, `VariationID`: `bigint`, `Version`: `int`}
	_                       = bytes.MinRead
)

func testSREwDatabaseLinksUpdate(t *testing.T) {
	t.Parallel()

	if len(srEwDatabaseLinkColumns) == len(srEwDatabaseLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	if err = srEwDatabaseLink.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSREwDatabaseLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srEwDatabaseLinkColumns) == len(srEwDatabaseLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srEwDatabaseLink := &SREwDatabaseLink{}
	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srEwDatabaseLink, srEwDatabaseLinkDBTypes, true, srEwDatabaseLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srEwDatabaseLinkColumns, srEwDatabaseLinkPrimaryKeyColumns) {
		fields = srEwDatabaseLinkColumns
	} else {
		fields = strmangle.SetComplement(
			srEwDatabaseLinkColumns,
			srEwDatabaseLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srEwDatabaseLink))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SREwDatabaseLinkSlice{srEwDatabaseLink}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSREwDatabaseLinksUpsert(t *testing.T) {
	t.Parallel()

	if len(srEwDatabaseLinkColumns) == len(srEwDatabaseLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srEwDatabaseLink := SREwDatabaseLink{}
	if err = randomize.Struct(seed, &srEwDatabaseLink, srEwDatabaseLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwDatabaseLink.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SREwDatabaseLink: %s", err)
	}

	count, err := SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srEwDatabaseLink, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SREwDatabaseLink struct: %s", err)
	}

	if err = srEwDatabaseLink.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SREwDatabaseLink: %s", err)
	}

	count, err = SREwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

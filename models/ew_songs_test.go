// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testEwSongs(t *testing.T) {
	t.Parallel()

	query := EwSongs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testEwSongsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ewSong.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEwSongsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EwSongs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEwSongsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EwSongSlice{ewSong}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testEwSongsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := EwSongExists(tx, ewSong.ID)
	if err != nil {
		t.Errorf("Unable to check if EwSong exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EwSongExistsG to return true, but got false.")
	}
}
func testEwSongsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	ewSongFound, err := FindEwSong(tx, ewSong.ID)
	if err != nil {
		t.Error(err)
	}

	if ewSongFound == nil {
		t.Error("want a record, got nil")
	}
}
func testEwSongsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EwSongs(tx).Bind(ewSong); err != nil {
		t.Error(err)
	}
}

func testEwSongsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := EwSongs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEwSongsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSongOne := &EwSong{}
	ewSongTwo := &EwSong{}
	if err = randomize.Struct(seed, ewSongOne, ewSongDBTypes, false, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}
	if err = randomize.Struct(seed, ewSongTwo, ewSongDBTypes, false, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSongOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ewSongTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EwSongs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEwSongsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ewSongOne := &EwSong{}
	ewSongTwo := &EwSong{}
	if err = randomize.Struct(seed, ewSongOne, ewSongDBTypes, false, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}
	if err = randomize.Struct(seed, ewSongTwo, ewSongDBTypes, false, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSongOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ewSongTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func ewSongBeforeInsertHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongAfterInsertHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongAfterSelectHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongBeforeUpdateHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongAfterUpdateHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongBeforeDeleteHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongAfterDeleteHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongBeforeUpsertHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func ewSongAfterUpsertHook(e boil.Executor, o *EwSong) error {
	*o = EwSong{}
	return nil
}

func testEwSongsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &EwSong{}
	o := &EwSong{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ewSongDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EwSong object: %s", err)
	}

	AddEwSongHook(boil.BeforeInsertHook, ewSongBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ewSongBeforeInsertHooks = []EwSongHook{}

	AddEwSongHook(boil.AfterInsertHook, ewSongAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ewSongAfterInsertHooks = []EwSongHook{}

	AddEwSongHook(boil.AfterSelectHook, ewSongAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ewSongAfterSelectHooks = []EwSongHook{}

	AddEwSongHook(boil.BeforeUpdateHook, ewSongBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ewSongBeforeUpdateHooks = []EwSongHook{}

	AddEwSongHook(boil.AfterUpdateHook, ewSongAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ewSongAfterUpdateHooks = []EwSongHook{}

	AddEwSongHook(boil.BeforeDeleteHook, ewSongBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ewSongBeforeDeleteHooks = []EwSongHook{}

	AddEwSongHook(boil.AfterDeleteHook, ewSongAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ewSongAfterDeleteHooks = []EwSongHook{}

	AddEwSongHook(boil.BeforeUpsertHook, ewSongBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ewSongBeforeUpsertHooks = []EwSongHook{}

	AddEwSongHook(boil.AfterUpsertHook, ewSongAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ewSongAfterUpsertHooks = []EwSongHook{}
}
func testEwSongsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEwSongsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx, ewSongColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEwSongsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ewSong.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEwSongsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EwSongSlice{ewSong}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testEwSongsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EwSongs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ewSongDBTypes = map[string]string{`Administrator`: `varchar`, `Author`: `varchar`, `Copyright`: `varchar`, `Description`: `varchar`, `ID`: `bigint`, `Tags`: `varchar`, `Text`: `text`, `Title`: `varchar`}
	_             = bytes.MinRead
)

func testEwSongsUpdate(t *testing.T) {
	t.Parallel()

	if len(ewSongColumns) == len(ewSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	if err = ewSong.Update(tx); err != nil {
		t.Error(err)
	}
}

func testEwSongsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ewSongColumns) == len(ewSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	ewSong := &EwSong{}
	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, ewSong, ewSongDBTypes, true, ewSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ewSongColumns, ewSongPrimaryKeyColumns) {
		fields = ewSongColumns
	} else {
		fields = strmangle.SetComplement(
			ewSongColumns,
			ewSongPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(ewSong))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := EwSongSlice{ewSong}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testEwSongsUpsert(t *testing.T) {
	t.Parallel()

	if len(ewSongColumns) == len(ewSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	ewSong := EwSong{}
	if err = randomize.Struct(seed, &ewSong, ewSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewSong.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EwSong: %s", err)
	}

	count, err := EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &ewSong, ewSongDBTypes, false, ewSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EwSong struct: %s", err)
	}

	if err = ewSong.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EwSong: %s", err)
	}

	count, err = EwSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testEwDatabases(t *testing.T) {
	t.Parallel()

	query := EwDatabases(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testEwDatabasesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ewDatabase.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEwDatabasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EwDatabases(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEwDatabasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EwDatabaseSlice{ewDatabase}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testEwDatabasesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := EwDatabaseExists(tx, ewDatabase.ID)
	if err != nil {
		t.Errorf("Unable to check if EwDatabase exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EwDatabaseExistsG to return true, but got false.")
	}
}
func testEwDatabasesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	ewDatabaseFound, err := FindEwDatabase(tx, ewDatabase.ID)
	if err != nil {
		t.Error(err)
	}

	if ewDatabaseFound == nil {
		t.Error("want a record, got nil")
	}
}
func testEwDatabasesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EwDatabases(tx).Bind(ewDatabase); err != nil {
		t.Error(err)
	}
}

func testEwDatabasesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := EwDatabases(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEwDatabasesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseOne := &EwDatabase{}
	ewDatabaseTwo := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabaseOne, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}
	if err = randomize.Struct(seed, ewDatabaseTwo, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ewDatabaseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EwDatabases(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEwDatabasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ewDatabaseOne := &EwDatabase{}
	ewDatabaseTwo := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabaseOne, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}
	if err = randomize.Struct(seed, ewDatabaseTwo, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ewDatabaseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func ewDatabaseBeforeInsertHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseAfterInsertHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseAfterSelectHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseBeforeUpdateHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseAfterUpdateHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseBeforeDeleteHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseAfterDeleteHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseBeforeUpsertHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func ewDatabaseAfterUpsertHook(e boil.Executor, o *EwDatabase) error {
	*o = EwDatabase{}
	return nil
}

func testEwDatabasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &EwDatabase{}
	o := &EwDatabase{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ewDatabaseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EwDatabase object: %s", err)
	}

	AddEwDatabaseHook(boil.BeforeInsertHook, ewDatabaseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseBeforeInsertHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.AfterInsertHook, ewDatabaseAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseAfterInsertHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.AfterSelectHook, ewDatabaseAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ewDatabaseAfterSelectHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.BeforeUpdateHook, ewDatabaseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ewDatabaseBeforeUpdateHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.AfterUpdateHook, ewDatabaseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ewDatabaseAfterUpdateHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.BeforeDeleteHook, ewDatabaseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ewDatabaseBeforeDeleteHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.AfterDeleteHook, ewDatabaseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ewDatabaseAfterDeleteHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.BeforeUpsertHook, ewDatabaseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseBeforeUpsertHooks = []EwDatabaseHook{}

	AddEwDatabaseHook(boil.AfterUpsertHook, ewDatabaseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseAfterUpsertHooks = []EwDatabaseHook{}
}
func testEwDatabasesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEwDatabasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx, ewDatabaseColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEwDatabaseToManyEwDatabaseLinks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c EwDatabaseLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...)
	randomize.Struct(seed, &c, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...)

	b.EwDatabaseID = a.ID
	c.EwDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	ewDatabaseLink, err := a.EwDatabaseLinks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ewDatabaseLink {
		if v.EwDatabaseID == b.EwDatabaseID {
			bFound = true
		}
		if v.EwDatabaseID == c.EwDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EwDatabaseSlice{&a}
	if err = a.L.LoadEwDatabaseLinks(tx, false, (*[]*EwDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EwDatabaseLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EwDatabaseLinks = nil
	if err = a.L.LoadEwDatabaseLinks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EwDatabaseLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ewDatabaseLink)
	}
}

func testEwDatabaseToManySREwConflicts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c SREwConflict

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...)
	randomize.Struct(seed, &c, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...)

	b.EwDatabaseID = a.ID
	c.EwDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srEwConflict, err := a.SREwConflicts(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srEwConflict {
		if v.EwDatabaseID == b.EwDatabaseID {
			bFound = true
		}
		if v.EwDatabaseID == c.EwDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EwDatabaseSlice{&a}
	if err = a.L.LoadSREwConflicts(tx, false, (*[]*EwDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SREwConflicts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SREwConflicts = nil
	if err = a.L.LoadSREwConflicts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SREwConflicts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srEwConflict)
	}
}

func testEwDatabaseToManySREwDatabaseLinks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c SREwDatabaseLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...)
	randomize.Struct(seed, &c, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...)

	b.EwDatabaseID = a.ID
	c.EwDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srEwDatabaseLink, err := a.SREwDatabaseLinks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srEwDatabaseLink {
		if v.EwDatabaseID == b.EwDatabaseID {
			bFound = true
		}
		if v.EwDatabaseID == c.EwDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EwDatabaseSlice{&a}
	if err = a.L.LoadSREwDatabaseLinks(tx, false, (*[]*EwDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SREwDatabaseLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SREwDatabaseLinks = nil
	if err = a.L.LoadSREwDatabaseLinks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SREwDatabaseLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srEwDatabaseLink)
	}
}

func testEwDatabaseToManyAddOpEwDatabaseLinks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c, d, e EwDatabaseLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EwDatabaseLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ewDatabaseLinkDBTypes, false, strmangle.SetComplement(ewDatabaseLinkPrimaryKeyColumns, ewDatabaseLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EwDatabaseLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEwDatabaseLinks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EwDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.EwDatabaseID)
		}
		if a.ID != second.EwDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.EwDatabaseID)
		}

		if first.R.EwDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.EwDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EwDatabaseLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EwDatabaseLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EwDatabaseLinks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEwDatabaseToManyAddOpSREwConflicts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c, d, e SREwConflict

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SREwConflict{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srEwConflictDBTypes, false, strmangle.SetComplement(srEwConflictPrimaryKeyColumns, srEwConflictColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SREwConflict{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSREwConflicts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EwDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.EwDatabaseID)
		}
		if a.ID != second.EwDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.EwDatabaseID)
		}

		if first.R.EwDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.EwDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SREwConflicts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SREwConflicts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SREwConflicts(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEwDatabaseToManyAddOpSREwDatabaseLinks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c, d, e SREwDatabaseLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SREwDatabaseLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srEwDatabaseLinkDBTypes, false, strmangle.SetComplement(srEwDatabaseLinkPrimaryKeyColumns, srEwDatabaseLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SREwDatabaseLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSREwDatabaseLinks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EwDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.EwDatabaseID)
		}
		if a.ID != second.EwDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.EwDatabaseID)
		}

		if first.R.EwDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.EwDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SREwDatabaseLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SREwDatabaseLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SREwDatabaseLinks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEwDatabaseToOneSongDatabaseUsingSongDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local EwDatabase
	var foreign SongDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SongDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SongDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EwDatabaseSlice{&local}
	if err = local.L.LoadSongDatabase(tx, false, (*[]*EwDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SongDatabase = nil
	if err = local.L.LoadSongDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEwDatabaseToOneMatiasClientUsingMatiasClient(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local EwDatabase
	var foreign MatiasClient

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, matiasClientDBTypes, false, matiasClientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MatiasClient struct: %s", err)
	}

	local.MatiasClientID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.MatiasClientID.Uint64 = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.MatiasClient(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EwDatabaseSlice{&local}
	if err = local.L.LoadMatiasClient(tx, false, (*[]*EwDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.MatiasClient == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MatiasClient = nil
	if err = local.L.LoadMatiasClient(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.MatiasClient == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEwDatabaseToOneSetOpSongDatabaseUsingSongDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c SongDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SongDatabase{&b, &c} {
		err = a.SetSongDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SongDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EwDatabases[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SongDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.SongDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID, x.ID)
		}
	}
}
func testEwDatabaseToOneSetOpMatiasClientUsingMatiasClient(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b, c MatiasClient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matiasClientDBTypes, false, strmangle.SetComplement(matiasClientPrimaryKeyColumns, matiasClientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matiasClientDBTypes, false, strmangle.SetComplement(matiasClientPrimaryKeyColumns, matiasClientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MatiasClient{&b, &c} {
		err = a.SetMatiasClient(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MatiasClient != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EwDatabases[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MatiasClientID.Uint64 != x.ID {
			t.Error("foreign key was wrong value", a.MatiasClientID.Uint64)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MatiasClientID.Uint64))
		reflect.Indirect(reflect.ValueOf(&a.MatiasClientID.Uint64)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MatiasClientID.Uint64 != x.ID {
			t.Error("foreign key was wrong value", a.MatiasClientID.Uint64, x.ID)
		}
	}
}

func testEwDatabaseToOneRemoveOpMatiasClientUsingMatiasClient(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabase
	var b MatiasClient

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, matiasClientDBTypes, false, strmangle.SetComplement(matiasClientPrimaryKeyColumns, matiasClientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMatiasClient(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMatiasClient(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MatiasClient(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MatiasClient != nil {
		t.Error("R struct entry should be nil")
	}

	if a.MatiasClientID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.EwDatabases) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testEwDatabasesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ewDatabase.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEwDatabasesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EwDatabaseSlice{ewDatabase}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testEwDatabasesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EwDatabases(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ewDatabaseDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `EwDatabaseKey`: `varchar`, `ID`: `bigint`, `MatiasClientID`: `bigint`, `Name`: `varchar`, `RemoveSongsFromEwDatabase`: `tinyint`, `RemoveSongsFromSongDatabase`: `tinyint`, `SongDatabaseID`: `bigint`, `UpdatedAt`: `datetime`, `UseNewestVersion`: `tinyint`, `VariationVersionConflictAction`: `int`}
	_                 = bytes.MinRead
)

func testEwDatabasesUpdate(t *testing.T) {
	t.Parallel()

	if len(ewDatabaseColumns) == len(ewDatabasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err = ewDatabase.Update(tx); err != nil {
		t.Error(err)
	}
}

func testEwDatabasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ewDatabaseColumns) == len(ewDatabasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	ewDatabase := &EwDatabase{}
	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, ewDatabase, ewDatabaseDBTypes, true, ewDatabasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ewDatabaseColumns, ewDatabasePrimaryKeyColumns) {
		fields = ewDatabaseColumns
	} else {
		fields = strmangle.SetComplement(
			ewDatabaseColumns,
			ewDatabasePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(ewDatabase))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := EwDatabaseSlice{ewDatabase}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testEwDatabasesUpsert(t *testing.T) {
	t.Parallel()

	if len(ewDatabaseColumns) == len(ewDatabasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	ewDatabase := EwDatabase{}
	if err = randomize.Struct(seed, &ewDatabase, ewDatabaseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabase.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EwDatabase: %s", err)
	}

	count, err := EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &ewDatabase, ewDatabaseDBTypes, false, ewDatabasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err = ewDatabase.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EwDatabase: %s", err)
	}

	count, err = EwDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

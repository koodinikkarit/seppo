// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// SREwConflict is an object representing the database table.
type SREwConflict struct {
	ID                 uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SRID               uint64      `boil:"sr_id" json:"sr_id" toml:"sr_id" yaml:"sr_id"`
	VariationVersionID uint64      `boil:"variation_version_id" json:"variation_version_id" toml:"variation_version_id" yaml:"variation_version_id"`
	EwDatabaseID       uint64      `boil:"ew_database_id" json:"ew_database_id" toml:"ew_database_id" yaml:"ew_database_id"`
	EwSongID           uint64      `boil:"ew_song_id" json:"ew_song_id" toml:"ew_song_id" yaml:"ew_song_id"`
	Name               null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Text               null.String `boil:"text" json:"text,omitempty" toml:"text" yaml:"text,omitempty"`

	R *srEwConflictR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L srEwConflictL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SREwConflictColumns = struct {
	ID                 string
	SRID               string
	VariationVersionID string
	EwDatabaseID       string
	EwSongID           string
	Name               string
	Text               string
}{
	ID:                 "id",
	SRID:               "sr_id",
	VariationVersionID: "variation_version_id",
	EwDatabaseID:       "ew_database_id",
	EwSongID:           "ew_song_id",
	Name:               "name",
	Text:               "text",
}

// srEwConflictR is where relationships are stored.
type srEwConflictR struct {
	SR               *SynchronizationRaport
	VariationVersion *VariationVersion
	EwDatabase       *EwDatabase
}

// srEwConflictL is where Load methods for each relationship are stored.
type srEwConflictL struct{}

var (
	srEwConflictColumns               = []string{"id", "sr_id", "variation_version_id", "ew_database_id", "ew_song_id", "name", "text"}
	srEwConflictColumnsWithoutDefault = []string{"sr_id", "variation_version_id", "ew_database_id", "ew_song_id", "name", "text"}
	srEwConflictColumnsWithDefault    = []string{"id"}
	srEwConflictPrimaryKeyColumns     = []string{"id"}
)

type (
	// SREwConflictSlice is an alias for a slice of pointers to SREwConflict.
	// This should generally be used opposed to []SREwConflict.
	SREwConflictSlice []*SREwConflict
	// SREwConflictHook is the signature for custom SREwConflict hook methods
	SREwConflictHook func(boil.Executor, *SREwConflict) error

	srEwConflictQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	srEwConflictType                 = reflect.TypeOf(&SREwConflict{})
	srEwConflictMapping              = queries.MakeStructMapping(srEwConflictType)
	srEwConflictPrimaryKeyMapping, _ = queries.BindMapping(srEwConflictType, srEwConflictMapping, srEwConflictPrimaryKeyColumns)
	srEwConflictInsertCacheMut       sync.RWMutex
	srEwConflictInsertCache          = make(map[string]insertCache)
	srEwConflictUpdateCacheMut       sync.RWMutex
	srEwConflictUpdateCache          = make(map[string]updateCache)
	srEwConflictUpsertCacheMut       sync.RWMutex
	srEwConflictUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var srEwConflictBeforeInsertHooks []SREwConflictHook
var srEwConflictBeforeUpdateHooks []SREwConflictHook
var srEwConflictBeforeDeleteHooks []SREwConflictHook
var srEwConflictBeforeUpsertHooks []SREwConflictHook

var srEwConflictAfterInsertHooks []SREwConflictHook
var srEwConflictAfterSelectHooks []SREwConflictHook
var srEwConflictAfterUpdateHooks []SREwConflictHook
var srEwConflictAfterDeleteHooks []SREwConflictHook
var srEwConflictAfterUpsertHooks []SREwConflictHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SREwConflict) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SREwConflict) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SREwConflict) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SREwConflict) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SREwConflict) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SREwConflict) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SREwConflict) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SREwConflict) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SREwConflict) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwConflictAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSREwConflictHook registers your hook function for all future operations.
func AddSREwConflictHook(hookPoint boil.HookPoint, srEwConflictHook SREwConflictHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		srEwConflictBeforeInsertHooks = append(srEwConflictBeforeInsertHooks, srEwConflictHook)
	case boil.BeforeUpdateHook:
		srEwConflictBeforeUpdateHooks = append(srEwConflictBeforeUpdateHooks, srEwConflictHook)
	case boil.BeforeDeleteHook:
		srEwConflictBeforeDeleteHooks = append(srEwConflictBeforeDeleteHooks, srEwConflictHook)
	case boil.BeforeUpsertHook:
		srEwConflictBeforeUpsertHooks = append(srEwConflictBeforeUpsertHooks, srEwConflictHook)
	case boil.AfterInsertHook:
		srEwConflictAfterInsertHooks = append(srEwConflictAfterInsertHooks, srEwConflictHook)
	case boil.AfterSelectHook:
		srEwConflictAfterSelectHooks = append(srEwConflictAfterSelectHooks, srEwConflictHook)
	case boil.AfterUpdateHook:
		srEwConflictAfterUpdateHooks = append(srEwConflictAfterUpdateHooks, srEwConflictHook)
	case boil.AfterDeleteHook:
		srEwConflictAfterDeleteHooks = append(srEwConflictAfterDeleteHooks, srEwConflictHook)
	case boil.AfterUpsertHook:
		srEwConflictAfterUpsertHooks = append(srEwConflictAfterUpsertHooks, srEwConflictHook)
	}
}

// OneP returns a single srEwConflict record from the query, and panics on error.
func (q srEwConflictQuery) OneP() *SREwConflict {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single srEwConflict record from the query.
func (q srEwConflictQuery) One() (*SREwConflict, error) {
	o := &SREwConflict{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sr_ew_conflicts")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SREwConflict records from the query, and panics on error.
func (q srEwConflictQuery) AllP() SREwConflictSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SREwConflict records from the query.
func (q srEwConflictQuery) All() (SREwConflictSlice, error) {
	var o []*SREwConflict

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SREwConflict slice")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SREwConflict records in the query, and panics on error.
func (q srEwConflictQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SREwConflict records in the query.
func (q srEwConflictQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sr_ew_conflicts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q srEwConflictQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q srEwConflictQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sr_ew_conflicts exists")
	}

	return count > 0, nil
}

// SRG pointed to by the foreign key.
func (o *SREwConflict) SRG(mods ...qm.QueryMod) synchronizationRaportQuery {
	return o.SR(boil.GetDB(), mods...)
}

// SR pointed to by the foreign key.
func (o *SREwConflict) SR(exec boil.Executor, mods ...qm.QueryMod) synchronizationRaportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SRID),
	}

	queryMods = append(queryMods, mods...)

	query := SynchronizationRaports(exec, queryMods...)
	queries.SetFrom(query.Query, "`synchronization_raports`")

	return query
}

// VariationVersionG pointed to by the foreign key.
func (o *SREwConflict) VariationVersionG(mods ...qm.QueryMod) variationVersionQuery {
	return o.VariationVersion(boil.GetDB(), mods...)
}

// VariationVersion pointed to by the foreign key.
func (o *SREwConflict) VariationVersion(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationVersionID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
}

// EwDatabaseG pointed to by the foreign key.
func (o *SREwConflict) EwDatabaseG(mods ...qm.QueryMod) ewDatabaseQuery {
	return o.EwDatabase(boil.GetDB(), mods...)
}

// EwDatabase pointed to by the foreign key.
func (o *SREwConflict) EwDatabase(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EwDatabaseID),
	}

	queryMods = append(queryMods, mods...)

	query := EwDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_databases`")

	return query
} // LoadSR allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwConflictL) LoadSR(e boil.Executor, singular bool, maybeSREwConflict interface{}) error {
	var slice []*SREwConflict
	var object *SREwConflict

	count := 1
	if singular {
		object = maybeSREwConflict.(*SREwConflict)
	} else {
		slice = *maybeSREwConflict.(*[]*SREwConflict)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwConflictR{}
		}
		args[0] = object.SRID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwConflictR{}
			}
			args[i] = obj.SRID
		}
	}

	query := fmt.Sprintf(
		"select * from `synchronization_raports` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SynchronizationRaport")
	}
	defer results.Close()

	var resultSlice []*SynchronizationRaport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SynchronizationRaport")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SR = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRID == foreign.ID {
				local.R.SR = foreign
				break
			}
		}
	}

	return nil
}

// LoadVariationVersion allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwConflictL) LoadVariationVersion(e boil.Executor, singular bool, maybeSREwConflict interface{}) error {
	var slice []*SREwConflict
	var object *SREwConflict

	count := 1
	if singular {
		object = maybeSREwConflict.(*SREwConflict)
	} else {
		slice = *maybeSREwConflict.(*[]*SREwConflict)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwConflictR{}
		}
		args[0] = object.VariationVersionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwConflictR{}
			}
			args[i] = obj.VariationVersionID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.VariationVersion = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationVersionID == foreign.ID {
				local.R.VariationVersion = foreign
				break
			}
		}
	}

	return nil
}

// LoadEwDatabase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwConflictL) LoadEwDatabase(e boil.Executor, singular bool, maybeSREwConflict interface{}) error {
	var slice []*SREwConflict
	var object *SREwConflict

	count := 1
	if singular {
		object = maybeSREwConflict.(*SREwConflict)
	} else {
		slice = *maybeSREwConflict.(*[]*SREwConflict)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwConflictR{}
		}
		args[0] = object.EwDatabaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwConflictR{}
			}
			args[i] = obj.EwDatabaseID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_databases` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EwDatabase")
	}
	defer results.Close()

	var resultSlice []*EwDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EwDatabase")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.EwDatabase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EwDatabaseID == foreign.ID {
				local.R.EwDatabase = foreign
				break
			}
		}
	}

	return nil
}

// SetSRG of the sr_ew_conflict to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwConflicts.
// Uses the global database handle.
func (o *SREwConflict) SetSRG(insert bool, related *SynchronizationRaport) error {
	return o.SetSR(boil.GetDB(), insert, related)
}

// SetSRP of the sr_ew_conflict to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwConflicts.
// Panics on error.
func (o *SREwConflict) SetSRP(exec boil.Executor, insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSRGP of the sr_ew_conflict to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwConflicts.
// Uses the global database handle and panics on error.
func (o *SREwConflict) SetSRGP(insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSR of the sr_ew_conflict to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwConflicts.
func (o *SREwConflict) SetSR(exec boil.Executor, insert bool, related *SynchronizationRaport) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_conflicts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
		strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRID = related.ID

	if o.R == nil {
		o.R = &srEwConflictR{
			SR: related,
		}
	} else {
		o.R.SR = related
	}

	if related.R == nil {
		related.R = &synchronizationRaportR{
			SRSREwConflicts: SREwConflictSlice{o},
		}
	} else {
		related.R.SRSREwConflicts = append(related.R.SRSREwConflicts, o)
	}

	return nil
}

// SetVariationVersionG of the sr_ew_conflict to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwConflicts.
// Uses the global database handle.
func (o *SREwConflict) SetVariationVersionG(insert bool, related *VariationVersion) error {
	return o.SetVariationVersion(boil.GetDB(), insert, related)
}

// SetVariationVersionP of the sr_ew_conflict to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwConflicts.
// Panics on error.
func (o *SREwConflict) SetVariationVersionP(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersionGP of the sr_ew_conflict to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwConflicts.
// Uses the global database handle and panics on error.
func (o *SREwConflict) SetVariationVersionGP(insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersion of the sr_ew_conflict to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwConflicts.
func (o *SREwConflict) SetVariationVersion(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_conflicts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_version_id"}),
		strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationVersionID = related.ID

	if o.R == nil {
		o.R = &srEwConflictR{
			VariationVersion: related,
		}
	} else {
		o.R.VariationVersion = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			SREwConflicts: SREwConflictSlice{o},
		}
	} else {
		related.R.SREwConflicts = append(related.R.SREwConflicts, o)
	}

	return nil
}

// SetEwDatabaseG of the sr_ew_conflict to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwConflicts.
// Uses the global database handle.
func (o *SREwConflict) SetEwDatabaseG(insert bool, related *EwDatabase) error {
	return o.SetEwDatabase(boil.GetDB(), insert, related)
}

// SetEwDatabaseP of the sr_ew_conflict to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwConflicts.
// Panics on error.
func (o *SREwConflict) SetEwDatabaseP(exec boil.Executor, insert bool, related *EwDatabase) {
	if err := o.SetEwDatabase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabaseGP of the sr_ew_conflict to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwConflicts.
// Uses the global database handle and panics on error.
func (o *SREwConflict) SetEwDatabaseGP(insert bool, related *EwDatabase) {
	if err := o.SetEwDatabase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabase of the sr_ew_conflict to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwConflicts.
func (o *SREwConflict) SetEwDatabase(exec boil.Executor, insert bool, related *EwDatabase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_conflicts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ew_database_id"}),
		strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EwDatabaseID = related.ID

	if o.R == nil {
		o.R = &srEwConflictR{
			EwDatabase: related,
		}
	} else {
		o.R.EwDatabase = related
	}

	if related.R == nil {
		related.R = &ewDatabaseR{
			SREwConflicts: SREwConflictSlice{o},
		}
	} else {
		related.R.SREwConflicts = append(related.R.SREwConflicts, o)
	}

	return nil
}

// SREwConflictsG retrieves all records.
func SREwConflictsG(mods ...qm.QueryMod) srEwConflictQuery {
	return SREwConflicts(boil.GetDB(), mods...)
}

// SREwConflicts retrieves all the records using an executor.
func SREwConflicts(exec boil.Executor, mods ...qm.QueryMod) srEwConflictQuery {
	mods = append(mods, qm.From("`sr_ew_conflicts`"))
	return srEwConflictQuery{NewQuery(exec, mods...)}
}

// FindSREwConflictG retrieves a single record by ID.
func FindSREwConflictG(id uint64, selectCols ...string) (*SREwConflict, error) {
	return FindSREwConflict(boil.GetDB(), id, selectCols...)
}

// FindSREwConflictGP retrieves a single record by ID, and panics on error.
func FindSREwConflictGP(id uint64, selectCols ...string) *SREwConflict {
	retobj, err := FindSREwConflict(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSREwConflict retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSREwConflict(exec boil.Executor, id uint64, selectCols ...string) (*SREwConflict, error) {
	srEwConflictObj := &SREwConflict{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sr_ew_conflicts` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(srEwConflictObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sr_ew_conflicts")
	}

	return srEwConflictObj, nil
}

// FindSREwConflictP retrieves a single record by ID with an executor, and panics on error.
func FindSREwConflictP(exec boil.Executor, id uint64, selectCols ...string) *SREwConflict {
	retobj, err := FindSREwConflict(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SREwConflict) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SREwConflict) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SREwConflict) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SREwConflict) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_ew_conflicts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srEwConflictColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	srEwConflictInsertCacheMut.RLock()
	cache, cached := srEwConflictInsertCache[key]
	srEwConflictInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			srEwConflictColumns,
			srEwConflictColumnsWithDefault,
			srEwConflictColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(srEwConflictType, srEwConflictMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(srEwConflictType, srEwConflictMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sr_ew_conflicts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sr_ew_conflicts` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sr_ew_conflicts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sr_ew_conflicts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srEwConflictMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_ew_conflicts")
	}

CacheNoHooks:
	if !cached {
		srEwConflictInsertCacheMut.Lock()
		srEwConflictInsertCache[key] = cache
		srEwConflictInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SREwConflict record. See Update for
// whitelist behavior description.
func (o *SREwConflict) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SREwConflict record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SREwConflict) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SREwConflict, and panics on error.
// See Update for whitelist behavior description.
func (o *SREwConflict) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SREwConflict.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SREwConflict) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	srEwConflictUpdateCacheMut.RLock()
	cache, cached := srEwConflictUpdateCache[key]
	srEwConflictUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			srEwConflictColumns,
			srEwConflictPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sr_ew_conflicts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sr_ew_conflicts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(srEwConflictType, srEwConflictMapping, append(wl, srEwConflictPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sr_ew_conflicts row")
	}

	if !cached {
		srEwConflictUpdateCacheMut.Lock()
		srEwConflictUpdateCache[key] = cache
		srEwConflictUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q srEwConflictQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q srEwConflictQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sr_ew_conflicts")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SREwConflictSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SREwConflictSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SREwConflictSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SREwConflictSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwConflictPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sr_ew_conflicts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwConflictPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in srEwConflict slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SREwConflict) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SREwConflict) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SREwConflict) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SREwConflict) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_ew_conflicts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srEwConflictColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	srEwConflictUpsertCacheMut.RLock()
	cache, cached := srEwConflictUpsertCache[key]
	srEwConflictUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			srEwConflictColumns,
			srEwConflictColumnsWithDefault,
			srEwConflictColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			srEwConflictColumns,
			srEwConflictPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sr_ew_conflicts, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "sr_ew_conflicts", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sr_ew_conflicts` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(srEwConflictType, srEwConflictMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(srEwConflictType, srEwConflictMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sr_ew_conflicts")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srEwConflictMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_ew_conflicts")
	}

CacheNoHooks:
	if !cached {
		srEwConflictUpsertCacheMut.Lock()
		srEwConflictUpsertCache[key] = cache
		srEwConflictUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SREwConflict record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SREwConflict) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SREwConflict record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SREwConflict) DeleteG() error {
	if o == nil {
		return errors.New("models: no SREwConflict provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SREwConflict record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SREwConflict) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SREwConflict record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SREwConflict) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SREwConflict provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), srEwConflictPrimaryKeyMapping)
	sql := "DELETE FROM `sr_ew_conflicts` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sr_ew_conflicts")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q srEwConflictQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q srEwConflictQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no srEwConflictQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sr_ew_conflicts")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SREwConflictSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SREwConflictSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SREwConflict slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SREwConflictSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SREwConflictSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SREwConflict slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(srEwConflictBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwConflictPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sr_ew_conflicts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwConflictPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from srEwConflict slice")
	}

	if len(srEwConflictAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SREwConflict) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SREwConflict) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SREwConflict) ReloadG() error {
	if o == nil {
		return errors.New("models: no SREwConflict provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SREwConflict) Reload(exec boil.Executor) error {
	ret, err := FindSREwConflict(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SREwConflictSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SREwConflictSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SREwConflictSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SREwConflictSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SREwConflictSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	srEwConflicts := SREwConflictSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwConflictPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sr_ew_conflicts`.* FROM `sr_ew_conflicts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwConflictPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&srEwConflicts)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SREwConflictSlice")
	}

	*o = srEwConflicts

	return nil
}

// SREwConflictExists checks if the SREwConflict row exists.
func SREwConflictExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sr_ew_conflicts` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sr_ew_conflicts exists")
	}

	return exists, nil
}

// SREwConflictExistsG checks if the SREwConflict row exists.
func SREwConflictExistsG(id uint64) (bool, error) {
	return SREwConflictExists(boil.GetDB(), id)
}

// SREwConflictExistsGP checks if the SREwConflict row exists. Panics on error.
func SREwConflictExistsGP(id uint64) bool {
	e, err := SREwConflictExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SREwConflictExistsP checks if the SREwConflict row exists. Panics on error.
func SREwConflictExistsP(exec boil.Executor, id uint64) bool {
	e, err := SREwConflictExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

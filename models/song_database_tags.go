// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// SongDatabaseTag is an object representing the database table.
type SongDatabaseTag struct {
	ID             uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	TagID          uint64    `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	SongDatabaseID uint64    `boil:"song_database_id" json:"song_database_id" toml:"song_database_id" yaml:"song_database_id"`
	CreatedAt      null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *songDatabaseTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songDatabaseTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongDatabaseTagColumns = struct {
	ID             string
	TagID          string
	SongDatabaseID string
	CreatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	TagID:          "tag_id",
	SongDatabaseID: "song_database_id",
	CreatedAt:      "created_at",
	DeletedAt:      "deleted_at",
}

// songDatabaseTagR is where relationships are stored.
type songDatabaseTagR struct {
	Tag          *Tag
	SongDatabase *SongDatabase
}

// songDatabaseTagL is where Load methods for each relationship are stored.
type songDatabaseTagL struct{}

var (
	songDatabaseTagColumns               = []string{"id", "tag_id", "song_database_id", "created_at", "deleted_at"}
	songDatabaseTagColumnsWithoutDefault = []string{"tag_id", "song_database_id", "created_at", "deleted_at"}
	songDatabaseTagColumnsWithDefault    = []string{"id"}
	songDatabaseTagPrimaryKeyColumns     = []string{"id"}
)

type (
	// SongDatabaseTagSlice is an alias for a slice of pointers to SongDatabaseTag.
	// This should generally be used opposed to []SongDatabaseTag.
	SongDatabaseTagSlice []*SongDatabaseTag
	// SongDatabaseTagHook is the signature for custom SongDatabaseTag hook methods
	SongDatabaseTagHook func(boil.Executor, *SongDatabaseTag) error

	songDatabaseTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songDatabaseTagType                 = reflect.TypeOf(&SongDatabaseTag{})
	songDatabaseTagMapping              = queries.MakeStructMapping(songDatabaseTagType)
	songDatabaseTagPrimaryKeyMapping, _ = queries.BindMapping(songDatabaseTagType, songDatabaseTagMapping, songDatabaseTagPrimaryKeyColumns)
	songDatabaseTagInsertCacheMut       sync.RWMutex
	songDatabaseTagInsertCache          = make(map[string]insertCache)
	songDatabaseTagUpdateCacheMut       sync.RWMutex
	songDatabaseTagUpdateCache          = make(map[string]updateCache)
	songDatabaseTagUpsertCacheMut       sync.RWMutex
	songDatabaseTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var songDatabaseTagBeforeInsertHooks []SongDatabaseTagHook
var songDatabaseTagBeforeUpdateHooks []SongDatabaseTagHook
var songDatabaseTagBeforeDeleteHooks []SongDatabaseTagHook
var songDatabaseTagBeforeUpsertHooks []SongDatabaseTagHook

var songDatabaseTagAfterInsertHooks []SongDatabaseTagHook
var songDatabaseTagAfterSelectHooks []SongDatabaseTagHook
var songDatabaseTagAfterUpdateHooks []SongDatabaseTagHook
var songDatabaseTagAfterDeleteHooks []SongDatabaseTagHook
var songDatabaseTagAfterUpsertHooks []SongDatabaseTagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SongDatabaseTag) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SongDatabaseTag) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SongDatabaseTag) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SongDatabaseTag) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SongDatabaseTag) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SongDatabaseTag) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SongDatabaseTag) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SongDatabaseTag) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SongDatabaseTag) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseTagAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongDatabaseTagHook registers your hook function for all future operations.
func AddSongDatabaseTagHook(hookPoint boil.HookPoint, songDatabaseTagHook SongDatabaseTagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		songDatabaseTagBeforeInsertHooks = append(songDatabaseTagBeforeInsertHooks, songDatabaseTagHook)
	case boil.BeforeUpdateHook:
		songDatabaseTagBeforeUpdateHooks = append(songDatabaseTagBeforeUpdateHooks, songDatabaseTagHook)
	case boil.BeforeDeleteHook:
		songDatabaseTagBeforeDeleteHooks = append(songDatabaseTagBeforeDeleteHooks, songDatabaseTagHook)
	case boil.BeforeUpsertHook:
		songDatabaseTagBeforeUpsertHooks = append(songDatabaseTagBeforeUpsertHooks, songDatabaseTagHook)
	case boil.AfterInsertHook:
		songDatabaseTagAfterInsertHooks = append(songDatabaseTagAfterInsertHooks, songDatabaseTagHook)
	case boil.AfterSelectHook:
		songDatabaseTagAfterSelectHooks = append(songDatabaseTagAfterSelectHooks, songDatabaseTagHook)
	case boil.AfterUpdateHook:
		songDatabaseTagAfterUpdateHooks = append(songDatabaseTagAfterUpdateHooks, songDatabaseTagHook)
	case boil.AfterDeleteHook:
		songDatabaseTagAfterDeleteHooks = append(songDatabaseTagAfterDeleteHooks, songDatabaseTagHook)
	case boil.AfterUpsertHook:
		songDatabaseTagAfterUpsertHooks = append(songDatabaseTagAfterUpsertHooks, songDatabaseTagHook)
	}
}

// OneP returns a single songDatabaseTag record from the query, and panics on error.
func (q songDatabaseTagQuery) OneP() *SongDatabaseTag {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single songDatabaseTag record from the query.
func (q songDatabaseTagQuery) One() (*SongDatabaseTag, error) {
	o := &SongDatabaseTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for song_database_tags")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SongDatabaseTag records from the query, and panics on error.
func (q songDatabaseTagQuery) AllP() SongDatabaseTagSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SongDatabaseTag records from the query.
func (q songDatabaseTagQuery) All() (SongDatabaseTagSlice, error) {
	var o []*SongDatabaseTag

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SongDatabaseTag slice")
	}

	if len(songDatabaseTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SongDatabaseTag records in the query, and panics on error.
func (q songDatabaseTagQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SongDatabaseTag records in the query.
func (q songDatabaseTagQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count song_database_tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q songDatabaseTagQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q songDatabaseTagQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if song_database_tags exists")
	}

	return count > 0, nil
}

// TagG pointed to by the foreign key.
func (o *SongDatabaseTag) TagG(mods ...qm.QueryMod) tagQuery {
	return o.Tag(boil.GetDB(), mods...)
}

// Tag pointed to by the foreign key.
func (o *SongDatabaseTag) Tag(exec boil.Executor, mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(exec, queryMods...)
	queries.SetFrom(query.Query, "`tags`")

	return query
}

// SongDatabaseG pointed to by the foreign key.
func (o *SongDatabaseTag) SongDatabaseG(mods ...qm.QueryMod) songDatabaseQuery {
	return o.SongDatabase(boil.GetDB(), mods...)
}

// SongDatabase pointed to by the foreign key.
func (o *SongDatabaseTag) SongDatabase(exec boil.Executor, mods ...qm.QueryMod) songDatabaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SongDatabaseID),
	}

	queryMods = append(queryMods, mods...)

	query := SongDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`song_databases`")

	return query
} // LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseTagL) LoadTag(e boil.Executor, singular bool, maybeSongDatabaseTag interface{}) error {
	var slice []*SongDatabaseTag
	var object *SongDatabaseTag

	count := 1
	if singular {
		object = maybeSongDatabaseTag.(*SongDatabaseTag)
	} else {
		slice = *maybeSongDatabaseTag.(*[]*SongDatabaseTag)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseTagR{}
		}
		args[0] = object.TagID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseTagR{}
			}
			args[i] = obj.TagID
		}
	}

	query := fmt.Sprintf(
		"select * from `tags` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}
	defer results.Close()

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if len(songDatabaseTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Tag = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				break
			}
		}
	}

	return nil
}

// LoadSongDatabase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseTagL) LoadSongDatabase(e boil.Executor, singular bool, maybeSongDatabaseTag interface{}) error {
	var slice []*SongDatabaseTag
	var object *SongDatabaseTag

	count := 1
	if singular {
		object = maybeSongDatabaseTag.(*SongDatabaseTag)
	} else {
		slice = *maybeSongDatabaseTag.(*[]*SongDatabaseTag)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseTagR{}
		}
		args[0] = object.SongDatabaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseTagR{}
			}
			args[i] = obj.SongDatabaseID
		}
	}

	query := fmt.Sprintf(
		"select * from `song_databases` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SongDatabase")
	}
	defer results.Close()

	var resultSlice []*SongDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SongDatabase")
	}

	if len(songDatabaseTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SongDatabase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SongDatabaseID == foreign.ID {
				local.R.SongDatabase = foreign
				break
			}
		}
	}

	return nil
}

// SetTagG of the song_database_tag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.SongDatabaseTags.
// Uses the global database handle.
func (o *SongDatabaseTag) SetTagG(insert bool, related *Tag) error {
	return o.SetTag(boil.GetDB(), insert, related)
}

// SetTagP of the song_database_tag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.SongDatabaseTags.
// Panics on error.
func (o *SongDatabaseTag) SetTagP(exec boil.Executor, insert bool, related *Tag) {
	if err := o.SetTag(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTagGP of the song_database_tag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.SongDatabaseTags.
// Uses the global database handle and panics on error.
func (o *SongDatabaseTag) SetTagGP(insert bool, related *Tag) {
	if err := o.SetTag(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTag of the song_database_tag to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.SongDatabaseTags.
func (o *SongDatabaseTag) SetTag(exec boil.Executor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `song_database_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"tag_id"}),
		strmangle.WhereClause("`", "`", 0, songDatabaseTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID

	if o.R == nil {
		o.R = &songDatabaseTagR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			SongDatabaseTags: SongDatabaseTagSlice{o},
		}
	} else {
		related.R.SongDatabaseTags = append(related.R.SongDatabaseTags, o)
	}

	return nil
}

// SetSongDatabaseG of the song_database_tag to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SongDatabaseTags.
// Uses the global database handle.
func (o *SongDatabaseTag) SetSongDatabaseG(insert bool, related *SongDatabase) error {
	return o.SetSongDatabase(boil.GetDB(), insert, related)
}

// SetSongDatabaseP of the song_database_tag to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SongDatabaseTags.
// Panics on error.
func (o *SongDatabaseTag) SetSongDatabaseP(exec boil.Executor, insert bool, related *SongDatabase) {
	if err := o.SetSongDatabase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongDatabaseGP of the song_database_tag to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SongDatabaseTags.
// Uses the global database handle and panics on error.
func (o *SongDatabaseTag) SetSongDatabaseGP(insert bool, related *SongDatabase) {
	if err := o.SetSongDatabase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongDatabase of the song_database_tag to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SongDatabaseTags.
func (o *SongDatabaseTag) SetSongDatabase(exec boil.Executor, insert bool, related *SongDatabase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `song_database_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
		strmangle.WhereClause("`", "`", 0, songDatabaseTagPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SongDatabaseID = related.ID

	if o.R == nil {
		o.R = &songDatabaseTagR{
			SongDatabase: related,
		}
	} else {
		o.R.SongDatabase = related
	}

	if related.R == nil {
		related.R = &songDatabaseR{
			SongDatabaseTags: SongDatabaseTagSlice{o},
		}
	} else {
		related.R.SongDatabaseTags = append(related.R.SongDatabaseTags, o)
	}

	return nil
}

// SongDatabaseTagsG retrieves all records.
func SongDatabaseTagsG(mods ...qm.QueryMod) songDatabaseTagQuery {
	return SongDatabaseTags(boil.GetDB(), mods...)
}

// SongDatabaseTags retrieves all the records using an executor.
func SongDatabaseTags(exec boil.Executor, mods ...qm.QueryMod) songDatabaseTagQuery {
	mods = append(mods, qm.From("`song_database_tags`"))
	return songDatabaseTagQuery{NewQuery(exec, mods...)}
}

// FindSongDatabaseTagG retrieves a single record by ID.
func FindSongDatabaseTagG(id uint64, selectCols ...string) (*SongDatabaseTag, error) {
	return FindSongDatabaseTag(boil.GetDB(), id, selectCols...)
}

// FindSongDatabaseTagGP retrieves a single record by ID, and panics on error.
func FindSongDatabaseTagGP(id uint64, selectCols ...string) *SongDatabaseTag {
	retobj, err := FindSongDatabaseTag(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSongDatabaseTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSongDatabaseTag(exec boil.Executor, id uint64, selectCols ...string) (*SongDatabaseTag, error) {
	songDatabaseTagObj := &SongDatabaseTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `song_database_tags` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(songDatabaseTagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from song_database_tags")
	}

	return songDatabaseTagObj, nil
}

// FindSongDatabaseTagP retrieves a single record by ID with an executor, and panics on error.
func FindSongDatabaseTagP(exec boil.Executor, id uint64, selectCols ...string) *SongDatabaseTag {
	retobj, err := FindSongDatabaseTag(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SongDatabaseTag) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SongDatabaseTag) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SongDatabaseTag) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SongDatabaseTag) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no song_database_tags provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songDatabaseTagColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	songDatabaseTagInsertCacheMut.RLock()
	cache, cached := songDatabaseTagInsertCache[key]
	songDatabaseTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			songDatabaseTagColumns,
			songDatabaseTagColumnsWithDefault,
			songDatabaseTagColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(songDatabaseTagType, songDatabaseTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songDatabaseTagType, songDatabaseTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `song_database_tags` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `song_database_tags` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `song_database_tags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, songDatabaseTagPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into song_database_tags")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songDatabaseTagMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for song_database_tags")
	}

CacheNoHooks:
	if !cached {
		songDatabaseTagInsertCacheMut.Lock()
		songDatabaseTagInsertCache[key] = cache
		songDatabaseTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SongDatabaseTag record. See Update for
// whitelist behavior description.
func (o *SongDatabaseTag) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SongDatabaseTag record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SongDatabaseTag) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SongDatabaseTag, and panics on error.
// See Update for whitelist behavior description.
func (o *SongDatabaseTag) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SongDatabaseTag.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SongDatabaseTag) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	songDatabaseTagUpdateCacheMut.RLock()
	cache, cached := songDatabaseTagUpdateCache[key]
	songDatabaseTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			songDatabaseTagColumns,
			songDatabaseTagPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update song_database_tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `song_database_tags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, songDatabaseTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songDatabaseTagType, songDatabaseTagMapping, append(wl, songDatabaseTagPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update song_database_tags row")
	}

	if !cached {
		songDatabaseTagUpdateCacheMut.Lock()
		songDatabaseTagUpdateCache[key] = cache
		songDatabaseTagUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q songDatabaseTagQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q songDatabaseTagQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for song_database_tags")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SongDatabaseTagSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SongDatabaseTagSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SongDatabaseTagSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongDatabaseTagSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songDatabaseTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `song_database_tags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songDatabaseTagPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in songDatabaseTag slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SongDatabaseTag) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SongDatabaseTag) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SongDatabaseTag) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SongDatabaseTag) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no song_database_tags provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songDatabaseTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songDatabaseTagUpsertCacheMut.RLock()
	cache, cached := songDatabaseTagUpsertCache[key]
	songDatabaseTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			songDatabaseTagColumns,
			songDatabaseTagColumnsWithDefault,
			songDatabaseTagColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			songDatabaseTagColumns,
			songDatabaseTagPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert song_database_tags, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "song_database_tags", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `song_database_tags` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(songDatabaseTagType, songDatabaseTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songDatabaseTagType, songDatabaseTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for song_database_tags")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songDatabaseTagMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for song_database_tags")
	}

CacheNoHooks:
	if !cached {
		songDatabaseTagUpsertCacheMut.Lock()
		songDatabaseTagUpsertCache[key] = cache
		songDatabaseTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SongDatabaseTag record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SongDatabaseTag) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SongDatabaseTag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SongDatabaseTag) DeleteG() error {
	if o == nil {
		return errors.New("models: no SongDatabaseTag provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SongDatabaseTag record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SongDatabaseTag) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SongDatabaseTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SongDatabaseTag) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SongDatabaseTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songDatabaseTagPrimaryKeyMapping)
	sql := "DELETE FROM `song_database_tags` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from song_database_tags")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q songDatabaseTagQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q songDatabaseTagQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no songDatabaseTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from song_database_tags")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SongDatabaseTagSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SongDatabaseTagSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SongDatabaseTag slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SongDatabaseTagSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongDatabaseTagSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SongDatabaseTag slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(songDatabaseTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songDatabaseTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `song_database_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songDatabaseTagPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from songDatabaseTag slice")
	}

	if len(songDatabaseTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SongDatabaseTag) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SongDatabaseTag) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SongDatabaseTag) ReloadG() error {
	if o == nil {
		return errors.New("models: no SongDatabaseTag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SongDatabaseTag) Reload(exec boil.Executor) error {
	ret, err := FindSongDatabaseTag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SongDatabaseTagSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SongDatabaseTagSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongDatabaseTagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SongDatabaseTagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongDatabaseTagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	songDatabaseTags := SongDatabaseTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songDatabaseTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `song_database_tags`.* FROM `song_database_tags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songDatabaseTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&songDatabaseTags)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SongDatabaseTagSlice")
	}

	*o = songDatabaseTags

	return nil
}

// SongDatabaseTagExists checks if the SongDatabaseTag row exists.
func SongDatabaseTagExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `song_database_tags` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if song_database_tags exists")
	}

	return exists, nil
}

// SongDatabaseTagExistsG checks if the SongDatabaseTag row exists.
func SongDatabaseTagExistsG(id uint64) (bool, error) {
	return SongDatabaseTagExists(boil.GetDB(), id)
}

// SongDatabaseTagExistsGP checks if the SongDatabaseTag row exists. Panics on error.
func SongDatabaseTagExistsGP(id uint64) bool {
	e, err := SongDatabaseTagExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SongDatabaseTagExistsP checks if the SongDatabaseTag row exists. Panics on error.
func SongDatabaseTagExistsP(exec boil.Executor, id uint64) bool {
	e, err := SongDatabaseTagExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

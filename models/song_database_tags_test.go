// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSongDatabaseTags(t *testing.T) {
	t.Parallel()

	query := SongDatabaseTags(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSongDatabaseTagsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = songDatabaseTag.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongDatabaseTagsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SongDatabaseTags(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongDatabaseTagsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongDatabaseTagSlice{songDatabaseTag}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSongDatabaseTagsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SongDatabaseTagExists(tx, songDatabaseTag.ID)
	if err != nil {
		t.Errorf("Unable to check if SongDatabaseTag exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SongDatabaseTagExistsG to return true, but got false.")
	}
}
func testSongDatabaseTagsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	songDatabaseTagFound, err := FindSongDatabaseTag(tx, songDatabaseTag.ID)
	if err != nil {
		t.Error(err)
	}

	if songDatabaseTagFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSongDatabaseTagsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SongDatabaseTags(tx).Bind(songDatabaseTag); err != nil {
		t.Error(err)
	}
}

func testSongDatabaseTagsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SongDatabaseTags(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSongDatabaseTagsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTagOne := &SongDatabaseTag{}
	songDatabaseTagTwo := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTagOne, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}
	if err = randomize.Struct(seed, songDatabaseTagTwo, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTagOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songDatabaseTagTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SongDatabaseTags(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSongDatabaseTagsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	songDatabaseTagOne := &SongDatabaseTag{}
	songDatabaseTagTwo := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTagOne, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}
	if err = randomize.Struct(seed, songDatabaseTagTwo, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTagOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songDatabaseTagTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func songDatabaseTagBeforeInsertHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagAfterInsertHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagAfterSelectHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagBeforeUpdateHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagAfterUpdateHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagBeforeDeleteHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagAfterDeleteHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagBeforeUpsertHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func songDatabaseTagAfterUpsertHook(e boil.Executor, o *SongDatabaseTag) error {
	*o = SongDatabaseTag{}
	return nil
}

func testSongDatabaseTagsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SongDatabaseTag{}
	o := &SongDatabaseTag{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, songDatabaseTagDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag object: %s", err)
	}

	AddSongDatabaseTagHook(boil.BeforeInsertHook, songDatabaseTagBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagBeforeInsertHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.AfterInsertHook, songDatabaseTagAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagAfterInsertHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.AfterSelectHook, songDatabaseTagAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagAfterSelectHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.BeforeUpdateHook, songDatabaseTagBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagBeforeUpdateHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.AfterUpdateHook, songDatabaseTagAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagAfterUpdateHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.BeforeDeleteHook, songDatabaseTagBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagBeforeDeleteHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.AfterDeleteHook, songDatabaseTagAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagAfterDeleteHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.BeforeUpsertHook, songDatabaseTagBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagBeforeUpsertHooks = []SongDatabaseTagHook{}

	AddSongDatabaseTagHook(boil.AfterUpsertHook, songDatabaseTagAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseTagAfterUpsertHooks = []SongDatabaseTagHook{}
}
func testSongDatabaseTagsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongDatabaseTagsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx, songDatabaseTagColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongDatabaseTagToOneTagUsingTag(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SongDatabaseTag
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.TagID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tag(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SongDatabaseTagSlice{&local}
	if err = local.L.LoadTag(tx, false, (*[]*SongDatabaseTag)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongDatabaseTagToOneSongDatabaseUsingSongDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SongDatabaseTag
	var foreign SongDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SongDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SongDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SongDatabaseTagSlice{&local}
	if err = local.L.LoadSongDatabase(tx, false, (*[]*SongDatabaseTag)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SongDatabase = nil
	if err = local.L.LoadSongDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SongDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongDatabaseTagToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabaseTag
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseTagDBTypes, false, strmangle.SetComplement(songDatabaseTagPrimaryKeyColumns, songDatabaseTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SongDatabaseTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TagID))
		reflect.Indirect(reflect.ValueOf(&a.TagID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TagID != x.ID {
			t.Error("foreign key was wrong value", a.TagID, x.ID)
		}
	}
}
func testSongDatabaseTagToOneSetOpSongDatabaseUsingSongDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabaseTag
	var b, c SongDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseTagDBTypes, false, strmangle.SetComplement(songDatabaseTagPrimaryKeyColumns, songDatabaseTagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SongDatabase{&b, &c} {
		err = a.SetSongDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SongDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SongDatabaseTags[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SongDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.SongDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SongDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.SongDatabaseID, x.ID)
		}
	}
}
func testSongDatabaseTagsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = songDatabaseTag.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSongDatabaseTagsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongDatabaseTagSlice{songDatabaseTag}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSongDatabaseTagsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SongDatabaseTags(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	songDatabaseTagDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `SongDatabaseID`: `bigint`, `TagID`: `bigint`}
	_                      = bytes.MinRead
)

func testSongDatabaseTagsUpdate(t *testing.T) {
	t.Parallel()

	if len(songDatabaseTagColumns) == len(songDatabaseTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	if err = songDatabaseTag.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSongDatabaseTagsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(songDatabaseTagColumns) == len(songDatabaseTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	songDatabaseTag := &SongDatabaseTag{}
	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, songDatabaseTag, songDatabaseTagDBTypes, true, songDatabaseTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(songDatabaseTagColumns, songDatabaseTagPrimaryKeyColumns) {
		fields = songDatabaseTagColumns
	} else {
		fields = strmangle.SetComplement(
			songDatabaseTagColumns,
			songDatabaseTagPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(songDatabaseTag))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SongDatabaseTagSlice{songDatabaseTag}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSongDatabaseTagsUpsert(t *testing.T) {
	t.Parallel()

	if len(songDatabaseTagColumns) == len(songDatabaseTagPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	songDatabaseTag := SongDatabaseTag{}
	if err = randomize.Struct(seed, &songDatabaseTag, songDatabaseTagDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseTag.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SongDatabaseTag: %s", err)
	}

	count, err := SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &songDatabaseTag, songDatabaseTagDBTypes, false, songDatabaseTagPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongDatabaseTag struct: %s", err)
	}

	if err = songDatabaseTag.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SongDatabaseTag: %s", err)
	}

	count, err = SongDatabaseTags(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

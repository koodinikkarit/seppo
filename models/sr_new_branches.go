// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SRNewBranch is an object representing the database table.
type SRNewBranch struct {
	ID       uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	SRID     uint64 `boil:"sr_id" json:"sr_id" toml:"sr_id" yaml:"sr_id"`
	BranchID uint64 `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`

	R *srNewBranchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L srNewBranchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SRNewBranchColumns = struct {
	ID       string
	SRID     string
	BranchID string
}{
	ID:       "id",
	SRID:     "sr_id",
	BranchID: "branch_id",
}

// srNewBranchR is where relationships are stored.
type srNewBranchR struct {
	SR     *SynchronizationRaport
	Branch *Branch
}

// srNewBranchL is where Load methods for each relationship are stored.
type srNewBranchL struct{}

var (
	srNewBranchColumns               = []string{"id", "sr_id", "branch_id"}
	srNewBranchColumnsWithoutDefault = []string{"sr_id", "branch_id"}
	srNewBranchColumnsWithDefault    = []string{"id"}
	srNewBranchPrimaryKeyColumns     = []string{"id"}
)

type (
	// SRNewBranchSlice is an alias for a slice of pointers to SRNewBranch.
	// This should generally be used opposed to []SRNewBranch.
	SRNewBranchSlice []*SRNewBranch
	// SRNewBranchHook is the signature for custom SRNewBranch hook methods
	SRNewBranchHook func(boil.Executor, *SRNewBranch) error

	srNewBranchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	srNewBranchType                 = reflect.TypeOf(&SRNewBranch{})
	srNewBranchMapping              = queries.MakeStructMapping(srNewBranchType)
	srNewBranchPrimaryKeyMapping, _ = queries.BindMapping(srNewBranchType, srNewBranchMapping, srNewBranchPrimaryKeyColumns)
	srNewBranchInsertCacheMut       sync.RWMutex
	srNewBranchInsertCache          = make(map[string]insertCache)
	srNewBranchUpdateCacheMut       sync.RWMutex
	srNewBranchUpdateCache          = make(map[string]updateCache)
	srNewBranchUpsertCacheMut       sync.RWMutex
	srNewBranchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var srNewBranchBeforeInsertHooks []SRNewBranchHook
var srNewBranchBeforeUpdateHooks []SRNewBranchHook
var srNewBranchBeforeDeleteHooks []SRNewBranchHook
var srNewBranchBeforeUpsertHooks []SRNewBranchHook

var srNewBranchAfterInsertHooks []SRNewBranchHook
var srNewBranchAfterSelectHooks []SRNewBranchHook
var srNewBranchAfterUpdateHooks []SRNewBranchHook
var srNewBranchAfterDeleteHooks []SRNewBranchHook
var srNewBranchAfterUpsertHooks []SRNewBranchHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SRNewBranch) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SRNewBranch) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SRNewBranch) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SRNewBranch) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SRNewBranch) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SRNewBranch) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SRNewBranch) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SRNewBranch) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SRNewBranch) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srNewBranchAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSRNewBranchHook registers your hook function for all future operations.
func AddSRNewBranchHook(hookPoint boil.HookPoint, srNewBranchHook SRNewBranchHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		srNewBranchBeforeInsertHooks = append(srNewBranchBeforeInsertHooks, srNewBranchHook)
	case boil.BeforeUpdateHook:
		srNewBranchBeforeUpdateHooks = append(srNewBranchBeforeUpdateHooks, srNewBranchHook)
	case boil.BeforeDeleteHook:
		srNewBranchBeforeDeleteHooks = append(srNewBranchBeforeDeleteHooks, srNewBranchHook)
	case boil.BeforeUpsertHook:
		srNewBranchBeforeUpsertHooks = append(srNewBranchBeforeUpsertHooks, srNewBranchHook)
	case boil.AfterInsertHook:
		srNewBranchAfterInsertHooks = append(srNewBranchAfterInsertHooks, srNewBranchHook)
	case boil.AfterSelectHook:
		srNewBranchAfterSelectHooks = append(srNewBranchAfterSelectHooks, srNewBranchHook)
	case boil.AfterUpdateHook:
		srNewBranchAfterUpdateHooks = append(srNewBranchAfterUpdateHooks, srNewBranchHook)
	case boil.AfterDeleteHook:
		srNewBranchAfterDeleteHooks = append(srNewBranchAfterDeleteHooks, srNewBranchHook)
	case boil.AfterUpsertHook:
		srNewBranchAfterUpsertHooks = append(srNewBranchAfterUpsertHooks, srNewBranchHook)
	}
}

// OneP returns a single srNewBranch record from the query, and panics on error.
func (q srNewBranchQuery) OneP() *SRNewBranch {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single srNewBranch record from the query.
func (q srNewBranchQuery) One() (*SRNewBranch, error) {
	o := &SRNewBranch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sr_new_branches")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SRNewBranch records from the query, and panics on error.
func (q srNewBranchQuery) AllP() SRNewBranchSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SRNewBranch records from the query.
func (q srNewBranchQuery) All() (SRNewBranchSlice, error) {
	var o []*SRNewBranch

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SRNewBranch slice")
	}

	if len(srNewBranchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SRNewBranch records in the query, and panics on error.
func (q srNewBranchQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SRNewBranch records in the query.
func (q srNewBranchQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sr_new_branches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q srNewBranchQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q srNewBranchQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sr_new_branches exists")
	}

	return count > 0, nil
}

// SRG pointed to by the foreign key.
func (o *SRNewBranch) SRG(mods ...qm.QueryMod) synchronizationRaportQuery {
	return o.SR(boil.GetDB(), mods...)
}

// SR pointed to by the foreign key.
func (o *SRNewBranch) SR(exec boil.Executor, mods ...qm.QueryMod) synchronizationRaportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SRID),
	}

	queryMods = append(queryMods, mods...)

	query := SynchronizationRaports(exec, queryMods...)
	queries.SetFrom(query.Query, "`synchronization_raports`")

	return query
}

// BranchG pointed to by the foreign key.
func (o *SRNewBranch) BranchG(mods ...qm.QueryMod) branchQuery {
	return o.Branch(boil.GetDB(), mods...)
}

// Branch pointed to by the foreign key.
func (o *SRNewBranch) Branch(exec boil.Executor, mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	query := Branches(exec, queryMods...)
	queries.SetFrom(query.Query, "`branches`")

	return query
} // LoadSR allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srNewBranchL) LoadSR(e boil.Executor, singular bool, maybeSRNewBranch interface{}) error {
	var slice []*SRNewBranch
	var object *SRNewBranch

	count := 1
	if singular {
		object = maybeSRNewBranch.(*SRNewBranch)
	} else {
		slice = *maybeSRNewBranch.(*[]*SRNewBranch)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srNewBranchR{}
		}
		args[0] = object.SRID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srNewBranchR{}
			}
			args[i] = obj.SRID
		}
	}

	query := fmt.Sprintf(
		"select * from `synchronization_raports` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SynchronizationRaport")
	}
	defer results.Close()

	var resultSlice []*SynchronizationRaport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SynchronizationRaport")
	}

	if len(srNewBranchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SR = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRID == foreign.ID {
				local.R.SR = foreign
				break
			}
		}
	}

	return nil
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srNewBranchL) LoadBranch(e boil.Executor, singular bool, maybeSRNewBranch interface{}) error {
	var slice []*SRNewBranch
	var object *SRNewBranch

	count := 1
	if singular {
		object = maybeSRNewBranch.(*SRNewBranch)
	} else {
		slice = *maybeSRNewBranch.(*[]*SRNewBranch)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srNewBranchR{}
		}
		args[0] = object.BranchID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srNewBranchR{}
			}
			args[i] = obj.BranchID
		}
	}

	query := fmt.Sprintf(
		"select * from `branches` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}
	defer results.Close()

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if len(srNewBranchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Branch = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BranchID == foreign.ID {
				local.R.Branch = foreign
				break
			}
		}
	}

	return nil
}

// SetSRG of the sr_new_branch to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRNewBranches.
// Uses the global database handle.
func (o *SRNewBranch) SetSRG(insert bool, related *SynchronizationRaport) error {
	return o.SetSR(boil.GetDB(), insert, related)
}

// SetSRP of the sr_new_branch to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRNewBranches.
// Panics on error.
func (o *SRNewBranch) SetSRP(exec boil.Executor, insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSRGP of the sr_new_branch to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRNewBranches.
// Uses the global database handle and panics on error.
func (o *SRNewBranch) SetSRGP(insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSR of the sr_new_branch to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRNewBranches.
func (o *SRNewBranch) SetSR(exec boil.Executor, insert bool, related *SynchronizationRaport) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_new_branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
		strmangle.WhereClause("`", "`", 0, srNewBranchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRID = related.ID

	if o.R == nil {
		o.R = &srNewBranchR{
			SR: related,
		}
	} else {
		o.R.SR = related
	}

	if related.R == nil {
		related.R = &synchronizationRaportR{
			SRSRNewBranches: SRNewBranchSlice{o},
		}
	} else {
		related.R.SRSRNewBranches = append(related.R.SRSRNewBranches, o)
	}

	return nil
}

// SetBranchG of the sr_new_branch to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.SRNewBranches.
// Uses the global database handle.
func (o *SRNewBranch) SetBranchG(insert bool, related *Branch) error {
	return o.SetBranch(boil.GetDB(), insert, related)
}

// SetBranchP of the sr_new_branch to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.SRNewBranches.
// Panics on error.
func (o *SRNewBranch) SetBranchP(exec boil.Executor, insert bool, related *Branch) {
	if err := o.SetBranch(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBranchGP of the sr_new_branch to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.SRNewBranches.
// Uses the global database handle and panics on error.
func (o *SRNewBranch) SetBranchGP(insert bool, related *Branch) {
	if err := o.SetBranch(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBranch of the sr_new_branch to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.SRNewBranches.
func (o *SRNewBranch) SetBranch(exec boil.Executor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_new_branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
		strmangle.WhereClause("`", "`", 0, srNewBranchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BranchID = related.ID

	if o.R == nil {
		o.R = &srNewBranchR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			SRNewBranches: SRNewBranchSlice{o},
		}
	} else {
		related.R.SRNewBranches = append(related.R.SRNewBranches, o)
	}

	return nil
}

// SRNewBranchesG retrieves all records.
func SRNewBranchesG(mods ...qm.QueryMod) srNewBranchQuery {
	return SRNewBranches(boil.GetDB(), mods...)
}

// SRNewBranches retrieves all the records using an executor.
func SRNewBranches(exec boil.Executor, mods ...qm.QueryMod) srNewBranchQuery {
	mods = append(mods, qm.From("`sr_new_branches`"))
	return srNewBranchQuery{NewQuery(exec, mods...)}
}

// FindSRNewBranchG retrieves a single record by ID.
func FindSRNewBranchG(id uint64, selectCols ...string) (*SRNewBranch, error) {
	return FindSRNewBranch(boil.GetDB(), id, selectCols...)
}

// FindSRNewBranchGP retrieves a single record by ID, and panics on error.
func FindSRNewBranchGP(id uint64, selectCols ...string) *SRNewBranch {
	retobj, err := FindSRNewBranch(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSRNewBranch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSRNewBranch(exec boil.Executor, id uint64, selectCols ...string) (*SRNewBranch, error) {
	srNewBranchObj := &SRNewBranch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sr_new_branches` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(srNewBranchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sr_new_branches")
	}

	return srNewBranchObj, nil
}

// FindSRNewBranchP retrieves a single record by ID with an executor, and panics on error.
func FindSRNewBranchP(exec boil.Executor, id uint64, selectCols ...string) *SRNewBranch {
	retobj, err := FindSRNewBranch(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SRNewBranch) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SRNewBranch) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SRNewBranch) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SRNewBranch) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_new_branches provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srNewBranchColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	srNewBranchInsertCacheMut.RLock()
	cache, cached := srNewBranchInsertCache[key]
	srNewBranchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			srNewBranchColumns,
			srNewBranchColumnsWithDefault,
			srNewBranchColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(srNewBranchType, srNewBranchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(srNewBranchType, srNewBranchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sr_new_branches` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sr_new_branches` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sr_new_branches` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, srNewBranchPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sr_new_branches")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srNewBranchMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_new_branches")
	}

CacheNoHooks:
	if !cached {
		srNewBranchInsertCacheMut.Lock()
		srNewBranchInsertCache[key] = cache
		srNewBranchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SRNewBranch record. See Update for
// whitelist behavior description.
func (o *SRNewBranch) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SRNewBranch record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SRNewBranch) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SRNewBranch, and panics on error.
// See Update for whitelist behavior description.
func (o *SRNewBranch) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SRNewBranch.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SRNewBranch) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	srNewBranchUpdateCacheMut.RLock()
	cache, cached := srNewBranchUpdateCache[key]
	srNewBranchUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			srNewBranchColumns,
			srNewBranchPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sr_new_branches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sr_new_branches` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, srNewBranchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(srNewBranchType, srNewBranchMapping, append(wl, srNewBranchPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sr_new_branches row")
	}

	if !cached {
		srNewBranchUpdateCacheMut.Lock()
		srNewBranchUpdateCache[key] = cache
		srNewBranchUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q srNewBranchQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q srNewBranchQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sr_new_branches")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SRNewBranchSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SRNewBranchSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SRNewBranchSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SRNewBranchSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srNewBranchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sr_new_branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srNewBranchPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in srNewBranch slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SRNewBranch) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SRNewBranch) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SRNewBranch) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SRNewBranch) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_new_branches provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srNewBranchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	srNewBranchUpsertCacheMut.RLock()
	cache, cached := srNewBranchUpsertCache[key]
	srNewBranchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			srNewBranchColumns,
			srNewBranchColumnsWithDefault,
			srNewBranchColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			srNewBranchColumns,
			srNewBranchPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sr_new_branches, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "sr_new_branches", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sr_new_branches` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(srNewBranchType, srNewBranchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(srNewBranchType, srNewBranchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sr_new_branches")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srNewBranchMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_new_branches")
	}

CacheNoHooks:
	if !cached {
		srNewBranchUpsertCacheMut.Lock()
		srNewBranchUpsertCache[key] = cache
		srNewBranchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SRNewBranch record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SRNewBranch) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SRNewBranch record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SRNewBranch) DeleteG() error {
	if o == nil {
		return errors.New("models: no SRNewBranch provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SRNewBranch record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SRNewBranch) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SRNewBranch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SRNewBranch) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SRNewBranch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), srNewBranchPrimaryKeyMapping)
	sql := "DELETE FROM `sr_new_branches` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sr_new_branches")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q srNewBranchQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q srNewBranchQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no srNewBranchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sr_new_branches")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SRNewBranchSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SRNewBranchSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SRNewBranch slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SRNewBranchSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SRNewBranchSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SRNewBranch slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(srNewBranchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srNewBranchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sr_new_branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srNewBranchPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from srNewBranch slice")
	}

	if len(srNewBranchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SRNewBranch) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SRNewBranch) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SRNewBranch) ReloadG() error {
	if o == nil {
		return errors.New("models: no SRNewBranch provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SRNewBranch) Reload(exec boil.Executor) error {
	ret, err := FindSRNewBranch(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SRNewBranchSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SRNewBranchSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SRNewBranchSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SRNewBranchSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SRNewBranchSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	srNewBranches := SRNewBranchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srNewBranchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sr_new_branches`.* FROM `sr_new_branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srNewBranchPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&srNewBranches)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SRNewBranchSlice")
	}

	*o = srNewBranches

	return nil
}

// SRNewBranchExists checks if the SRNewBranch row exists.
func SRNewBranchExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sr_new_branches` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sr_new_branches exists")
	}

	return exists, nil
}

// SRNewBranchExistsG checks if the SRNewBranch row exists.
func SRNewBranchExistsG(id uint64) (bool, error) {
	return SRNewBranchExists(boil.GetDB(), id)
}

// SRNewBranchExistsGP checks if the SRNewBranch row exists. Panics on error.
func SRNewBranchExistsGP(id uint64) bool {
	e, err := SRNewBranchExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SRNewBranchExistsP checks if the SRNewBranch row exists. Panics on error.
func SRNewBranchExistsP(exec boil.Executor, id uint64) bool {
	e, err := SRNewBranchExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

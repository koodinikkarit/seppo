// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// MatiasClient is an object representing the database table.
type MatiasClient struct {
	ID        uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ClientKey null.String `boil:"client_key" json:"client_key,omitempty" toml:"client_key" yaml:"client_key,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *matiasClientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matiasClientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatiasClientColumns = struct {
	ID        string
	ClientKey string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	ClientKey: "client_key",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// matiasClientR is where relationships are stored.
type matiasClientR struct {
	EwDatabases EwDatabaseSlice
}

// matiasClientL is where Load methods for each relationship are stored.
type matiasClientL struct{}

var (
	matiasClientColumns               = []string{"id", "client_key", "created_at", "updated_at", "deleted_at"}
	matiasClientColumnsWithoutDefault = []string{"client_key", "created_at", "updated_at", "deleted_at"}
	matiasClientColumnsWithDefault    = []string{"id"}
	matiasClientPrimaryKeyColumns     = []string{"id"}
)

type (
	// MatiasClientSlice is an alias for a slice of pointers to MatiasClient.
	// This should generally be used opposed to []MatiasClient.
	MatiasClientSlice []*MatiasClient
	// MatiasClientHook is the signature for custom MatiasClient hook methods
	MatiasClientHook func(boil.Executor, *MatiasClient) error

	matiasClientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matiasClientType                 = reflect.TypeOf(&MatiasClient{})
	matiasClientMapping              = queries.MakeStructMapping(matiasClientType)
	matiasClientPrimaryKeyMapping, _ = queries.BindMapping(matiasClientType, matiasClientMapping, matiasClientPrimaryKeyColumns)
	matiasClientInsertCacheMut       sync.RWMutex
	matiasClientInsertCache          = make(map[string]insertCache)
	matiasClientUpdateCacheMut       sync.RWMutex
	matiasClientUpdateCache          = make(map[string]updateCache)
	matiasClientUpsertCacheMut       sync.RWMutex
	matiasClientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var matiasClientBeforeInsertHooks []MatiasClientHook
var matiasClientBeforeUpdateHooks []MatiasClientHook
var matiasClientBeforeDeleteHooks []MatiasClientHook
var matiasClientBeforeUpsertHooks []MatiasClientHook

var matiasClientAfterInsertHooks []MatiasClientHook
var matiasClientAfterSelectHooks []MatiasClientHook
var matiasClientAfterUpdateHooks []MatiasClientHook
var matiasClientAfterDeleteHooks []MatiasClientHook
var matiasClientAfterUpsertHooks []MatiasClientHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MatiasClient) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MatiasClient) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MatiasClient) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MatiasClient) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MatiasClient) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MatiasClient) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MatiasClient) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MatiasClient) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MatiasClient) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range matiasClientAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMatiasClientHook registers your hook function for all future operations.
func AddMatiasClientHook(hookPoint boil.HookPoint, matiasClientHook MatiasClientHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		matiasClientBeforeInsertHooks = append(matiasClientBeforeInsertHooks, matiasClientHook)
	case boil.BeforeUpdateHook:
		matiasClientBeforeUpdateHooks = append(matiasClientBeforeUpdateHooks, matiasClientHook)
	case boil.BeforeDeleteHook:
		matiasClientBeforeDeleteHooks = append(matiasClientBeforeDeleteHooks, matiasClientHook)
	case boil.BeforeUpsertHook:
		matiasClientBeforeUpsertHooks = append(matiasClientBeforeUpsertHooks, matiasClientHook)
	case boil.AfterInsertHook:
		matiasClientAfterInsertHooks = append(matiasClientAfterInsertHooks, matiasClientHook)
	case boil.AfterSelectHook:
		matiasClientAfterSelectHooks = append(matiasClientAfterSelectHooks, matiasClientHook)
	case boil.AfterUpdateHook:
		matiasClientAfterUpdateHooks = append(matiasClientAfterUpdateHooks, matiasClientHook)
	case boil.AfterDeleteHook:
		matiasClientAfterDeleteHooks = append(matiasClientAfterDeleteHooks, matiasClientHook)
	case boil.AfterUpsertHook:
		matiasClientAfterUpsertHooks = append(matiasClientAfterUpsertHooks, matiasClientHook)
	}
}

// OneP returns a single matiasClient record from the query, and panics on error.
func (q matiasClientQuery) OneP() *MatiasClient {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single matiasClient record from the query.
func (q matiasClientQuery) One() (*MatiasClient, error) {
	o := &MatiasClient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for matias_client")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all MatiasClient records from the query, and panics on error.
func (q matiasClientQuery) AllP() MatiasClientSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all MatiasClient records from the query.
func (q matiasClientQuery) All() (MatiasClientSlice, error) {
	var o []*MatiasClient

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MatiasClient slice")
	}

	if len(matiasClientAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all MatiasClient records in the query, and panics on error.
func (q matiasClientQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all MatiasClient records in the query.
func (q matiasClientQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count matias_client rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q matiasClientQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q matiasClientQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if matias_client exists")
	}

	return count > 0, nil
}

// EwDatabasesG retrieves all the ew_database's ew databases.
func (o *MatiasClient) EwDatabasesG(mods ...qm.QueryMod) ewDatabaseQuery {
	return o.EwDatabases(boil.GetDB(), mods...)
}

// EwDatabases retrieves all the ew_database's ew databases with an executor.
func (o *MatiasClient) EwDatabases(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ew_databases`.`matias_client_id`=?", o.ID),
	)

	query := EwDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_databases`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ew_databases`.*"})
	}

	return query
}

// LoadEwDatabases allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (matiasClientL) LoadEwDatabases(e boil.Executor, singular bool, maybeMatiasClient interface{}) error {
	var slice []*MatiasClient
	var object *MatiasClient

	count := 1
	if singular {
		object = maybeMatiasClient.(*MatiasClient)
	} else {
		slice = *maybeMatiasClient.(*[]*MatiasClient)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &matiasClientR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &matiasClientR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_databases` where `matias_client_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ew_databases")
	}
	defer results.Close()

	var resultSlice []*EwDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ew_databases")
	}

	if len(ewDatabaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EwDatabases = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MatiasClientID.Uint64 {
				local.R.EwDatabases = append(local.R.EwDatabases, foreign)
				break
			}
		}
	}

	return nil
}

// AddEwDatabasesG adds the given related objects to the existing relationships
// of the matias_client, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.MatiasClient appropriately.
// Uses the global database handle.
func (o *MatiasClient) AddEwDatabasesG(insert bool, related ...*EwDatabase) error {
	return o.AddEwDatabases(boil.GetDB(), insert, related...)
}

// AddEwDatabasesP adds the given related objects to the existing relationships
// of the matias_client, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.MatiasClient appropriately.
// Panics on error.
func (o *MatiasClient) AddEwDatabasesP(exec boil.Executor, insert bool, related ...*EwDatabase) {
	if err := o.AddEwDatabases(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabasesGP adds the given related objects to the existing relationships
// of the matias_client, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.MatiasClient appropriately.
// Uses the global database handle and panics on error.
func (o *MatiasClient) AddEwDatabasesGP(insert bool, related ...*EwDatabase) {
	if err := o.AddEwDatabases(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabases adds the given related objects to the existing relationships
// of the matias_client, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.MatiasClient appropriately.
func (o *MatiasClient) AddEwDatabases(exec boil.Executor, insert bool, related ...*EwDatabase) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MatiasClientID.Uint64 = o.ID
			rel.MatiasClientID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ew_databases` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"matias_client_id"}),
				strmangle.WhereClause("`", "`", 0, ewDatabasePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MatiasClientID.Uint64 = o.ID
			rel.MatiasClientID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &matiasClientR{
			EwDatabases: related,
		}
	} else {
		o.R.EwDatabases = append(o.R.EwDatabases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ewDatabaseR{
				MatiasClient: o,
			}
		} else {
			rel.R.MatiasClient = o
		}
	}
	return nil
}

// SetEwDatabasesG removes all previously related items of the
// matias_client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MatiasClient's EwDatabases accordingly.
// Replaces o.R.EwDatabases with related.
// Sets related.R.MatiasClient's EwDatabases accordingly.
// Uses the global database handle.
func (o *MatiasClient) SetEwDatabasesG(insert bool, related ...*EwDatabase) error {
	return o.SetEwDatabases(boil.GetDB(), insert, related...)
}

// SetEwDatabasesP removes all previously related items of the
// matias_client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MatiasClient's EwDatabases accordingly.
// Replaces o.R.EwDatabases with related.
// Sets related.R.MatiasClient's EwDatabases accordingly.
// Panics on error.
func (o *MatiasClient) SetEwDatabasesP(exec boil.Executor, insert bool, related ...*EwDatabase) {
	if err := o.SetEwDatabases(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabasesGP removes all previously related items of the
// matias_client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MatiasClient's EwDatabases accordingly.
// Replaces o.R.EwDatabases with related.
// Sets related.R.MatiasClient's EwDatabases accordingly.
// Uses the global database handle and panics on error.
func (o *MatiasClient) SetEwDatabasesGP(insert bool, related ...*EwDatabase) {
	if err := o.SetEwDatabases(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabases removes all previously related items of the
// matias_client replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MatiasClient's EwDatabases accordingly.
// Replaces o.R.EwDatabases with related.
// Sets related.R.MatiasClient's EwDatabases accordingly.
func (o *MatiasClient) SetEwDatabases(exec boil.Executor, insert bool, related ...*EwDatabase) error {
	query := "update `ew_databases` set `matias_client_id` = null where `matias_client_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EwDatabases {
			rel.MatiasClientID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.MatiasClient = nil
		}

		o.R.EwDatabases = nil
	}
	return o.AddEwDatabases(exec, insert, related...)
}

// RemoveEwDatabasesG relationships from objects passed in.
// Removes related items from R.EwDatabases (uses pointer comparison, removal does not keep order)
// Sets related.R.MatiasClient.
// Uses the global database handle.
func (o *MatiasClient) RemoveEwDatabasesG(related ...*EwDatabase) error {
	return o.RemoveEwDatabases(boil.GetDB(), related...)
}

// RemoveEwDatabasesP relationships from objects passed in.
// Removes related items from R.EwDatabases (uses pointer comparison, removal does not keep order)
// Sets related.R.MatiasClient.
// Panics on error.
func (o *MatiasClient) RemoveEwDatabasesP(exec boil.Executor, related ...*EwDatabase) {
	if err := o.RemoveEwDatabases(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveEwDatabasesGP relationships from objects passed in.
// Removes related items from R.EwDatabases (uses pointer comparison, removal does not keep order)
// Sets related.R.MatiasClient.
// Uses the global database handle and panics on error.
func (o *MatiasClient) RemoveEwDatabasesGP(related ...*EwDatabase) {
	if err := o.RemoveEwDatabases(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveEwDatabases relationships from objects passed in.
// Removes related items from R.EwDatabases (uses pointer comparison, removal does not keep order)
// Sets related.R.MatiasClient.
func (o *MatiasClient) RemoveEwDatabases(exec boil.Executor, related ...*EwDatabase) error {
	var err error
	for _, rel := range related {
		rel.MatiasClientID.Valid = false
		if rel.R != nil {
			rel.R.MatiasClient = nil
		}
		if err = rel.Update(exec, "matias_client_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EwDatabases {
			if rel != ri {
				continue
			}

			ln := len(o.R.EwDatabases)
			if ln > 1 && i < ln-1 {
				o.R.EwDatabases[i] = o.R.EwDatabases[ln-1]
			}
			o.R.EwDatabases = o.R.EwDatabases[:ln-1]
			break
		}
	}

	return nil
}

// MatiasClientsG retrieves all records.
func MatiasClientsG(mods ...qm.QueryMod) matiasClientQuery {
	return MatiasClients(boil.GetDB(), mods...)
}

// MatiasClients retrieves all the records using an executor.
func MatiasClients(exec boil.Executor, mods ...qm.QueryMod) matiasClientQuery {
	mods = append(mods, qm.From("`matias_client`"))
	return matiasClientQuery{NewQuery(exec, mods...)}
}

// FindMatiasClientG retrieves a single record by ID.
func FindMatiasClientG(id uint64, selectCols ...string) (*MatiasClient, error) {
	return FindMatiasClient(boil.GetDB(), id, selectCols...)
}

// FindMatiasClientGP retrieves a single record by ID, and panics on error.
func FindMatiasClientGP(id uint64, selectCols ...string) *MatiasClient {
	retobj, err := FindMatiasClient(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMatiasClient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatiasClient(exec boil.Executor, id uint64, selectCols ...string) (*MatiasClient, error) {
	matiasClientObj := &MatiasClient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `matias_client` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(matiasClientObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from matias_client")
	}

	return matiasClientObj, nil
}

// FindMatiasClientP retrieves a single record by ID with an executor, and panics on error.
func FindMatiasClientP(exec boil.Executor, id uint64, selectCols ...string) *MatiasClient {
	retobj, err := FindMatiasClient(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MatiasClient) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *MatiasClient) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *MatiasClient) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *MatiasClient) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no matias_client provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matiasClientColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	matiasClientInsertCacheMut.RLock()
	cache, cached := matiasClientInsertCache[key]
	matiasClientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			matiasClientColumns,
			matiasClientColumnsWithDefault,
			matiasClientColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(matiasClientType, matiasClientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matiasClientType, matiasClientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `matias_client` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `matias_client` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `matias_client` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, matiasClientPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into matias_client")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == matiasClientMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for matias_client")
	}

CacheNoHooks:
	if !cached {
		matiasClientInsertCacheMut.Lock()
		matiasClientInsertCache[key] = cache
		matiasClientInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single MatiasClient record. See Update for
// whitelist behavior description.
func (o *MatiasClient) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single MatiasClient record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *MatiasClient) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the MatiasClient, and panics on error.
// See Update for whitelist behavior description.
func (o *MatiasClient) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the MatiasClient.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *MatiasClient) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	matiasClientUpdateCacheMut.RLock()
	cache, cached := matiasClientUpdateCache[key]
	matiasClientUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			matiasClientColumns,
			matiasClientPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update matias_client, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `matias_client` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, matiasClientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matiasClientType, matiasClientMapping, append(wl, matiasClientPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update matias_client row")
	}

	if !cached {
		matiasClientUpdateCacheMut.Lock()
		matiasClientUpdateCache[key] = cache
		matiasClientUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q matiasClientQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q matiasClientQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for matias_client")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MatiasClientSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MatiasClientSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MatiasClientSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatiasClientSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matiasClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `matias_client` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, matiasClientPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in matiasClient slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MatiasClient) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *MatiasClient) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *MatiasClient) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *MatiasClient) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no matias_client provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matiasClientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matiasClientUpsertCacheMut.RLock()
	cache, cached := matiasClientUpsertCache[key]
	matiasClientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			matiasClientColumns,
			matiasClientColumnsWithDefault,
			matiasClientColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			matiasClientColumns,
			matiasClientPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert matias_client, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "matias_client", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `matias_client` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(matiasClientType, matiasClientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matiasClientType, matiasClientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for matias_client")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == matiasClientMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for matias_client")
	}

CacheNoHooks:
	if !cached {
		matiasClientUpsertCacheMut.Lock()
		matiasClientUpsertCache[key] = cache
		matiasClientUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single MatiasClient record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *MatiasClient) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single MatiasClient record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MatiasClient) DeleteG() error {
	if o == nil {
		return errors.New("models: no MatiasClient provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single MatiasClient record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *MatiasClient) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single MatiasClient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatiasClient) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no MatiasClient provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matiasClientPrimaryKeyMapping)
	sql := "DELETE FROM `matias_client` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from matias_client")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q matiasClientQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q matiasClientQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no matiasClientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from matias_client")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MatiasClientSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MatiasClientSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no MatiasClient slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MatiasClientSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatiasClientSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no MatiasClient slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(matiasClientBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matiasClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `matias_client` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, matiasClientPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from matiasClient slice")
	}

	if len(matiasClientAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *MatiasClient) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *MatiasClient) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MatiasClient) ReloadG() error {
	if o == nil {
		return errors.New("models: no MatiasClient provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatiasClient) Reload(exec boil.Executor) error {
	ret, err := FindMatiasClient(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MatiasClientSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MatiasClientSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatiasClientSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MatiasClientSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatiasClientSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	matiasClients := MatiasClientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matiasClientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `matias_client`.* FROM `matias_client` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, matiasClientPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&matiasClients)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MatiasClientSlice")
	}

	*o = matiasClients

	return nil
}

// MatiasClientExists checks if the MatiasClient row exists.
func MatiasClientExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `matias_client` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if matias_client exists")
	}

	return exists, nil
}

// MatiasClientExistsG checks if the MatiasClient row exists.
func MatiasClientExistsG(id uint64) (bool, error) {
	return MatiasClientExists(boil.GetDB(), id)
}

// MatiasClientExistsGP checks if the MatiasClient row exists. Panics on error.
func MatiasClientExistsGP(id uint64) bool {
	e, err := MatiasClientExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MatiasClientExistsP checks if the MatiasClient row exists. Panics on error.
func MatiasClientExistsP(exec boil.Executor, id uint64) bool {
	e, err := MatiasClientExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

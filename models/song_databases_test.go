// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSongDatabases(t *testing.T) {
	t.Parallel()

	query := SongDatabases(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSongDatabasesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = songDatabase.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongDatabasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SongDatabases(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongDatabasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongDatabaseSlice{songDatabase}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSongDatabasesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SongDatabaseExists(tx, songDatabase.ID)
	if err != nil {
		t.Errorf("Unable to check if SongDatabase exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SongDatabaseExistsG to return true, but got false.")
	}
}
func testSongDatabasesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	songDatabaseFound, err := FindSongDatabase(tx, songDatabase.ID)
	if err != nil {
		t.Error(err)
	}

	if songDatabaseFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSongDatabasesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SongDatabases(tx).Bind(songDatabase); err != nil {
		t.Error(err)
	}
}

func testSongDatabasesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SongDatabases(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSongDatabasesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabaseOne := &SongDatabase{}
	songDatabaseTwo := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabaseOne, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}
	if err = randomize.Struct(seed, songDatabaseTwo, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songDatabaseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SongDatabases(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSongDatabasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	songDatabaseOne := &SongDatabase{}
	songDatabaseTwo := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabaseOne, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}
	if err = randomize.Struct(seed, songDatabaseTwo, songDatabaseDBTypes, false, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabaseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songDatabaseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func songDatabaseBeforeInsertHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseAfterInsertHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseAfterSelectHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseBeforeUpdateHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseAfterUpdateHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseBeforeDeleteHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseAfterDeleteHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseBeforeUpsertHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func songDatabaseAfterUpsertHook(e boil.Executor, o *SongDatabase) error {
	*o = SongDatabase{}
	return nil
}

func testSongDatabasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SongDatabase{}
	o := &SongDatabase{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, songDatabaseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SongDatabase object: %s", err)
	}

	AddSongDatabaseHook(boil.BeforeInsertHook, songDatabaseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseBeforeInsertHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.AfterInsertHook, songDatabaseAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseAfterInsertHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.AfterSelectHook, songDatabaseAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	songDatabaseAfterSelectHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.BeforeUpdateHook, songDatabaseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	songDatabaseBeforeUpdateHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.AfterUpdateHook, songDatabaseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	songDatabaseAfterUpdateHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.BeforeDeleteHook, songDatabaseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	songDatabaseBeforeDeleteHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.AfterDeleteHook, songDatabaseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	songDatabaseAfterDeleteHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.BeforeUpsertHook, songDatabaseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseBeforeUpsertHooks = []SongDatabaseHook{}

	AddSongDatabaseHook(boil.AfterUpsertHook, songDatabaseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	songDatabaseAfterUpsertHooks = []SongDatabaseHook{}
}
func testSongDatabasesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongDatabasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx, songDatabaseColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongDatabaseToManyEwDatabases(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...)
	randomize.Struct(seed, &c, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...)

	b.SongDatabaseID = a.ID
	c.SongDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	ewDatabase, err := a.EwDatabases(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ewDatabase {
		if v.SongDatabaseID == b.SongDatabaseID {
			bFound = true
		}
		if v.SongDatabaseID == c.SongDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongDatabaseSlice{&a}
	if err = a.L.LoadEwDatabases(tx, false, (*[]*SongDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EwDatabases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EwDatabases = nil
	if err = a.L.LoadEwDatabases(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EwDatabases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ewDatabase)
	}
}

func testSongDatabaseToManySongDatabaseTags(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c SongDatabaseTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...)
	randomize.Struct(seed, &c, songDatabaseTagDBTypes, false, songDatabaseTagColumnsWithDefault...)

	b.SongDatabaseID = a.ID
	c.SongDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	songDatabaseTag, err := a.SongDatabaseTags(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range songDatabaseTag {
		if v.SongDatabaseID == b.SongDatabaseID {
			bFound = true
		}
		if v.SongDatabaseID == c.SongDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongDatabaseSlice{&a}
	if err = a.L.LoadSongDatabaseTags(tx, false, (*[]*SongDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SongDatabaseTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SongDatabaseTags = nil
	if err = a.L.LoadSongDatabaseTags(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SongDatabaseTags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", songDatabaseTag)
	}
}

func testSongDatabaseToManySongDatabaseVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c SongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, songDatabaseVariationDBTypes, false, songDatabaseVariationColumnsWithDefault...)

	b.SongDatabaseID = a.ID
	c.SongDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	songDatabaseVariation, err := a.SongDatabaseVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range songDatabaseVariation {
		if v.SongDatabaseID == b.SongDatabaseID {
			bFound = true
		}
		if v.SongDatabaseID == c.SongDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongDatabaseSlice{&a}
	if err = a.L.LoadSongDatabaseVariations(tx, false, (*[]*SongDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SongDatabaseVariations = nil
	if err = a.L.LoadSongDatabaseVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", songDatabaseVariation)
	}
}

func testSongDatabaseToManySRAddSongDatabaseVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c SRAddSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...)

	b.SongDatabaseID = a.ID
	c.SongDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srAddSongDatabaseVariation, err := a.SRAddSongDatabaseVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srAddSongDatabaseVariation {
		if v.SongDatabaseID == b.SongDatabaseID {
			bFound = true
		}
		if v.SongDatabaseID == c.SongDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongDatabaseSlice{&a}
	if err = a.L.LoadSRAddSongDatabaseVariations(tx, false, (*[]*SongDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRAddSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRAddSongDatabaseVariations = nil
	if err = a.L.LoadSRAddSongDatabaseVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRAddSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srAddSongDatabaseVariation)
	}
}

func testSongDatabaseToManySRRemoveSongDatabaseVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c SRRemoveSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srRemoveSongDatabaseVariationDBTypes, false, srRemoveSongDatabaseVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, srRemoveSongDatabaseVariationDBTypes, false, srRemoveSongDatabaseVariationColumnsWithDefault...)

	b.SongDatabaseID = a.ID
	c.SongDatabaseID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srRemoveSongDatabaseVariation, err := a.SRRemoveSongDatabaseVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srRemoveSongDatabaseVariation {
		if v.SongDatabaseID == b.SongDatabaseID {
			bFound = true
		}
		if v.SongDatabaseID == c.SongDatabaseID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongDatabaseSlice{&a}
	if err = a.L.LoadSRRemoveSongDatabaseVariations(tx, false, (*[]*SongDatabase)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRRemoveSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRRemoveSongDatabaseVariations = nil
	if err = a.L.LoadSRRemoveSongDatabaseVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRRemoveSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srRemoveSongDatabaseVariation)
	}
}

func testSongDatabaseToManyAddOpEwDatabases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c, d, e EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EwDatabase{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EwDatabase{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEwDatabases(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.SongDatabaseID)
		}
		if a.ID != second.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.SongDatabaseID)
		}

		if first.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EwDatabases[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EwDatabases[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EwDatabases(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSongDatabaseToManyAddOpSongDatabaseTags(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c, d, e SongDatabaseTag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SongDatabaseTag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, songDatabaseTagDBTypes, false, strmangle.SetComplement(songDatabaseTagPrimaryKeyColumns, songDatabaseTagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SongDatabaseTag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSongDatabaseTags(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.SongDatabaseID)
		}
		if a.ID != second.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.SongDatabaseID)
		}

		if first.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SongDatabaseTags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SongDatabaseTags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SongDatabaseTags(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSongDatabaseToManyAddOpSongDatabaseVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c, d, e SongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SongDatabaseVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, songDatabaseVariationDBTypes, false, strmangle.SetComplement(songDatabaseVariationPrimaryKeyColumns, songDatabaseVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SongDatabaseVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSongDatabaseVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.SongDatabaseID)
		}
		if a.ID != second.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.SongDatabaseID)
		}

		if first.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SongDatabaseVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SongDatabaseVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SongDatabaseVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSongDatabaseToManyAddOpSRAddSongDatabaseVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c, d, e SRAddSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRAddSongDatabaseVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srAddSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srAddSongDatabaseVariationPrimaryKeyColumns, srAddSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRAddSongDatabaseVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRAddSongDatabaseVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.SongDatabaseID)
		}
		if a.ID != second.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.SongDatabaseID)
		}

		if first.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRAddSongDatabaseVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRAddSongDatabaseVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRAddSongDatabaseVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSongDatabaseToManyAddOpSRRemoveSongDatabaseVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SongDatabase
	var b, c, d, e SRRemoveSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDatabaseDBTypes, false, strmangle.SetComplement(songDatabasePrimaryKeyColumns, songDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRRemoveSongDatabaseVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srRemoveSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srRemoveSongDatabaseVariationPrimaryKeyColumns, srRemoveSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRRemoveSongDatabaseVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRRemoveSongDatabaseVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, first.SongDatabaseID)
		}
		if a.ID != second.SongDatabaseID {
			t.Error("foreign key was wrong value", a.ID, second.SongDatabaseID)
		}

		if first.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SongDatabase != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRRemoveSongDatabaseVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRRemoveSongDatabaseVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRRemoveSongDatabaseVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSongDatabasesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = songDatabase.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSongDatabasesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongDatabaseSlice{songDatabase}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSongDatabasesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SongDatabases(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	songDatabaseDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `Name`: `varchar`, `UpdatedAt`: `datetime`}
	_                   = bytes.MinRead
)

func testSongDatabasesUpdate(t *testing.T) {
	t.Parallel()

	if len(songDatabaseColumns) == len(songDatabasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err = songDatabase.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSongDatabasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(songDatabaseColumns) == len(songDatabasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	songDatabase := &SongDatabase{}
	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, songDatabase, songDatabaseDBTypes, true, songDatabasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(songDatabaseColumns, songDatabasePrimaryKeyColumns) {
		fields = songDatabaseColumns
	} else {
		fields = strmangle.SetComplement(
			songDatabaseColumns,
			songDatabasePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(songDatabase))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SongDatabaseSlice{songDatabase}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSongDatabasesUpsert(t *testing.T) {
	t.Parallel()

	if len(songDatabaseColumns) == len(songDatabasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	songDatabase := SongDatabase{}
	if err = randomize.Struct(seed, &songDatabase, songDatabaseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songDatabase.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SongDatabase: %s", err)
	}

	count, err := SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &songDatabase, songDatabaseDBTypes, false, songDatabasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongDatabase struct: %s", err)
	}

	if err = songDatabase.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SongDatabase: %s", err)
	}

	count, err = SongDatabases(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

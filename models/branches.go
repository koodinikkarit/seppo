// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Branch is an object representing the database table.
type Branch struct {
	ID                            uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	SourceVariationVersionID      uint64    `boil:"source_variation_version_id" json:"source_variation_version_id" toml:"source_variation_version_id" yaml:"source_variation_version_id"`
	DestinationVariationVersionID uint64    `boil:"destination_variation_version_id" json:"destination_variation_version_id" toml:"destination_variation_version_id" yaml:"destination_variation_version_id"`
	CreatedAt                     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *branchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L branchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BranchColumns = struct {
	ID                            string
	SourceVariationVersionID      string
	DestinationVariationVersionID string
	CreatedAt                     string
}{
	ID: "id",
	SourceVariationVersionID:      "source_variation_version_id",
	DestinationVariationVersionID: "destination_variation_version_id",
	CreatedAt:                     "created_at",
}

// branchR is where relationships are stored.
type branchR struct {
	SourceVariationVersion      *VariationVersion
	DestinationVariationVersion *VariationVersion
	SRNewBranches               SRNewBranchSlice
}

// branchL is where Load methods for each relationship are stored.
type branchL struct{}

var (
	branchColumns               = []string{"id", "source_variation_version_id", "destination_variation_version_id", "created_at"}
	branchColumnsWithoutDefault = []string{"source_variation_version_id", "destination_variation_version_id", "created_at"}
	branchColumnsWithDefault    = []string{"id"}
	branchPrimaryKeyColumns     = []string{"id"}
)

type (
	// BranchSlice is an alias for a slice of pointers to Branch.
	// This should generally be used opposed to []Branch.
	BranchSlice []*Branch
	// BranchHook is the signature for custom Branch hook methods
	BranchHook func(boil.Executor, *Branch) error

	branchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	branchType                 = reflect.TypeOf(&Branch{})
	branchMapping              = queries.MakeStructMapping(branchType)
	branchPrimaryKeyMapping, _ = queries.BindMapping(branchType, branchMapping, branchPrimaryKeyColumns)
	branchInsertCacheMut       sync.RWMutex
	branchInsertCache          = make(map[string]insertCache)
	branchUpdateCacheMut       sync.RWMutex
	branchUpdateCache          = make(map[string]updateCache)
	branchUpsertCacheMut       sync.RWMutex
	branchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var branchBeforeInsertHooks []BranchHook
var branchBeforeUpdateHooks []BranchHook
var branchBeforeDeleteHooks []BranchHook
var branchBeforeUpsertHooks []BranchHook

var branchAfterInsertHooks []BranchHook
var branchAfterSelectHooks []BranchHook
var branchAfterUpdateHooks []BranchHook
var branchAfterDeleteHooks []BranchHook
var branchAfterUpsertHooks []BranchHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Branch) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range branchBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Branch) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range branchBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Branch) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range branchBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Branch) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range branchBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Branch) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range branchAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Branch) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range branchAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Branch) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range branchAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Branch) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range branchAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Branch) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range branchAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBranchHook registers your hook function for all future operations.
func AddBranchHook(hookPoint boil.HookPoint, branchHook BranchHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		branchBeforeInsertHooks = append(branchBeforeInsertHooks, branchHook)
	case boil.BeforeUpdateHook:
		branchBeforeUpdateHooks = append(branchBeforeUpdateHooks, branchHook)
	case boil.BeforeDeleteHook:
		branchBeforeDeleteHooks = append(branchBeforeDeleteHooks, branchHook)
	case boil.BeforeUpsertHook:
		branchBeforeUpsertHooks = append(branchBeforeUpsertHooks, branchHook)
	case boil.AfterInsertHook:
		branchAfterInsertHooks = append(branchAfterInsertHooks, branchHook)
	case boil.AfterSelectHook:
		branchAfterSelectHooks = append(branchAfterSelectHooks, branchHook)
	case boil.AfterUpdateHook:
		branchAfterUpdateHooks = append(branchAfterUpdateHooks, branchHook)
	case boil.AfterDeleteHook:
		branchAfterDeleteHooks = append(branchAfterDeleteHooks, branchHook)
	case boil.AfterUpsertHook:
		branchAfterUpsertHooks = append(branchAfterUpsertHooks, branchHook)
	}
}

// OneP returns a single branch record from the query, and panics on error.
func (q branchQuery) OneP() *Branch {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single branch record from the query.
func (q branchQuery) One() (*Branch, error) {
	o := &Branch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for branches")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Branch records from the query, and panics on error.
func (q branchQuery) AllP() BranchSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Branch records from the query.
func (q branchQuery) All() (BranchSlice, error) {
	var o []*Branch

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Branch slice")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Branch records in the query, and panics on error.
func (q branchQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Branch records in the query.
func (q branchQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count branches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q branchQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q branchQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if branches exists")
	}

	return count > 0, nil
}

// SourceVariationVersionG pointed to by the foreign key.
func (o *Branch) SourceVariationVersionG(mods ...qm.QueryMod) variationVersionQuery {
	return o.SourceVariationVersion(boil.GetDB(), mods...)
}

// SourceVariationVersion pointed to by the foreign key.
func (o *Branch) SourceVariationVersion(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SourceVariationVersionID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
}

// DestinationVariationVersionG pointed to by the foreign key.
func (o *Branch) DestinationVariationVersionG(mods ...qm.QueryMod) variationVersionQuery {
	return o.DestinationVariationVersion(boil.GetDB(), mods...)
}

// DestinationVariationVersion pointed to by the foreign key.
func (o *Branch) DestinationVariationVersion(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DestinationVariationVersionID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
}

// SRNewBranchesG retrieves all the sr_new_branch's sr new branches.
func (o *Branch) SRNewBranchesG(mods ...qm.QueryMod) srNewBranchQuery {
	return o.SRNewBranches(boil.GetDB(), mods...)
}

// SRNewBranches retrieves all the sr_new_branch's sr new branches with an executor.
func (o *Branch) SRNewBranches(exec boil.Executor, mods ...qm.QueryMod) srNewBranchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_branches`.`branch_id`=?", o.ID),
	)

	query := SRNewBranches(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_branches`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_branches`.*"})
	}

	return query
}

// LoadSourceVariationVersion allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (branchL) LoadSourceVariationVersion(e boil.Executor, singular bool, maybeBranch interface{}) error {
	var slice []*Branch
	var object *Branch

	count := 1
	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[0] = object.SourceVariationVersionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[i] = obj.SourceVariationVersionID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SourceVariationVersion = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SourceVariationVersionID == foreign.ID {
				local.R.SourceVariationVersion = foreign
				break
			}
		}
	}

	return nil
}

// LoadDestinationVariationVersion allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (branchL) LoadDestinationVariationVersion(e boil.Executor, singular bool, maybeBranch interface{}) error {
	var slice []*Branch
	var object *Branch

	count := 1
	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[0] = object.DestinationVariationVersionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[i] = obj.DestinationVariationVersionID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.DestinationVariationVersion = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationVariationVersionID == foreign.ID {
				local.R.DestinationVariationVersion = foreign
				break
			}
		}
	}

	return nil
}

// LoadSRNewBranches allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (branchL) LoadSRNewBranches(e boil.Executor, singular bool, maybeBranch interface{}) error {
	var slice []*Branch
	var object *Branch

	count := 1
	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_branches` where `branch_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_branches")
	}
	defer results.Close()

	var resultSlice []*SRNewBranch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_branches")
	}

	if len(srNewBranchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRNewBranches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BranchID {
				local.R.SRNewBranches = append(local.R.SRNewBranches, foreign)
				break
			}
		}
	}

	return nil
}

// SetSourceVariationVersionG of the branch to the related item.
// Sets o.R.SourceVariationVersion to related.
// Adds o to related.R.SourceVariationVersionBranches.
// Uses the global database handle.
func (o *Branch) SetSourceVariationVersionG(insert bool, related *VariationVersion) error {
	return o.SetSourceVariationVersion(boil.GetDB(), insert, related)
}

// SetSourceVariationVersionP of the branch to the related item.
// Sets o.R.SourceVariationVersion to related.
// Adds o to related.R.SourceVariationVersionBranches.
// Panics on error.
func (o *Branch) SetSourceVariationVersionP(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetSourceVariationVersion(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSourceVariationVersionGP of the branch to the related item.
// Sets o.R.SourceVariationVersion to related.
// Adds o to related.R.SourceVariationVersionBranches.
// Uses the global database handle and panics on error.
func (o *Branch) SetSourceVariationVersionGP(insert bool, related *VariationVersion) {
	if err := o.SetSourceVariationVersion(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSourceVariationVersion of the branch to the related item.
// Sets o.R.SourceVariationVersion to related.
// Adds o to related.R.SourceVariationVersionBranches.
func (o *Branch) SetSourceVariationVersion(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"source_variation_version_id"}),
		strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SourceVariationVersionID = related.ID

	if o.R == nil {
		o.R = &branchR{
			SourceVariationVersion: related,
		}
	} else {
		o.R.SourceVariationVersion = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			SourceVariationVersionBranches: BranchSlice{o},
		}
	} else {
		related.R.SourceVariationVersionBranches = append(related.R.SourceVariationVersionBranches, o)
	}

	return nil
}

// SetDestinationVariationVersionG of the branch to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionBranches.
// Uses the global database handle.
func (o *Branch) SetDestinationVariationVersionG(insert bool, related *VariationVersion) error {
	return o.SetDestinationVariationVersion(boil.GetDB(), insert, related)
}

// SetDestinationVariationVersionP of the branch to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionBranches.
// Panics on error.
func (o *Branch) SetDestinationVariationVersionP(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetDestinationVariationVersion(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDestinationVariationVersionGP of the branch to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionBranches.
// Uses the global database handle and panics on error.
func (o *Branch) SetDestinationVariationVersionGP(insert bool, related *VariationVersion) {
	if err := o.SetDestinationVariationVersion(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDestinationVariationVersion of the branch to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionBranches.
func (o *Branch) SetDestinationVariationVersion(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"destination_variation_version_id"}),
		strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationVariationVersionID = related.ID

	if o.R == nil {
		o.R = &branchR{
			DestinationVariationVersion: related,
		}
	} else {
		o.R.DestinationVariationVersion = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			DestinationVariationVersionBranches: BranchSlice{o},
		}
	} else {
		related.R.DestinationVariationVersionBranches = append(related.R.DestinationVariationVersionBranches, o)
	}

	return nil
}

// AddSRNewBranchesG adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.SRNewBranches.
// Sets related.R.Branch appropriately.
// Uses the global database handle.
func (o *Branch) AddSRNewBranchesG(insert bool, related ...*SRNewBranch) error {
	return o.AddSRNewBranches(boil.GetDB(), insert, related...)
}

// AddSRNewBranchesP adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.SRNewBranches.
// Sets related.R.Branch appropriately.
// Panics on error.
func (o *Branch) AddSRNewBranchesP(exec boil.Executor, insert bool, related ...*SRNewBranch) {
	if err := o.AddSRNewBranches(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRNewBranchesGP adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.SRNewBranches.
// Sets related.R.Branch appropriately.
// Uses the global database handle and panics on error.
func (o *Branch) AddSRNewBranchesGP(insert bool, related ...*SRNewBranch) {
	if err := o.AddSRNewBranches(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRNewBranches adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.SRNewBranches.
// Sets related.R.Branch appropriately.
func (o *Branch) AddSRNewBranches(exec boil.Executor, insert bool, related ...*SRNewBranch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_branches` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, srNewBranchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			SRNewBranches: related,
		}
	} else {
		o.R.SRNewBranches = append(o.R.SRNewBranches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewBranchR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// BranchesG retrieves all records.
func BranchesG(mods ...qm.QueryMod) branchQuery {
	return Branches(boil.GetDB(), mods...)
}

// Branches retrieves all the records using an executor.
func Branches(exec boil.Executor, mods ...qm.QueryMod) branchQuery {
	mods = append(mods, qm.From("`branches`"))
	return branchQuery{NewQuery(exec, mods...)}
}

// FindBranchG retrieves a single record by ID.
func FindBranchG(id uint64, selectCols ...string) (*Branch, error) {
	return FindBranch(boil.GetDB(), id, selectCols...)
}

// FindBranchGP retrieves a single record by ID, and panics on error.
func FindBranchGP(id uint64, selectCols ...string) *Branch {
	retobj, err := FindBranch(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBranch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBranch(exec boil.Executor, id uint64, selectCols ...string) (*Branch, error) {
	branchObj := &Branch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `branches` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(branchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from branches")
	}

	return branchObj, nil
}

// FindBranchP retrieves a single record by ID with an executor, and panics on error.
func FindBranchP(exec boil.Executor, id uint64, selectCols ...string) *Branch {
	retobj, err := FindBranch(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Branch) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Branch) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Branch) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Branch) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no branches provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	branchInsertCacheMut.RLock()
	cache, cached := branchInsertCache[key]
	branchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			branchColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(branchType, branchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `branches` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `branches` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `branches` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into branches")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == branchMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for branches")
	}

CacheNoHooks:
	if !cached {
		branchInsertCacheMut.Lock()
		branchInsertCache[key] = cache
		branchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Branch record. See Update for
// whitelist behavior description.
func (o *Branch) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Branch record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Branch) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Branch, and panics on error.
// See Update for whitelist behavior description.
func (o *Branch) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Branch.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Branch) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	branchUpdateCacheMut.RLock()
	cache, cached := branchUpdateCache[key]
	branchUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			branchColumns,
			branchPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update branches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `branches` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, append(wl, branchPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update branches row")
	}

	if !cached {
		branchUpdateCacheMut.Lock()
		branchUpdateCache[key] = cache
		branchUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q branchQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q branchQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for branches")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BranchSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BranchSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BranchSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BranchSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in branch slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Branch) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Branch) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Branch) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Branch) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no branches provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	branchUpsertCacheMut.RLock()
	cache, cached := branchUpsertCache[key]
	branchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			branchColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			branchColumns,
			branchPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert branches, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "branches", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `branches` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(branchType, branchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for branches")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == branchMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for branches")
	}

CacheNoHooks:
	if !cached {
		branchUpsertCacheMut.Lock()
		branchUpsertCache[key] = cache
		branchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Branch record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Branch) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Branch record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Branch) DeleteG() error {
	if o == nil {
		return errors.New("models: no Branch provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Branch record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Branch) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Branch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Branch) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Branch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), branchPrimaryKeyMapping)
	sql := "DELETE FROM `branches` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from branches")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q branchQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q branchQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no branchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from branches")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BranchSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BranchSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Branch slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BranchSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BranchSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Branch slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(branchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from branch slice")
	}

	if len(branchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Branch) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Branch) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Branch) ReloadG() error {
	if o == nil {
		return errors.New("models: no Branch provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Branch) Reload(exec boil.Executor) error {
	ret, err := FindBranch(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BranchSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BranchSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BranchSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty BranchSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BranchSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	branches := BranchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `branches`.* FROM `branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&branches)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BranchSlice")
	}

	*o = branches

	return nil
}

// BranchExists checks if the Branch row exists.
func BranchExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `branches` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if branches exists")
	}

	return exists, nil
}

// BranchExistsG checks if the Branch row exists.
func BranchExistsG(id uint64) (bool, error) {
	return BranchExists(boil.GetDB(), id)
}

// BranchExistsGP checks if the Branch row exists. Panics on error.
func BranchExistsGP(id uint64) bool {
	e, err := BranchExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BranchExistsP checks if the Branch row exists. Panics on error.
func BranchExistsP(exec boil.Executor, id uint64) bool {
	e, err := BranchExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSongs(t *testing.T) {
	t.Parallel()

	query := Songs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSongsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = song.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Songs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongSlice{song}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSongsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SongExists(tx, song.ID)
	if err != nil {
		t.Errorf("Unable to check if Song exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SongExistsG to return true, but got false.")
	}
}
func testSongsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	songFound, err := FindSong(tx, song.ID)
	if err != nil {
		t.Error(err)
	}

	if songFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSongsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Songs(tx).Bind(song); err != nil {
		t.Error(err)
	}
}

func testSongsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Songs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSongsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songOne := &Song{}
	songTwo := &Song{}
	if err = randomize.Struct(seed, songOne, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}
	if err = randomize.Struct(seed, songTwo, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Songs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSongsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	songOne := &Song{}
	songTwo := &Song{}
	if err = randomize.Struct(seed, songOne, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}
	if err = randomize.Struct(seed, songTwo, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = songOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = songTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func songBeforeInsertHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterInsertHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterSelectHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songBeforeUpdateHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterUpdateHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songBeforeDeleteHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterDeleteHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songBeforeUpsertHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func songAfterUpsertHook(e boil.Executor, o *Song) error {
	*o = Song{}
	return nil
}

func testSongsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Song{}
	o := &Song{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, songDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Song object: %s", err)
	}

	AddSongHook(boil.BeforeInsertHook, songBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	songBeforeInsertHooks = []SongHook{}

	AddSongHook(boil.AfterInsertHook, songAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	songAfterInsertHooks = []SongHook{}

	AddSongHook(boil.AfterSelectHook, songAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	songAfterSelectHooks = []SongHook{}

	AddSongHook(boil.BeforeUpdateHook, songBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	songBeforeUpdateHooks = []SongHook{}

	AddSongHook(boil.AfterUpdateHook, songAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	songAfterUpdateHooks = []SongHook{}

	AddSongHook(boil.BeforeDeleteHook, songBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	songBeforeDeleteHooks = []SongHook{}

	AddSongHook(boil.AfterDeleteHook, songAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	songAfterDeleteHooks = []SongHook{}

	AddSongHook(boil.BeforeUpsertHook, songBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	songBeforeUpsertHooks = []SongHook{}

	AddSongHook(boil.AfterUpsertHook, songAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	songAfterUpsertHooks = []SongHook{}
}
func testSongsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx, songColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongToManyVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Song
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, variationDBTypes, false, variationColumnsWithDefault...)
	randomize.Struct(seed, &c, variationDBTypes, false, variationColumnsWithDefault...)

	b.SongID.Valid = true
	c.SongID.Valid = true
	b.SongID.Uint64 = a.ID
	c.SongID.Uint64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	variation, err := a.Variations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range variation {
		if v.SongID.Uint64 == b.SongID.Uint64 {
			bFound = true
		}
		if v.SongID.Uint64 == c.SongID.Uint64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SongSlice{&a}
	if err = a.L.LoadVariations(tx, false, (*[]*Song)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Variations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Variations = nil
	if err = a.L.LoadVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Variations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", variation)
	}
}

func testSongToManyAddOpVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Song
	var b, c, d, e Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Variation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Variation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SongID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, first.SongID.Uint64)
		}
		if a.ID != second.SongID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, second.SongID.Uint64)
		}

		if first.R.Song != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Song != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Variations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Variations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Variations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSongToManySetOpVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Song
	var b, c, d, e Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Variation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariations(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariations(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.SongID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.SongID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.SongID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, d.SongID.Uint64)
	}
	if a.ID != e.SongID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, e.SongID.Uint64)
	}

	if b.R.Song != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Song != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Song != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Song != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Variations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Variations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSongToManyRemoveOpVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Song
	var b, c, d, e Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Variation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariations(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariations(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.SongID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.SongID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Song != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Song != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Song != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Song != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Variations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Variations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Variations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSongsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = song.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSongsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SongSlice{song}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSongsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Songs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	songDBTypes = map[string]string{`ID`: `bigint`}
	_           = bytes.MinRead
)

func testSongsUpdate(t *testing.T) {
	t.Parallel()

	if len(songColumns) == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err = song.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSongsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(songColumns) == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	song := &Song{}
	if err = randomize.Struct(seed, song, songDBTypes, true, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, song, songDBTypes, true, songPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(songColumns, songPrimaryKeyColumns) {
		fields = songColumns
	} else {
		fields = strmangle.SetComplement(
			songColumns,
			songPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(song))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SongSlice{song}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSongsUpsert(t *testing.T) {
	t.Parallel()

	if len(songColumns) == len(songPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	song := Song{}
	if err = randomize.Struct(seed, &song, songDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = song.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Song: %s", err)
	}

	count, err := Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &song, songDBTypes, false, songPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err = song.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Song: %s", err)
	}

	count, err = Songs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

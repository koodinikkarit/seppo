// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Variation is an object representing the database table.
type Variation struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SongID          null.Uint64 `boil:"song_id" json:"song_id,omitempty" toml:"song_id" yaml:"song_id,omitempty"`
	LanguageID      null.Uint64 `boil:"language_id" json:"language_id,omitempty" toml:"language_id" yaml:"language_id,omitempty"`
	VariationID     null.Uint64 `boil:"variation_id" json:"variation_id,omitempty" toml:"variation_id" yaml:"variation_id,omitempty"`
	EwSongID        null.Uint64 `boil:"ew_song_id" json:"ew_song_id,omitempty" toml:"ew_song_id" yaml:"ew_song_id,omitempty"`
	JyvaskylaSongID null.Uint64 `boil:"jyvaskyla_song_id" json:"jyvaskyla_song_id,omitempty" toml:"jyvaskyla_song_id" yaml:"jyvaskyla_song_id,omitempty"`
	AuthorID        null.Uint64 `boil:"author_id" json:"author_id,omitempty" toml:"author_id" yaml:"author_id,omitempty"`
	CopyrightID     null.Uint64 `boil:"copyright_id" json:"copyright_id,omitempty" toml:"copyright_id" yaml:"copyright_id,omitempty"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt       null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *variationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L variationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VariationColumns = struct {
	ID              string
	SongID          string
	LanguageID      string
	VariationID     string
	EwSongID        string
	JyvaskylaSongID string
	AuthorID        string
	CopyrightID     string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	ID:              "id",
	SongID:          "song_id",
	LanguageID:      "language_id",
	VariationID:     "variation_id",
	EwSongID:        "ew_song_id",
	JyvaskylaSongID: "jyvaskyla_song_id",
	AuthorID:        "author_id",
	CopyrightID:     "copyright_id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

// variationR is where relationships are stored.
type variationR struct {
	Song                            *Song
	Language                        *Language
	Author                          *Author
	Copyright                       *Copyright
	EwDatabaseLinks                 EwDatabaseLinkSlice
	ScheduleVariations              ScheduleVariationSlice
	SongDatabaseVariations          SongDatabaseVariationSlice
	SRAddSongDatabaseVariations     SRAddSongDatabaseVariationSlice
	SREwDatabaseLinks               SREwDatabaseLinkSlice
	SRNewVariations                 SRNewVariationSlice
	SRRemoveSongDatabaseVariations  SRRemoveSongDatabaseVariationSlice
	SRUpdatedEwDatabaseLinkVersions SRUpdatedEwDatabaseLinkVersionSlice
	TagVariations                   TagVariationSlice
	VariationVersions               VariationVersionSlice
}

// variationL is where Load methods for each relationship are stored.
type variationL struct{}

var (
	variationColumns               = []string{"id", "song_id", "language_id", "variation_id", "ew_song_id", "jyvaskyla_song_id", "author_id", "copyright_id", "created_at", "updated_at", "deleted_at"}
	variationColumnsWithoutDefault = []string{"song_id", "language_id", "variation_id", "ew_song_id", "jyvaskyla_song_id", "author_id", "copyright_id", "created_at", "updated_at", "deleted_at"}
	variationColumnsWithDefault    = []string{"id"}
	variationPrimaryKeyColumns     = []string{"id"}
)

type (
	// VariationSlice is an alias for a slice of pointers to Variation.
	// This should generally be used opposed to []Variation.
	VariationSlice []*Variation
	// VariationHook is the signature for custom Variation hook methods
	VariationHook func(boil.Executor, *Variation) error

	variationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	variationType                 = reflect.TypeOf(&Variation{})
	variationMapping              = queries.MakeStructMapping(variationType)
	variationPrimaryKeyMapping, _ = queries.BindMapping(variationType, variationMapping, variationPrimaryKeyColumns)
	variationInsertCacheMut       sync.RWMutex
	variationInsertCache          = make(map[string]insertCache)
	variationUpdateCacheMut       sync.RWMutex
	variationUpdateCache          = make(map[string]updateCache)
	variationUpsertCacheMut       sync.RWMutex
	variationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var variationBeforeInsertHooks []VariationHook
var variationBeforeUpdateHooks []VariationHook
var variationBeforeDeleteHooks []VariationHook
var variationBeforeUpsertHooks []VariationHook

var variationAfterInsertHooks []VariationHook
var variationAfterSelectHooks []VariationHook
var variationAfterUpdateHooks []VariationHook
var variationAfterDeleteHooks []VariationHook
var variationAfterUpsertHooks []VariationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Variation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Variation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range variationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Variation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range variationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Variation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Variation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Variation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range variationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Variation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range variationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Variation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range variationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Variation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVariationHook registers your hook function for all future operations.
func AddVariationHook(hookPoint boil.HookPoint, variationHook VariationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		variationBeforeInsertHooks = append(variationBeforeInsertHooks, variationHook)
	case boil.BeforeUpdateHook:
		variationBeforeUpdateHooks = append(variationBeforeUpdateHooks, variationHook)
	case boil.BeforeDeleteHook:
		variationBeforeDeleteHooks = append(variationBeforeDeleteHooks, variationHook)
	case boil.BeforeUpsertHook:
		variationBeforeUpsertHooks = append(variationBeforeUpsertHooks, variationHook)
	case boil.AfterInsertHook:
		variationAfterInsertHooks = append(variationAfterInsertHooks, variationHook)
	case boil.AfterSelectHook:
		variationAfterSelectHooks = append(variationAfterSelectHooks, variationHook)
	case boil.AfterUpdateHook:
		variationAfterUpdateHooks = append(variationAfterUpdateHooks, variationHook)
	case boil.AfterDeleteHook:
		variationAfterDeleteHooks = append(variationAfterDeleteHooks, variationHook)
	case boil.AfterUpsertHook:
		variationAfterUpsertHooks = append(variationAfterUpsertHooks, variationHook)
	}
}

// OneP returns a single variation record from the query, and panics on error.
func (q variationQuery) OneP() *Variation {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single variation record from the query.
func (q variationQuery) One() (*Variation, error) {
	o := &Variation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for variations")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Variation records from the query, and panics on error.
func (q variationQuery) AllP() VariationSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Variation records from the query.
func (q variationQuery) All() (VariationSlice, error) {
	var o []*Variation

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Variation slice")
	}

	if len(variationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Variation records in the query, and panics on error.
func (q variationQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Variation records in the query.
func (q variationQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count variations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q variationQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q variationQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if variations exists")
	}

	return count > 0, nil
}

// SongG pointed to by the foreign key.
func (o *Variation) SongG(mods ...qm.QueryMod) songQuery {
	return o.Song(boil.GetDB(), mods...)
}

// Song pointed to by the foreign key.
func (o *Variation) Song(exec boil.Executor, mods ...qm.QueryMod) songQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SongID),
	}

	queryMods = append(queryMods, mods...)

	query := Songs(exec, queryMods...)
	queries.SetFrom(query.Query, "`songs`")

	return query
}

// LanguageG pointed to by the foreign key.
func (o *Variation) LanguageG(mods ...qm.QueryMod) languageQuery {
	return o.Language(boil.GetDB(), mods...)
}

// Language pointed to by the foreign key.
func (o *Variation) Language(exec boil.Executor, mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(exec, queryMods...)
	queries.SetFrom(query.Query, "`languages`")

	return query
}

// AuthorG pointed to by the foreign key.
func (o *Variation) AuthorG(mods ...qm.QueryMod) authorQuery {
	return o.Author(boil.GetDB(), mods...)
}

// Author pointed to by the foreign key.
func (o *Variation) Author(exec boil.Executor, mods ...qm.QueryMod) authorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AuthorID),
	}

	queryMods = append(queryMods, mods...)

	query := Authors(exec, queryMods...)
	queries.SetFrom(query.Query, "`authors`")

	return query
}

// CopyrightG pointed to by the foreign key.
func (o *Variation) CopyrightG(mods ...qm.QueryMod) copyrightQuery {
	return o.Copyright(boil.GetDB(), mods...)
}

// Copyright pointed to by the foreign key.
func (o *Variation) Copyright(exec boil.Executor, mods ...qm.QueryMod) copyrightQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CopyrightID),
	}

	queryMods = append(queryMods, mods...)

	query := Copyrights(exec, queryMods...)
	queries.SetFrom(query.Query, "`copyrights`")

	return query
}

// EwDatabaseLinksG retrieves all the ew_database_link's ew database links.
func (o *Variation) EwDatabaseLinksG(mods ...qm.QueryMod) ewDatabaseLinkQuery {
	return o.EwDatabaseLinks(boil.GetDB(), mods...)
}

// EwDatabaseLinks retrieves all the ew_database_link's ew database links with an executor.
func (o *Variation) EwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ew_database_links`.`variation_id`=?", o.ID),
	)

	query := EwDatabaseLinks(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_database_links`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ew_database_links`.*"})
	}

	return query
}

// ScheduleVariationsG retrieves all the schedule_variation's schedule variations.
func (o *Variation) ScheduleVariationsG(mods ...qm.QueryMod) scheduleVariationQuery {
	return o.ScheduleVariations(boil.GetDB(), mods...)
}

// ScheduleVariations retrieves all the schedule_variation's schedule variations with an executor.
func (o *Variation) ScheduleVariations(exec boil.Executor, mods ...qm.QueryMod) scheduleVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`schedule_variations`.`variation_id`=?", o.ID),
	)

	query := ScheduleVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`schedule_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`schedule_variations`.*"})
	}

	return query
}

// SongDatabaseVariationsG retrieves all the song_database_variation's song database variations.
func (o *Variation) SongDatabaseVariationsG(mods ...qm.QueryMod) songDatabaseVariationQuery {
	return o.SongDatabaseVariations(boil.GetDB(), mods...)
}

// SongDatabaseVariations retrieves all the song_database_variation's song database variations with an executor.
func (o *Variation) SongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) songDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`song_database_variations`.`variation_id`=?", o.ID),
	)

	query := SongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`song_database_variations`.*"})
	}

	return query
}

// SRAddSongDatabaseVariationsG retrieves all the sr_add_song_database_variation's sr add song database variations.
func (o *Variation) SRAddSongDatabaseVariationsG(mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	return o.SRAddSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRAddSongDatabaseVariations retrieves all the sr_add_song_database_variation's sr add song database variations with an executor.
func (o *Variation) SRAddSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_add_song_database_variations`.`variation_id`=?", o.ID),
	)

	query := SRAddSongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_add_song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_add_song_database_variations`.*"})
	}

	return query
}

// SREwDatabaseLinksG retrieves all the sr_ew_database_link's sr ew database links.
func (o *Variation) SREwDatabaseLinksG(mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	return o.SREwDatabaseLinks(boil.GetDB(), mods...)
}

// SREwDatabaseLinks retrieves all the sr_ew_database_link's sr ew database links with an executor.
func (o *Variation) SREwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_database_links`.`variation_id`=?", o.ID),
	)

	query := SREwDatabaseLinks(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_database_links`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_database_links`.*"})
	}

	return query
}

// SRNewVariationsG retrieves all the sr_new_variation's sr new variations.
func (o *Variation) SRNewVariationsG(mods ...qm.QueryMod) srNewVariationQuery {
	return o.SRNewVariations(boil.GetDB(), mods...)
}

// SRNewVariations retrieves all the sr_new_variation's sr new variations with an executor.
func (o *Variation) SRNewVariations(exec boil.Executor, mods ...qm.QueryMod) srNewVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_variations`.`variation_id`=?", o.ID),
	)

	query := SRNewVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_variations`.*"})
	}

	return query
}

// SRRemoveSongDatabaseVariationsG retrieves all the sr_remove_song_database_variation's sr remove song database variations.
func (o *Variation) SRRemoveSongDatabaseVariationsG(mods ...qm.QueryMod) srRemoveSongDatabaseVariationQuery {
	return o.SRRemoveSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRRemoveSongDatabaseVariations retrieves all the sr_remove_song_database_variation's sr remove song database variations with an executor.
func (o *Variation) SRRemoveSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srRemoveSongDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_remove_song_database_variations`.`variation_id`=?", o.ID),
	)

	query := SRRemoveSongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_remove_song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_remove_song_database_variations`.*"})
	}

	return query
}

// SRUpdatedEwDatabaseLinkVersionsG retrieves all the sr_updated_ew_database_link_version's sr updated ew database link versions.
func (o *Variation) SRUpdatedEwDatabaseLinkVersionsG(mods ...qm.QueryMod) srUpdatedEwDatabaseLinkVersionQuery {
	return o.SRUpdatedEwDatabaseLinkVersions(boil.GetDB(), mods...)
}

// SRUpdatedEwDatabaseLinkVersions retrieves all the sr_updated_ew_database_link_version's sr updated ew database link versions with an executor.
func (o *Variation) SRUpdatedEwDatabaseLinkVersions(exec boil.Executor, mods ...qm.QueryMod) srUpdatedEwDatabaseLinkVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_updated_ew_database_link_versions`.`variation_id`=?", o.ID),
	)

	query := SRUpdatedEwDatabaseLinkVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_updated_ew_database_link_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_updated_ew_database_link_versions`.*"})
	}

	return query
}

// TagVariationsG retrieves all the tag_variation's tag variations.
func (o *Variation) TagVariationsG(mods ...qm.QueryMod) tagVariationQuery {
	return o.TagVariations(boil.GetDB(), mods...)
}

// TagVariations retrieves all the tag_variation's tag variations with an executor.
func (o *Variation) TagVariations(exec boil.Executor, mods ...qm.QueryMod) tagVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`tag_variations`.`variation_id`=?", o.ID),
	)

	query := TagVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`tag_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`tag_variations`.*"})
	}

	return query
}

// VariationVersionsG retrieves all the variation_version's variation versions.
func (o *Variation) VariationVersionsG(mods ...qm.QueryMod) variationVersionQuery {
	return o.VariationVersions(boil.GetDB(), mods...)
}

// VariationVersions retrieves all the variation_version's variation versions with an executor.
func (o *Variation) VariationVersions(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`variation_versions`.`variation_id`=?", o.ID),
	)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`variation_versions`.*"})
	}

	return query
}

// LoadSong allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSong(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.SongID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.SongID
		}
	}

	query := fmt.Sprintf(
		"select * from `songs` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Song")
	}
	defer results.Close()

	var resultSlice []*Song
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Song")
	}

	if len(variationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Song = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SongID.Uint64 == foreign.ID {
				local.R.Song = foreign
				break
			}
		}
	}

	return nil
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadLanguage(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.LanguageID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.LanguageID
		}
	}

	query := fmt.Sprintf(
		"select * from `languages` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}
	defer results.Close()

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if len(variationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Language = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID.Uint64 == foreign.ID {
				local.R.Language = foreign
				break
			}
		}
	}

	return nil
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadAuthor(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.AuthorID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.AuthorID
		}
	}

	query := fmt.Sprintf(
		"select * from `authors` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Author")
	}
	defer results.Close()

	var resultSlice []*Author
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Author")
	}

	if len(variationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Author = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuthorID.Uint64 == foreign.ID {
				local.R.Author = foreign
				break
			}
		}
	}

	return nil
}

// LoadCopyright allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadCopyright(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.CopyrightID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.CopyrightID
		}
	}

	query := fmt.Sprintf(
		"select * from `copyrights` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Copyright")
	}
	defer results.Close()

	var resultSlice []*Copyright
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Copyright")
	}

	if len(variationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Copyright = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CopyrightID.Uint64 == foreign.ID {
				local.R.Copyright = foreign
				break
			}
		}
	}

	return nil
}

// LoadEwDatabaseLinks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadEwDatabaseLinks(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_database_links` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ew_database_links")
	}
	defer results.Close()

	var resultSlice []*EwDatabaseLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ew_database_links")
	}

	if len(ewDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EwDatabaseLinks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.EwDatabaseLinks = append(local.R.EwDatabaseLinks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadScheduleVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadScheduleVariations(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `schedule_variations` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load schedule_variations")
	}
	defer results.Close()

	var resultSlice []*ScheduleVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice schedule_variations")
	}

	if len(scheduleVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScheduleVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.ScheduleVariations = append(local.R.ScheduleVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSongDatabaseVariations(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `song_database_variations` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice song_database_variations")
	}

	if len(songDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.SongDatabaseVariations = append(local.R.SongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRAddSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSRAddSongDatabaseVariations(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_add_song_database_variations` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_add_song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SRAddSongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_add_song_database_variations")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRAddSongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.SRAddSongDatabaseVariations = append(local.R.SRAddSongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSREwDatabaseLinks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSREwDatabaseLinks(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_database_links` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_database_links")
	}
	defer results.Close()

	var resultSlice []*SREwDatabaseLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_database_links")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SREwDatabaseLinks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.SREwDatabaseLinks = append(local.R.SREwDatabaseLinks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRNewVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSRNewVariations(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_variations` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_variations")
	}
	defer results.Close()

	var resultSlice []*SRNewVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_variations")
	}

	if len(srNewVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRNewVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.SRNewVariations = append(local.R.SRNewVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRRemoveSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSRRemoveSongDatabaseVariations(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_remove_song_database_variations` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_remove_song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SRRemoveSongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_remove_song_database_variations")
	}

	if len(srRemoveSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRRemoveSongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.SRRemoveSongDatabaseVariations = append(local.R.SRRemoveSongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRUpdatedEwDatabaseLinkVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadSRUpdatedEwDatabaseLinkVersions(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_updated_ew_database_link_versions` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_updated_ew_database_link_versions")
	}
	defer results.Close()

	var resultSlice []*SRUpdatedEwDatabaseLinkVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_updated_ew_database_link_versions")
	}

	if len(srUpdatedEwDatabaseLinkVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRUpdatedEwDatabaseLinkVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.SRUpdatedEwDatabaseLinkVersions = append(local.R.SRUpdatedEwDatabaseLinkVersions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTagVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadTagVariations(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `tag_variations` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag_variations")
	}
	defer results.Close()

	var resultSlice []*TagVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tag_variations")
	}

	if len(tagVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TagVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.TagVariations = append(local.R.TagVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVariationVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationL) LoadVariationVersions(e boil.Executor, singular bool, maybeVariation interface{}) error {
	var slice []*Variation
	var object *Variation

	count := 1
	if singular {
		object = maybeVariation.(*Variation)
	} else {
		slice = *maybeVariation.(*[]*Variation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `variation_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load variation_versions")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice variation_versions")
	}

	if len(variationVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariationVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationID {
				local.R.VariationVersions = append(local.R.VariationVersions, foreign)
				break
			}
		}
	}

	return nil
}

// SetSongG of the variation to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.Variations.
// Uses the global database handle.
func (o *Variation) SetSongG(insert bool, related *Song) error {
	return o.SetSong(boil.GetDB(), insert, related)
}

// SetSongP of the variation to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.Variations.
// Panics on error.
func (o *Variation) SetSongP(exec boil.Executor, insert bool, related *Song) {
	if err := o.SetSong(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongGP of the variation to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.Variations.
// Uses the global database handle and panics on error.
func (o *Variation) SetSongGP(insert bool, related *Song) {
	if err := o.SetSong(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSong of the variation to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.Variations.
func (o *Variation) SetSong(exec boil.Executor, insert bool, related *Song) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"song_id"}),
		strmangle.WhereClause("`", "`", 0, variationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SongID.Uint64 = related.ID
	o.SongID.Valid = true

	if o.R == nil {
		o.R = &variationR{
			Song: related,
		}
	} else {
		o.R.Song = related
	}

	if related.R == nil {
		related.R = &songR{
			Variations: VariationSlice{o},
		}
	} else {
		related.R.Variations = append(related.R.Variations, o)
	}

	return nil
}

// RemoveSongG relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Variation) RemoveSongG(related *Song) error {
	return o.RemoveSong(boil.GetDB(), related)
}

// RemoveSongP relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Variation) RemoveSongP(exec boil.Executor, related *Song) {
	if err := o.RemoveSong(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveSongGP relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Variation) RemoveSongGP(related *Song) {
	if err := o.RemoveSong(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveSong relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Variation) RemoveSong(exec boil.Executor, related *Song) error {
	var err error

	o.SongID.Valid = false
	if err = o.Update(exec, "song_id"); err != nil {
		o.SongID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Song = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Variations {
		if o.SongID.Uint64 != ri.SongID.Uint64 {
			continue
		}

		ln := len(related.R.Variations)
		if ln > 1 && i < ln-1 {
			related.R.Variations[i] = related.R.Variations[ln-1]
		}
		related.R.Variations = related.R.Variations[:ln-1]
		break
	}
	return nil
}

// SetLanguageG of the variation to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Variations.
// Uses the global database handle.
func (o *Variation) SetLanguageG(insert bool, related *Language) error {
	return o.SetLanguage(boil.GetDB(), insert, related)
}

// SetLanguageP of the variation to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Variations.
// Panics on error.
func (o *Variation) SetLanguageP(exec boil.Executor, insert bool, related *Language) {
	if err := o.SetLanguage(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLanguageGP of the variation to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Variations.
// Uses the global database handle and panics on error.
func (o *Variation) SetLanguageGP(insert bool, related *Language) {
	if err := o.SetLanguage(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLanguage of the variation to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Variations.
func (o *Variation) SetLanguage(exec boil.Executor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"language_id"}),
		strmangle.WhereClause("`", "`", 0, variationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID.Uint64 = related.ID
	o.LanguageID.Valid = true

	if o.R == nil {
		o.R = &variationR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			Variations: VariationSlice{o},
		}
	} else {
		related.R.Variations = append(related.R.Variations, o)
	}

	return nil
}

// RemoveLanguageG relationship.
// Sets o.R.Language to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Variation) RemoveLanguageG(related *Language) error {
	return o.RemoveLanguage(boil.GetDB(), related)
}

// RemoveLanguageP relationship.
// Sets o.R.Language to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Variation) RemoveLanguageP(exec boil.Executor, related *Language) {
	if err := o.RemoveLanguage(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveLanguageGP relationship.
// Sets o.R.Language to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Variation) RemoveLanguageGP(related *Language) {
	if err := o.RemoveLanguage(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveLanguage relationship.
// Sets o.R.Language to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Variation) RemoveLanguage(exec boil.Executor, related *Language) error {
	var err error

	o.LanguageID.Valid = false
	if err = o.Update(exec, "language_id"); err != nil {
		o.LanguageID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Language = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Variations {
		if o.LanguageID.Uint64 != ri.LanguageID.Uint64 {
			continue
		}

		ln := len(related.R.Variations)
		if ln > 1 && i < ln-1 {
			related.R.Variations[i] = related.R.Variations[ln-1]
		}
		related.R.Variations = related.R.Variations[:ln-1]
		break
	}
	return nil
}

// SetAuthorG of the variation to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Variations.
// Uses the global database handle.
func (o *Variation) SetAuthorG(insert bool, related *Author) error {
	return o.SetAuthor(boil.GetDB(), insert, related)
}

// SetAuthorP of the variation to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Variations.
// Panics on error.
func (o *Variation) SetAuthorP(exec boil.Executor, insert bool, related *Author) {
	if err := o.SetAuthor(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAuthorGP of the variation to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Variations.
// Uses the global database handle and panics on error.
func (o *Variation) SetAuthorGP(insert bool, related *Author) {
	if err := o.SetAuthor(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAuthor of the variation to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.Variations.
func (o *Variation) SetAuthor(exec boil.Executor, insert bool, related *Author) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"author_id"}),
		strmangle.WhereClause("`", "`", 0, variationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuthorID.Uint64 = related.ID
	o.AuthorID.Valid = true

	if o.R == nil {
		o.R = &variationR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &authorR{
			Variations: VariationSlice{o},
		}
	} else {
		related.R.Variations = append(related.R.Variations, o)
	}

	return nil
}

// RemoveAuthorG relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Variation) RemoveAuthorG(related *Author) error {
	return o.RemoveAuthor(boil.GetDB(), related)
}

// RemoveAuthorP relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Variation) RemoveAuthorP(exec boil.Executor, related *Author) {
	if err := o.RemoveAuthor(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAuthorGP relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Variation) RemoveAuthorGP(related *Author) {
	if err := o.RemoveAuthor(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAuthor relationship.
// Sets o.R.Author to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Variation) RemoveAuthor(exec boil.Executor, related *Author) error {
	var err error

	o.AuthorID.Valid = false
	if err = o.Update(exec, "author_id"); err != nil {
		o.AuthorID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Author = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Variations {
		if o.AuthorID.Uint64 != ri.AuthorID.Uint64 {
			continue
		}

		ln := len(related.R.Variations)
		if ln > 1 && i < ln-1 {
			related.R.Variations[i] = related.R.Variations[ln-1]
		}
		related.R.Variations = related.R.Variations[:ln-1]
		break
	}
	return nil
}

// SetCopyrightG of the variation to the related item.
// Sets o.R.Copyright to related.
// Adds o to related.R.Variations.
// Uses the global database handle.
func (o *Variation) SetCopyrightG(insert bool, related *Copyright) error {
	return o.SetCopyright(boil.GetDB(), insert, related)
}

// SetCopyrightP of the variation to the related item.
// Sets o.R.Copyright to related.
// Adds o to related.R.Variations.
// Panics on error.
func (o *Variation) SetCopyrightP(exec boil.Executor, insert bool, related *Copyright) {
	if err := o.SetCopyright(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCopyrightGP of the variation to the related item.
// Sets o.R.Copyright to related.
// Adds o to related.R.Variations.
// Uses the global database handle and panics on error.
func (o *Variation) SetCopyrightGP(insert bool, related *Copyright) {
	if err := o.SetCopyright(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCopyright of the variation to the related item.
// Sets o.R.Copyright to related.
// Adds o to related.R.Variations.
func (o *Variation) SetCopyright(exec boil.Executor, insert bool, related *Copyright) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"copyright_id"}),
		strmangle.WhereClause("`", "`", 0, variationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CopyrightID.Uint64 = related.ID
	o.CopyrightID.Valid = true

	if o.R == nil {
		o.R = &variationR{
			Copyright: related,
		}
	} else {
		o.R.Copyright = related
	}

	if related.R == nil {
		related.R = &copyrightR{
			Variations: VariationSlice{o},
		}
	} else {
		related.R.Variations = append(related.R.Variations, o)
	}

	return nil
}

// RemoveCopyrightG relationship.
// Sets o.R.Copyright to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Variation) RemoveCopyrightG(related *Copyright) error {
	return o.RemoveCopyright(boil.GetDB(), related)
}

// RemoveCopyrightP relationship.
// Sets o.R.Copyright to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Variation) RemoveCopyrightP(exec boil.Executor, related *Copyright) {
	if err := o.RemoveCopyright(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCopyrightGP relationship.
// Sets o.R.Copyright to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Variation) RemoveCopyrightGP(related *Copyright) {
	if err := o.RemoveCopyright(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCopyright relationship.
// Sets o.R.Copyright to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Variation) RemoveCopyright(exec boil.Executor, related *Copyright) error {
	var err error

	o.CopyrightID.Valid = false
	if err = o.Update(exec, "copyright_id"); err != nil {
		o.CopyrightID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Copyright = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Variations {
		if o.CopyrightID.Uint64 != ri.CopyrightID.Uint64 {
			continue
		}

		ln := len(related.R.Variations)
		if ln > 1 && i < ln-1 {
			related.R.Variations[i] = related.R.Variations[ln-1]
		}
		related.R.Variations = related.R.Variations[:ln-1]
		break
	}
	return nil
}

// AddEwDatabaseLinksG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddEwDatabaseLinksG(insert bool, related ...*EwDatabaseLink) error {
	return o.AddEwDatabaseLinks(boil.GetDB(), insert, related...)
}

// AddEwDatabaseLinksP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddEwDatabaseLinksP(exec boil.Executor, insert bool, related ...*EwDatabaseLink) {
	if err := o.AddEwDatabaseLinks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabaseLinksGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddEwDatabaseLinksGP(insert bool, related ...*EwDatabaseLink) {
	if err := o.AddEwDatabaseLinks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabaseLinks adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.Variation appropriately.
func (o *Variation) AddEwDatabaseLinks(exec boil.Executor, insert bool, related ...*EwDatabaseLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ew_database_links` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, ewDatabaseLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			EwDatabaseLinks: related,
		}
	} else {
		o.R.EwDatabaseLinks = append(o.R.EwDatabaseLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ewDatabaseLinkR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddScheduleVariationsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddScheduleVariationsG(insert bool, related ...*ScheduleVariation) error {
	return o.AddScheduleVariations(boil.GetDB(), insert, related...)
}

// AddScheduleVariationsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddScheduleVariationsP(exec boil.Executor, insert bool, related ...*ScheduleVariation) {
	if err := o.AddScheduleVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddScheduleVariationsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddScheduleVariationsGP(insert bool, related ...*ScheduleVariation) {
	if err := o.AddScheduleVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddScheduleVariations adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Variation appropriately.
func (o *Variation) AddScheduleVariations(exec boil.Executor, insert bool, related ...*ScheduleVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `schedule_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, scheduleVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			ScheduleVariations: related,
		}
	} else {
		o.R.ScheduleVariations = append(o.R.ScheduleVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scheduleVariationR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddSongDatabaseVariationsG(insert bool, related ...*SongDatabaseVariation) error {
	return o.AddSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SongDatabaseVariation) {
	if err := o.AddSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddSongDatabaseVariationsGP(insert bool, related ...*SongDatabaseVariation) {
	if err := o.AddSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSongDatabaseVariations adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.Variation appropriately.
func (o *Variation) AddSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, songDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			SongDatabaseVariations: related,
		}
	} else {
		o.R.SongDatabaseVariations = append(o.R.SongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &songDatabaseVariationR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddSRAddSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddSRAddSongDatabaseVariationsG(insert bool, related ...*SRAddSongDatabaseVariation) error {
	return o.AddSRAddSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSRAddSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddSRAddSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SRAddSongDatabaseVariation) {
	if err := o.AddSRAddSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRAddSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddSRAddSongDatabaseVariationsGP(insert bool, related ...*SRAddSongDatabaseVariation) {
	if err := o.AddSRAddSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRAddSongDatabaseVariations adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.Variation appropriately.
func (o *Variation) AddSRAddSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SRAddSongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			SRAddSongDatabaseVariations: related,
		}
	} else {
		o.R.SRAddSongDatabaseVariations = append(o.R.SRAddSongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srAddSongDatabaseVariationR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddSREwDatabaseLinksG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddSREwDatabaseLinksG(insert bool, related ...*SREwDatabaseLink) error {
	return o.AddSREwDatabaseLinks(boil.GetDB(), insert, related...)
}

// AddSREwDatabaseLinksP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddSREwDatabaseLinksP(exec boil.Executor, insert bool, related ...*SREwDatabaseLink) {
	if err := o.AddSREwDatabaseLinks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwDatabaseLinksGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddSREwDatabaseLinksGP(insert bool, related ...*SREwDatabaseLink) {
	if err := o.AddSREwDatabaseLinks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwDatabaseLinks adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.Variation appropriately.
func (o *Variation) AddSREwDatabaseLinks(exec boil.Executor, insert bool, related ...*SREwDatabaseLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_database_links` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			SREwDatabaseLinks: related,
		}
	} else {
		o.R.SREwDatabaseLinks = append(o.R.SREwDatabaseLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwDatabaseLinkR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddSRNewVariationsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRNewVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddSRNewVariationsG(insert bool, related ...*SRNewVariation) error {
	return o.AddSRNewVariations(boil.GetDB(), insert, related...)
}

// AddSRNewVariationsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRNewVariations.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddSRNewVariationsP(exec boil.Executor, insert bool, related ...*SRNewVariation) {
	if err := o.AddSRNewVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRNewVariationsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRNewVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddSRNewVariationsGP(insert bool, related ...*SRNewVariation) {
	if err := o.AddSRNewVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRNewVariations adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRNewVariations.
// Sets related.R.Variation appropriately.
func (o *Variation) AddSRNewVariations(exec boil.Executor, insert bool, related ...*SRNewVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, srNewVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			SRNewVariations: related,
		}
	} else {
		o.R.SRNewVariations = append(o.R.SRNewVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewVariationR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddSRRemoveSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddSRRemoveSongDatabaseVariationsG(insert bool, related ...*SRRemoveSongDatabaseVariation) error {
	return o.AddSRRemoveSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSRRemoveSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddSRRemoveSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SRRemoveSongDatabaseVariation) {
	if err := o.AddSRRemoveSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRRemoveSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddSRRemoveSongDatabaseVariationsGP(insert bool, related ...*SRRemoveSongDatabaseVariation) {
	if err := o.AddSRRemoveSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRRemoveSongDatabaseVariations adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.Variation appropriately.
func (o *Variation) AddSRRemoveSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SRRemoveSongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_remove_song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, srRemoveSongDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			SRRemoveSongDatabaseVariations: related,
		}
	} else {
		o.R.SRRemoveSongDatabaseVariations = append(o.R.SRRemoveSongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srRemoveSongDatabaseVariationR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddSRUpdatedEwDatabaseLinkVersionsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRUpdatedEwDatabaseLinkVersions.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddSRUpdatedEwDatabaseLinkVersionsG(insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) error {
	return o.AddSRUpdatedEwDatabaseLinkVersions(boil.GetDB(), insert, related...)
}

// AddSRUpdatedEwDatabaseLinkVersionsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRUpdatedEwDatabaseLinkVersions.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddSRUpdatedEwDatabaseLinkVersionsP(exec boil.Executor, insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) {
	if err := o.AddSRUpdatedEwDatabaseLinkVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRUpdatedEwDatabaseLinkVersionsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRUpdatedEwDatabaseLinkVersions.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddSRUpdatedEwDatabaseLinkVersionsGP(insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) {
	if err := o.AddSRUpdatedEwDatabaseLinkVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRUpdatedEwDatabaseLinkVersions adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.SRUpdatedEwDatabaseLinkVersions.
// Sets related.R.Variation appropriately.
func (o *Variation) AddSRUpdatedEwDatabaseLinkVersions(exec boil.Executor, insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_updated_ew_database_link_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			SRUpdatedEwDatabaseLinkVersions: related,
		}
	} else {
		o.R.SRUpdatedEwDatabaseLinkVersions = append(o.R.SRUpdatedEwDatabaseLinkVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srUpdatedEwDatabaseLinkVersionR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddTagVariationsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.TagVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddTagVariationsG(insert bool, related ...*TagVariation) error {
	return o.AddTagVariations(boil.GetDB(), insert, related...)
}

// AddTagVariationsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.TagVariations.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddTagVariationsP(exec boil.Executor, insert bool, related ...*TagVariation) {
	if err := o.AddTagVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagVariationsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.TagVariations.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddTagVariationsGP(insert bool, related ...*TagVariation) {
	if err := o.AddTagVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagVariations adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.TagVariations.
// Sets related.R.Variation appropriately.
func (o *Variation) AddTagVariations(exec boil.Executor, insert bool, related ...*TagVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `tag_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, tagVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			TagVariations: related,
		}
	} else {
		o.R.TagVariations = append(o.R.TagVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagVariationR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// AddVariationVersionsG adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.VariationVersions.
// Sets related.R.Variation appropriately.
// Uses the global database handle.
func (o *Variation) AddVariationVersionsG(insert bool, related ...*VariationVersion) error {
	return o.AddVariationVersions(boil.GetDB(), insert, related...)
}

// AddVariationVersionsP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.VariationVersions.
// Sets related.R.Variation appropriately.
// Panics on error.
func (o *Variation) AddVariationVersionsP(exec boil.Executor, insert bool, related ...*VariationVersion) {
	if err := o.AddVariationVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVariationVersionsGP adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.VariationVersions.
// Sets related.R.Variation appropriately.
// Uses the global database handle and panics on error.
func (o *Variation) AddVariationVersionsGP(insert bool, related ...*VariationVersion) {
	if err := o.AddVariationVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVariationVersions adds the given related objects to the existing relationships
// of the variation, optionally inserting them as new records.
// Appends related to o.R.VariationVersions.
// Sets related.R.Variation appropriately.
func (o *Variation) AddVariationVersions(exec boil.Executor, insert bool, related ...*VariationVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `variation_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
				strmangle.WhereClause("`", "`", 0, variationVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationR{
			VariationVersions: related,
		}
	} else {
		o.R.VariationVersions = append(o.R.VariationVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &variationVersionR{
				Variation: o,
			}
		} else {
			rel.R.Variation = o
		}
	}
	return nil
}

// VariationsG retrieves all records.
func VariationsG(mods ...qm.QueryMod) variationQuery {
	return Variations(boil.GetDB(), mods...)
}

// Variations retrieves all the records using an executor.
func Variations(exec boil.Executor, mods ...qm.QueryMod) variationQuery {
	mods = append(mods, qm.From("`variations`"))
	return variationQuery{NewQuery(exec, mods...)}
}

// FindVariationG retrieves a single record by ID.
func FindVariationG(id uint64, selectCols ...string) (*Variation, error) {
	return FindVariation(boil.GetDB(), id, selectCols...)
}

// FindVariationGP retrieves a single record by ID, and panics on error.
func FindVariationGP(id uint64, selectCols ...string) *Variation {
	retobj, err := FindVariation(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindVariation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVariation(exec boil.Executor, id uint64, selectCols ...string) (*Variation, error) {
	variationObj := &Variation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `variations` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(variationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from variations")
	}

	return variationObj, nil
}

// FindVariationP retrieves a single record by ID with an executor, and panics on error.
func FindVariationP(exec boil.Executor, id uint64, selectCols ...string) *Variation {
	retobj, err := FindVariation(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Variation) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Variation) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Variation) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Variation) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no variations provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variationColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	variationInsertCacheMut.RLock()
	cache, cached := variationInsertCache[key]
	variationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			variationColumns,
			variationColumnsWithDefault,
			variationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(variationType, variationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(variationType, variationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `variations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `variations` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `variations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, variationPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into variations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == variationMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for variations")
	}

CacheNoHooks:
	if !cached {
		variationInsertCacheMut.Lock()
		variationInsertCache[key] = cache
		variationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Variation record. See Update for
// whitelist behavior description.
func (o *Variation) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Variation record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Variation) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Variation, and panics on error.
// See Update for whitelist behavior description.
func (o *Variation) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Variation.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Variation) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	variationUpdateCacheMut.RLock()
	cache, cached := variationUpdateCache[key]
	variationUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			variationColumns,
			variationPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update variations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `variations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, variationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(variationType, variationMapping, append(wl, variationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update variations row")
	}

	if !cached {
		variationUpdateCacheMut.Lock()
		variationUpdateCache[key] = cache
		variationUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q variationQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q variationQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for variations")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o VariationSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o VariationSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o VariationSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VariationSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in variation slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Variation) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Variation) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Variation) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Variation) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no variations provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	variationUpsertCacheMut.RLock()
	cache, cached := variationUpsertCache[key]
	variationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			variationColumns,
			variationColumnsWithDefault,
			variationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			variationColumns,
			variationPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert variations, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "variations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `variations` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(variationType, variationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(variationType, variationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for variations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == variationMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for variations")
	}

CacheNoHooks:
	if !cached {
		variationUpsertCacheMut.Lock()
		variationUpsertCache[key] = cache
		variationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Variation record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Variation) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Variation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Variation) DeleteG() error {
	if o == nil {
		return errors.New("models: no Variation provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Variation record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Variation) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Variation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Variation) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Variation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), variationPrimaryKeyMapping)
	sql := "DELETE FROM `variations` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from variations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q variationQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q variationQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no variationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from variations")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o VariationSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o VariationSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Variation slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o VariationSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VariationSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Variation slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(variationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `variations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from variation slice")
	}

	if len(variationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Variation) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Variation) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Variation) ReloadG() error {
	if o == nil {
		return errors.New("models: no Variation provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Variation) Reload(exec boil.Executor) error {
	ret, err := FindVariation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *VariationSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *VariationSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty VariationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	variations := VariationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `variations`.* FROM `variations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variationPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&variations)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VariationSlice")
	}

	*o = variations

	return nil
}

// VariationExists checks if the Variation row exists.
func VariationExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `variations` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if variations exists")
	}

	return exists, nil
}

// VariationExistsG checks if the Variation row exists.
func VariationExistsG(id uint64) (bool, error) {
	return VariationExists(boil.GetDB(), id)
}

// VariationExistsGP checks if the Variation row exists. Panics on error.
func VariationExistsGP(id uint64) bool {
	e, err := VariationExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// VariationExistsP checks if the Variation row exists. Panics on error.
func VariationExistsP(exec boil.Executor, id uint64) bool {
	e, err := VariationExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

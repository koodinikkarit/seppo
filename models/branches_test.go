// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testBranches(t *testing.T) {
	t.Parallel()

	query := Branches(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testBranchesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = branch.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBranchesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Branches(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBranchesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BranchSlice{branch}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testBranchesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := BranchExists(tx, branch.ID)
	if err != nil {
		t.Errorf("Unable to check if Branch exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BranchExistsG to return true, but got false.")
	}
}
func testBranchesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	branchFound, err := FindBranch(tx, branch.ID)
	if err != nil {
		t.Error(err)
	}

	if branchFound == nil {
		t.Error("want a record, got nil")
	}
}
func testBranchesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Branches(tx).Bind(branch); err != nil {
		t.Error(err)
	}
}

func testBranchesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Branches(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBranchesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branchOne := &Branch{}
	branchTwo := &Branch{}
	if err = randomize.Struct(seed, branchOne, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}
	if err = randomize.Struct(seed, branchTwo, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branchOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = branchTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Branches(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBranchesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	branchOne := &Branch{}
	branchTwo := &Branch{}
	if err = randomize.Struct(seed, branchOne, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}
	if err = randomize.Struct(seed, branchTwo, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branchOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = branchTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func branchBeforeInsertHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterInsertHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterSelectHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchBeforeUpdateHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterUpdateHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchBeforeDeleteHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterDeleteHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchBeforeUpsertHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func branchAfterUpsertHook(e boil.Executor, o *Branch) error {
	*o = Branch{}
	return nil
}

func testBranchesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Branch{}
	o := &Branch{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, branchDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Branch object: %s", err)
	}

	AddBranchHook(boil.BeforeInsertHook, branchBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	branchBeforeInsertHooks = []BranchHook{}

	AddBranchHook(boil.AfterInsertHook, branchAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	branchAfterInsertHooks = []BranchHook{}

	AddBranchHook(boil.AfterSelectHook, branchAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	branchAfterSelectHooks = []BranchHook{}

	AddBranchHook(boil.BeforeUpdateHook, branchBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	branchBeforeUpdateHooks = []BranchHook{}

	AddBranchHook(boil.AfterUpdateHook, branchAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	branchAfterUpdateHooks = []BranchHook{}

	AddBranchHook(boil.BeforeDeleteHook, branchBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	branchBeforeDeleteHooks = []BranchHook{}

	AddBranchHook(boil.AfterDeleteHook, branchAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	branchAfterDeleteHooks = []BranchHook{}

	AddBranchHook(boil.BeforeUpsertHook, branchBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	branchBeforeUpsertHooks = []BranchHook{}

	AddBranchHook(boil.AfterUpsertHook, branchAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	branchAfterUpsertHooks = []BranchHook{}
}
func testBranchesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBranchesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx, branchColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBranchToManySRNewBranches(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Branch
	var b, c SRNewBranch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...)

	b.BranchID = a.ID
	c.BranchID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewBranch, err := a.SRNewBranches(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewBranch {
		if v.BranchID == b.BranchID {
			bFound = true
		}
		if v.BranchID == c.BranchID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BranchSlice{&a}
	if err = a.L.LoadSRNewBranches(tx, false, (*[]*Branch)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRNewBranches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRNewBranches = nil
	if err = a.L.LoadSRNewBranches(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRNewBranches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewBranch)
	}
}

func testBranchToManyAddOpSRNewBranches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Branch
	var b, c, d, e SRNewBranch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewBranch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewBranchDBTypes, false, strmangle.SetComplement(srNewBranchPrimaryKeyColumns, srNewBranchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewBranch{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRNewBranches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BranchID {
			t.Error("foreign key was wrong value", a.ID, first.BranchID)
		}
		if a.ID != second.BranchID {
			t.Error("foreign key was wrong value", a.ID, second.BranchID)
		}

		if first.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Branch != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRNewBranches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRNewBranches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRNewBranches(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBranchToOneVariationVersionUsingSourceVariationVersion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Branch
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SourceVariationVersionID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SourceVariationVersion(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BranchSlice{&local}
	if err = local.L.LoadSourceVariationVersion(tx, false, (*[]*Branch)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SourceVariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SourceVariationVersion = nil
	if err = local.L.LoadSourceVariationVersion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SourceVariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBranchToOneVariationVersionUsingDestinationVariationVersion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Branch
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.DestinationVariationVersionID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.DestinationVariationVersion(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BranchSlice{&local}
	if err = local.L.LoadDestinationVariationVersion(tx, false, (*[]*Branch)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.DestinationVariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DestinationVariationVersion = nil
	if err = local.L.LoadDestinationVariationVersion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.DestinationVariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBranchToOneSetOpVariationVersionUsingSourceVariationVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Branch
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetSourceVariationVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SourceVariationVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SourceVariationVersionBranches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SourceVariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.SourceVariationVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SourceVariationVersionID))
		reflect.Indirect(reflect.ValueOf(&a.SourceVariationVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SourceVariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.SourceVariationVersionID, x.ID)
		}
	}
}
func testBranchToOneSetOpVariationVersionUsingDestinationVariationVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Branch
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetDestinationVariationVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DestinationVariationVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DestinationVariationVersionBranches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DestinationVariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.DestinationVariationVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DestinationVariationVersionID))
		reflect.Indirect(reflect.ValueOf(&a.DestinationVariationVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DestinationVariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.DestinationVariationVersionID, x.ID)
		}
	}
}
func testBranchesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = branch.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testBranchesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := BranchSlice{branch}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testBranchesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Branches(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	branchDBTypes = map[string]string{`CreatedAt`: `datetime`, `DestinationVariationVersionID`: `bigint`, `ID`: `bigint`, `SourceVariationVersionID`: `bigint`}
	_             = bytes.MinRead
)

func testBranchesUpdate(t *testing.T) {
	t.Parallel()

	if len(branchColumns) == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err = branch.Update(tx); err != nil {
		t.Error(err)
	}
}

func testBranchesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(branchColumns) == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	branch := &Branch{}
	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, branch, branchDBTypes, true, branchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(branchColumns, branchPrimaryKeyColumns) {
		fields = branchColumns
	} else {
		fields = strmangle.SetComplement(
			branchColumns,
			branchPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(branch))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := BranchSlice{branch}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testBranchesUpsert(t *testing.T) {
	t.Parallel()

	if len(branchColumns) == len(branchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	branch := Branch{}
	if err = randomize.Struct(seed, &branch, branchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = branch.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Branch: %s", err)
	}

	count, err := Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &branch, branchDBTypes, false, branchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err = branch.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Branch: %s", err)
	}

	count, err = Branches(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

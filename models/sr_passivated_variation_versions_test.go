// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSRPassivatedVariationVersions(t *testing.T) {
	t.Parallel()

	query := SRPassivatedVariationVersions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSRPassivatedVariationVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srPassivatedVariationVersion.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRPassivatedVariationVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRPassivatedVariationVersions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRPassivatedVariationVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRPassivatedVariationVersionSlice{srPassivatedVariationVersion}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSRPassivatedVariationVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SRPassivatedVariationVersionExists(tx, srPassivatedVariationVersion.ID)
	if err != nil {
		t.Errorf("Unable to check if SRPassivatedVariationVersion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SRPassivatedVariationVersionExistsG to return true, but got false.")
	}
}
func testSRPassivatedVariationVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	srPassivatedVariationVersionFound, err := FindSRPassivatedVariationVersion(tx, srPassivatedVariationVersion.ID)
	if err != nil {
		t.Error(err)
	}

	if srPassivatedVariationVersionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSRPassivatedVariationVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRPassivatedVariationVersions(tx).Bind(srPassivatedVariationVersion); err != nil {
		t.Error(err)
	}
}

func testSRPassivatedVariationVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SRPassivatedVariationVersions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSRPassivatedVariationVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersionOne := &SRPassivatedVariationVersion{}
	srPassivatedVariationVersionTwo := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersionOne, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, srPassivatedVariationVersionTwo, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srPassivatedVariationVersionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRPassivatedVariationVersions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSRPassivatedVariationVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srPassivatedVariationVersionOne := &SRPassivatedVariationVersion{}
	srPassivatedVariationVersionTwo := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersionOne, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, srPassivatedVariationVersionTwo, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srPassivatedVariationVersionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srPassivatedVariationVersionBeforeInsertHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionAfterInsertHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionAfterSelectHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionBeforeUpdateHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionAfterUpdateHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionBeforeDeleteHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionAfterDeleteHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionBeforeUpsertHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func srPassivatedVariationVersionAfterUpsertHook(e boil.Executor, o *SRPassivatedVariationVersion) error {
	*o = SRPassivatedVariationVersion{}
	return nil
}

func testSRPassivatedVariationVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SRPassivatedVariationVersion{}
	o := &SRPassivatedVariationVersion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srPassivatedVariationVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion object: %s", err)
	}

	AddSRPassivatedVariationVersionHook(boil.BeforeInsertHook, srPassivatedVariationVersionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionBeforeInsertHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.AfterInsertHook, srPassivatedVariationVersionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionAfterInsertHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.AfterSelectHook, srPassivatedVariationVersionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionAfterSelectHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.BeforeUpdateHook, srPassivatedVariationVersionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionBeforeUpdateHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.AfterUpdateHook, srPassivatedVariationVersionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionAfterUpdateHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.BeforeDeleteHook, srPassivatedVariationVersionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionBeforeDeleteHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.AfterDeleteHook, srPassivatedVariationVersionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionAfterDeleteHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.BeforeUpsertHook, srPassivatedVariationVersionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionBeforeUpsertHooks = []SRPassivatedVariationVersionHook{}

	AddSRPassivatedVariationVersionHook(boil.AfterUpsertHook, srPassivatedVariationVersionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srPassivatedVariationVersionAfterUpsertHooks = []SRPassivatedVariationVersionHook{}
}
func testSRPassivatedVariationVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRPassivatedVariationVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx, srPassivatedVariationVersionColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRPassivatedVariationVersionToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRPassivatedVariationVersion
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRPassivatedVariationVersionSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SRPassivatedVariationVersion)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRPassivatedVariationVersionToOneVariationVersionUsingVariationVersion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRPassivatedVariationVersion
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationVersionID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VariationVersion(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRPassivatedVariationVersionSlice{&local}
	if err = local.L.LoadVariationVersion(tx, false, (*[]*SRPassivatedVariationVersion)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VariationVersion = nil
	if err = local.L.LoadVariationVersion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRPassivatedVariationVersionToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRPassivatedVariationVersion
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srPassivatedVariationVersionDBTypes, false, strmangle.SetComplement(srPassivatedVariationVersionPrimaryKeyColumns, srPassivatedVariationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSRPassivatedVariationVersions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSRPassivatedVariationVersionToOneSetOpVariationVersionUsingVariationVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRPassivatedVariationVersion
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srPassivatedVariationVersionDBTypes, false, strmangle.SetComplement(srPassivatedVariationVersionPrimaryKeyColumns, srPassivatedVariationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetVariationVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VariationVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRPassivatedVariationVersions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationVersionID))
		reflect.Indirect(reflect.ValueOf(&a.VariationVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersionID, x.ID)
		}
	}
}
func testSRPassivatedVariationVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srPassivatedVariationVersion.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSRPassivatedVariationVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRPassivatedVariationVersionSlice{srPassivatedVariationVersion}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSRPassivatedVariationVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRPassivatedVariationVersions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srPassivatedVariationVersionDBTypes = map[string]string{`ID`: `bigint`, `SRID`: `bigint`, `VariationVersionID`: `bigint`}
	_                                   = bytes.MinRead
)

func testSRPassivatedVariationVersionsUpdate(t *testing.T) {
	t.Parallel()

	if len(srPassivatedVariationVersionColumns) == len(srPassivatedVariationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	if err = srPassivatedVariationVersion.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSRPassivatedVariationVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srPassivatedVariationVersionColumns) == len(srPassivatedVariationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srPassivatedVariationVersion := &SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true, srPassivatedVariationVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srPassivatedVariationVersionColumns, srPassivatedVariationVersionPrimaryKeyColumns) {
		fields = srPassivatedVariationVersionColumns
	} else {
		fields = strmangle.SetComplement(
			srPassivatedVariationVersionColumns,
			srPassivatedVariationVersionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srPassivatedVariationVersion))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SRPassivatedVariationVersionSlice{srPassivatedVariationVersion}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSRPassivatedVariationVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(srPassivatedVariationVersionColumns) == len(srPassivatedVariationVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srPassivatedVariationVersion := SRPassivatedVariationVersion{}
	if err = randomize.Struct(seed, &srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srPassivatedVariationVersion.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRPassivatedVariationVersion: %s", err)
	}

	count, err := SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srPassivatedVariationVersion, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRPassivatedVariationVersion struct: %s", err)
	}

	if err = srPassivatedVariationVersion.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRPassivatedVariationVersion: %s", err)
	}

	count, err = SRPassivatedVariationVersions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSynchronizationRaports(t *testing.T) {
	t.Parallel()

	query := SynchronizationRaports(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSynchronizationRaportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = synchronizationRaport.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSynchronizationRaportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SynchronizationRaports(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSynchronizationRaportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SynchronizationRaportSlice{synchronizationRaport}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSynchronizationRaportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SynchronizationRaportExists(tx, synchronizationRaport.ID)
	if err != nil {
		t.Errorf("Unable to check if SynchronizationRaport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SynchronizationRaportExistsG to return true, but got false.")
	}
}
func testSynchronizationRaportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	synchronizationRaportFound, err := FindSynchronizationRaport(tx, synchronizationRaport.ID)
	if err != nil {
		t.Error(err)
	}

	if synchronizationRaportFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSynchronizationRaportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SynchronizationRaports(tx).Bind(synchronizationRaport); err != nil {
		t.Error(err)
	}
}

func testSynchronizationRaportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SynchronizationRaports(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSynchronizationRaportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaportOne := &SynchronizationRaport{}
	synchronizationRaportTwo := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaportOne, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}
	if err = randomize.Struct(seed, synchronizationRaportTwo, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaportOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = synchronizationRaportTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SynchronizationRaports(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSynchronizationRaportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	synchronizationRaportOne := &SynchronizationRaport{}
	synchronizationRaportTwo := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaportOne, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}
	if err = randomize.Struct(seed, synchronizationRaportTwo, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaportOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = synchronizationRaportTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func synchronizationRaportBeforeInsertHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportAfterInsertHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportAfterSelectHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportBeforeUpdateHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportAfterUpdateHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportBeforeDeleteHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportAfterDeleteHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportBeforeUpsertHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func synchronizationRaportAfterUpsertHook(e boil.Executor, o *SynchronizationRaport) error {
	*o = SynchronizationRaport{}
	return nil
}

func testSynchronizationRaportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SynchronizationRaport{}
	o := &SynchronizationRaport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, synchronizationRaportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport object: %s", err)
	}

	AddSynchronizationRaportHook(boil.BeforeInsertHook, synchronizationRaportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportBeforeInsertHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.AfterInsertHook, synchronizationRaportAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportAfterInsertHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.AfterSelectHook, synchronizationRaportAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportAfterSelectHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.BeforeUpdateHook, synchronizationRaportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportBeforeUpdateHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.AfterUpdateHook, synchronizationRaportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportAfterUpdateHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.BeforeDeleteHook, synchronizationRaportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportBeforeDeleteHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.AfterDeleteHook, synchronizationRaportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportAfterDeleteHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.BeforeUpsertHook, synchronizationRaportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportBeforeUpsertHooks = []SynchronizationRaportHook{}

	AddSynchronizationRaportHook(boil.AfterUpsertHook, synchronizationRaportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	synchronizationRaportAfterUpsertHooks = []SynchronizationRaportHook{}
}
func testSynchronizationRaportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSynchronizationRaportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx, synchronizationRaportColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSynchronizationRaportToManySRSRAddSongDatabaseVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRAddSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, srAddSongDatabaseVariationDBTypes, false, srAddSongDatabaseVariationColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srAddSongDatabaseVariation, err := a.SRSRAddSongDatabaseVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srAddSongDatabaseVariation {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRAddSongDatabaseVariations(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRAddSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRAddSongDatabaseVariations = nil
	if err = a.L.LoadSRSRAddSongDatabaseVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRAddSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srAddSongDatabaseVariation)
	}
}

func testSynchronizationRaportToManySRSREwConflicts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SREwConflict

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...)
	randomize.Struct(seed, &c, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srEwConflict, err := a.SRSREwConflicts(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srEwConflict {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSREwConflicts(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSREwConflicts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSREwConflicts = nil
	if err = a.L.LoadSRSREwConflicts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSREwConflicts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srEwConflict)
	}
}

func testSynchronizationRaportToManySRSREwDatabaseLinks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SREwDatabaseLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...)
	randomize.Struct(seed, &c, srEwDatabaseLinkDBTypes, false, srEwDatabaseLinkColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srEwDatabaseLink, err := a.SRSREwDatabaseLinks(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srEwDatabaseLink {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSREwDatabaseLinks(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSREwDatabaseLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSREwDatabaseLinks = nil
	if err = a.L.LoadSRSREwDatabaseLinks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSREwDatabaseLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srEwDatabaseLink)
	}
}

func testSynchronizationRaportToManySRSREwSongs(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SREwSong

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srEwSongDBTypes, false, srEwSongColumnsWithDefault...)
	randomize.Struct(seed, &c, srEwSongDBTypes, false, srEwSongColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srEwSong, err := a.SRSREwSongs(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srEwSong {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSREwSongs(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSREwSongs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSREwSongs = nil
	if err = a.L.LoadSRSREwSongs(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSREwSongs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srEwSong)
	}
}

func testSynchronizationRaportToManySRSRNewAuthors(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRNewAuthor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewAuthorDBTypes, false, srNewAuthorColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewAuthorDBTypes, false, srNewAuthorColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewAuthor, err := a.SRSRNewAuthors(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewAuthor {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRNewAuthors(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewAuthors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRNewAuthors = nil
	if err = a.L.LoadSRSRNewAuthors(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewAuthors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewAuthor)
	}
}

func testSynchronizationRaportToManySRSRNewBranches(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRNewBranch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewBranch, err := a.SRSRNewBranches(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewBranch {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRNewBranches(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewBranches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRNewBranches = nil
	if err = a.L.LoadSRSRNewBranches(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewBranches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewBranch)
	}
}

func testSynchronizationRaportToManySRSRNewCopyrights(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRNewCopyright

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewCopyrightDBTypes, false, srNewCopyrightColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewCopyrightDBTypes, false, srNewCopyrightColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewCopyright, err := a.SRSRNewCopyrights(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewCopyright {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRNewCopyrights(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewCopyrights); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRNewCopyrights = nil
	if err = a.L.LoadSRSRNewCopyrights(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewCopyrights); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewCopyright)
	}
}

func testSynchronizationRaportToManySRSRNewVariationVersions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRNewVariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewVariationVersionDBTypes, false, srNewVariationVersionColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewVariationVersionDBTypes, false, srNewVariationVersionColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewVariationVersion, err := a.SRSRNewVariationVersions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewVariationVersion {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRNewVariationVersions(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewVariationVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRNewVariationVersions = nil
	if err = a.L.LoadSRSRNewVariationVersions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewVariationVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewVariationVersion)
	}
}

func testSynchronizationRaportToManySRSRNewVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRNewVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewVariationDBTypes, false, srNewVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewVariationDBTypes, false, srNewVariationColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewVariation, err := a.SRSRNewVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewVariation {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRNewVariations(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRNewVariations = nil
	if err = a.L.LoadSRSRNewVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRNewVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewVariation)
	}
}

func testSynchronizationRaportToManySRSRPassivatedVariationVersions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRPassivatedVariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...)
	randomize.Struct(seed, &c, srPassivatedVariationVersionDBTypes, false, srPassivatedVariationVersionColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srPassivatedVariationVersion, err := a.SRSRPassivatedVariationVersions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srPassivatedVariationVersion {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRPassivatedVariationVersions(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRPassivatedVariationVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRPassivatedVariationVersions = nil
	if err = a.L.LoadSRSRPassivatedVariationVersions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRPassivatedVariationVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srPassivatedVariationVersion)
	}
}

func testSynchronizationRaportToManySRSRRemoveSongDatabaseVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRRemoveSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srRemoveSongDatabaseVariationDBTypes, false, srRemoveSongDatabaseVariationColumnsWithDefault...)
	randomize.Struct(seed, &c, srRemoveSongDatabaseVariationDBTypes, false, srRemoveSongDatabaseVariationColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srRemoveSongDatabaseVariation, err := a.SRSRRemoveSongDatabaseVariations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srRemoveSongDatabaseVariation {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRRemoveSongDatabaseVariations(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRRemoveSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRRemoveSongDatabaseVariations = nil
	if err = a.L.LoadSRSRRemoveSongDatabaseVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRRemoveSongDatabaseVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srRemoveSongDatabaseVariation)
	}
}

func testSynchronizationRaportToManySRSRUpdatedEwDatabaseLinkVersions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c SRUpdatedEwDatabaseLinkVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...)
	randomize.Struct(seed, &c, srUpdatedEwDatabaseLinkVersionDBTypes, false, srUpdatedEwDatabaseLinkVersionColumnsWithDefault...)

	b.SRID = a.ID
	c.SRID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srUpdatedEwDatabaseLinkVersion, err := a.SRSRUpdatedEwDatabaseLinkVersions(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srUpdatedEwDatabaseLinkVersion {
		if v.SRID == b.SRID {
			bFound = true
		}
		if v.SRID == c.SRID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SynchronizationRaportSlice{&a}
	if err = a.L.LoadSRSRUpdatedEwDatabaseLinkVersions(tx, false, (*[]*SynchronizationRaport)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRUpdatedEwDatabaseLinkVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRSRUpdatedEwDatabaseLinkVersions = nil
	if err = a.L.LoadSRSRUpdatedEwDatabaseLinkVersions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRSRUpdatedEwDatabaseLinkVersions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srUpdatedEwDatabaseLinkVersion)
	}
}

func testSynchronizationRaportToManyAddOpSRSRAddSongDatabaseVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRAddSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRAddSongDatabaseVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srAddSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srAddSongDatabaseVariationPrimaryKeyColumns, srAddSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRAddSongDatabaseVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRAddSongDatabaseVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRAddSongDatabaseVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRAddSongDatabaseVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRAddSongDatabaseVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSREwConflicts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SREwConflict

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SREwConflict{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srEwConflictDBTypes, false, strmangle.SetComplement(srEwConflictPrimaryKeyColumns, srEwConflictColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SREwConflict{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSREwConflicts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSREwConflicts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSREwConflicts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSREwConflicts(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSREwDatabaseLinks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SREwDatabaseLink

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SREwDatabaseLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srEwDatabaseLinkDBTypes, false, strmangle.SetComplement(srEwDatabaseLinkPrimaryKeyColumns, srEwDatabaseLinkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SREwDatabaseLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSREwDatabaseLinks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSREwDatabaseLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSREwDatabaseLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSREwDatabaseLinks(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSREwSongs(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SREwSong

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SREwSong{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srEwSongDBTypes, false, strmangle.SetComplement(srEwSongPrimaryKeyColumns, srEwSongColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SREwSong{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSREwSongs(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSREwSongs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSREwSongs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSREwSongs(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRNewAuthors(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRNewAuthor

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewAuthor{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewAuthorDBTypes, false, strmangle.SetComplement(srNewAuthorPrimaryKeyColumns, srNewAuthorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewAuthor{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRNewAuthors(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRNewAuthors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRNewAuthors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRNewAuthors(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRNewBranches(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRNewBranch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewBranch{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewBranchDBTypes, false, strmangle.SetComplement(srNewBranchPrimaryKeyColumns, srNewBranchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewBranch{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRNewBranches(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRNewBranches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRNewBranches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRNewBranches(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRNewCopyrights(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRNewCopyright

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewCopyright{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewCopyrightDBTypes, false, strmangle.SetComplement(srNewCopyrightPrimaryKeyColumns, srNewCopyrightColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewCopyright{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRNewCopyrights(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRNewCopyrights[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRNewCopyrights[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRNewCopyrights(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRNewVariationVersions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRNewVariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewVariationVersion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewVariationVersionDBTypes, false, strmangle.SetComplement(srNewVariationVersionPrimaryKeyColumns, srNewVariationVersionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewVariationVersion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRNewVariationVersions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRNewVariationVersions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRNewVariationVersions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRNewVariationVersions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRNewVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRNewVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewVariationDBTypes, false, strmangle.SetComplement(srNewVariationPrimaryKeyColumns, srNewVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRNewVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRNewVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRNewVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRNewVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRPassivatedVariationVersions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRPassivatedVariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRPassivatedVariationVersion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srPassivatedVariationVersionDBTypes, false, strmangle.SetComplement(srPassivatedVariationVersionPrimaryKeyColumns, srPassivatedVariationVersionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRPassivatedVariationVersion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRPassivatedVariationVersions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRPassivatedVariationVersions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRPassivatedVariationVersions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRPassivatedVariationVersions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRRemoveSongDatabaseVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRRemoveSongDatabaseVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRRemoveSongDatabaseVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srRemoveSongDatabaseVariationDBTypes, false, strmangle.SetComplement(srRemoveSongDatabaseVariationPrimaryKeyColumns, srRemoveSongDatabaseVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRRemoveSongDatabaseVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRRemoveSongDatabaseVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRRemoveSongDatabaseVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRRemoveSongDatabaseVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRRemoveSongDatabaseVariations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSynchronizationRaportToManyAddOpSRSRUpdatedEwDatabaseLinkVersions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SynchronizationRaport
	var b, c, d, e SRUpdatedEwDatabaseLinkVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRUpdatedEwDatabaseLinkVersion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srUpdatedEwDatabaseLinkVersionDBTypes, false, strmangle.SetComplement(srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns, srUpdatedEwDatabaseLinkVersionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRUpdatedEwDatabaseLinkVersion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRSRUpdatedEwDatabaseLinkVersions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SRID {
			t.Error("foreign key was wrong value", a.ID, first.SRID)
		}
		if a.ID != second.SRID {
			t.Error("foreign key was wrong value", a.ID, second.SRID)
		}

		if first.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SR != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRSRUpdatedEwDatabaseLinkVersions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRSRUpdatedEwDatabaseLinkVersions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRSRUpdatedEwDatabaseLinkVersions(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSynchronizationRaportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = synchronizationRaport.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSynchronizationRaportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SynchronizationRaportSlice{synchronizationRaport}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSynchronizationRaportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SynchronizationRaports(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	synchronizationRaportDBTypes = map[string]string{`DatabaseFound`: `tinyint`, `DatabaseID`: `bigint`, `DatabaseKey`: `varchar`, `DurationMS`: `bigint`, `FinishedAt`: `datetime`, `ID`: `bigint`, `RaportType`: `int`, `SRGenDurationMS`: `bigint`, `StartedAt`: `datetime`}
	_                            = bytes.MinRead
)

func testSynchronizationRaportsUpdate(t *testing.T) {
	t.Parallel()

	if len(synchronizationRaportColumns) == len(synchronizationRaportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err = synchronizationRaport.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSynchronizationRaportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(synchronizationRaportColumns) == len(synchronizationRaportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	synchronizationRaport := &SynchronizationRaport{}
	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, synchronizationRaport, synchronizationRaportDBTypes, true, synchronizationRaportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(synchronizationRaportColumns, synchronizationRaportPrimaryKeyColumns) {
		fields = synchronizationRaportColumns
	} else {
		fields = strmangle.SetComplement(
			synchronizationRaportColumns,
			synchronizationRaportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(synchronizationRaport))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SynchronizationRaportSlice{synchronizationRaport}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSynchronizationRaportsUpsert(t *testing.T) {
	t.Parallel()

	if len(synchronizationRaportColumns) == len(synchronizationRaportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	synchronizationRaport := SynchronizationRaport{}
	if err = randomize.Struct(seed, &synchronizationRaport, synchronizationRaportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = synchronizationRaport.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SynchronizationRaport: %s", err)
	}

	count, err := SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &synchronizationRaport, synchronizationRaportDBTypes, false, synchronizationRaportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err = synchronizationRaport.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SynchronizationRaport: %s", err)
	}

	count, err = SynchronizationRaports(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

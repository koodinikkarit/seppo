// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testEwDatabaseLinks(t *testing.T) {
	t.Parallel()

	query := EwDatabaseLinks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testEwDatabaseLinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ewDatabaseLink.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEwDatabaseLinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EwDatabaseLinks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEwDatabaseLinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EwDatabaseLinkSlice{ewDatabaseLink}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testEwDatabaseLinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := EwDatabaseLinkExists(tx, ewDatabaseLink.ID)
	if err != nil {
		t.Errorf("Unable to check if EwDatabaseLink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EwDatabaseLinkExistsG to return true, but got false.")
	}
}
func testEwDatabaseLinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	ewDatabaseLinkFound, err := FindEwDatabaseLink(tx, ewDatabaseLink.ID)
	if err != nil {
		t.Error(err)
	}

	if ewDatabaseLinkFound == nil {
		t.Error("want a record, got nil")
	}
}
func testEwDatabaseLinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EwDatabaseLinks(tx).Bind(ewDatabaseLink); err != nil {
		t.Error(err)
	}
}

func testEwDatabaseLinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := EwDatabaseLinks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEwDatabaseLinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLinkOne := &EwDatabaseLink{}
	ewDatabaseLinkTwo := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLinkOne, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}
	if err = randomize.Struct(seed, ewDatabaseLinkTwo, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLinkOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ewDatabaseLinkTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EwDatabaseLinks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEwDatabaseLinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ewDatabaseLinkOne := &EwDatabaseLink{}
	ewDatabaseLinkTwo := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLinkOne, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}
	if err = randomize.Struct(seed, ewDatabaseLinkTwo, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLinkOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = ewDatabaseLinkTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func ewDatabaseLinkBeforeInsertHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkAfterInsertHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkAfterSelectHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkBeforeUpdateHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkAfterUpdateHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkBeforeDeleteHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkAfterDeleteHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkBeforeUpsertHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func ewDatabaseLinkAfterUpsertHook(e boil.Executor, o *EwDatabaseLink) error {
	*o = EwDatabaseLink{}
	return nil
}

func testEwDatabaseLinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &EwDatabaseLink{}
	o := &EwDatabaseLink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ewDatabaseLinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink object: %s", err)
	}

	AddEwDatabaseLinkHook(boil.BeforeInsertHook, ewDatabaseLinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkBeforeInsertHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.AfterInsertHook, ewDatabaseLinkAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkAfterInsertHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.AfterSelectHook, ewDatabaseLinkAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkAfterSelectHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.BeforeUpdateHook, ewDatabaseLinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkBeforeUpdateHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.AfterUpdateHook, ewDatabaseLinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkAfterUpdateHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.BeforeDeleteHook, ewDatabaseLinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkBeforeDeleteHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.AfterDeleteHook, ewDatabaseLinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkAfterDeleteHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.BeforeUpsertHook, ewDatabaseLinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkBeforeUpsertHooks = []EwDatabaseLinkHook{}

	AddEwDatabaseLinkHook(boil.AfterUpsertHook, ewDatabaseLinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ewDatabaseLinkAfterUpsertHooks = []EwDatabaseLinkHook{}
}
func testEwDatabaseLinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEwDatabaseLinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx, ewDatabaseLinkColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEwDatabaseLinkToOneEwDatabaseUsingEwDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local EwDatabaseLink
	var foreign EwDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.EwDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.EwDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EwDatabaseLinkSlice{&local}
	if err = local.L.LoadEwDatabase(tx, false, (*[]*EwDatabaseLink)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.EwDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EwDatabase = nil
	if err = local.L.LoadEwDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.EwDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEwDatabaseLinkToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local EwDatabaseLink
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ewDatabaseLinkDBTypes, false, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EwDatabaseLinkSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*EwDatabaseLink)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEwDatabaseLinkToOneSetOpEwDatabaseUsingEwDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabaseLink
	var b, c EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseLinkDBTypes, false, strmangle.SetComplement(ewDatabaseLinkPrimaryKeyColumns, ewDatabaseLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*EwDatabase{&b, &c} {
		err = a.SetEwDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EwDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EwDatabaseLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EwDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.EwDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EwDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.EwDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EwDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.EwDatabaseID, x.ID)
		}
	}
}
func testEwDatabaseLinkToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EwDatabaseLink
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ewDatabaseLinkDBTypes, false, strmangle.SetComplement(ewDatabaseLinkPrimaryKeyColumns, ewDatabaseLinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EwDatabaseLinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testEwDatabaseLinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ewDatabaseLink.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEwDatabaseLinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EwDatabaseLinkSlice{ewDatabaseLink}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testEwDatabaseLinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EwDatabaseLinks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ewDatabaseLinkDBTypes = map[string]string{`Author`: `varchar`, `Copyright`: `varchar`, `CreatedAt`: `datetime`, `EwDatabaseID`: `bigint`, `EwDatabaseSongID`: `bigint`, `ID`: `bigint`, `UpdatedAt`: `datetime`, `VariationID`: `bigint`, `Version`: `int`}
	_                     = bytes.MinRead
)

func testEwDatabaseLinksUpdate(t *testing.T) {
	t.Parallel()

	if len(ewDatabaseLinkColumns) == len(ewDatabaseLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	if err = ewDatabaseLink.Update(tx); err != nil {
		t.Error(err)
	}
}

func testEwDatabaseLinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ewDatabaseLinkColumns) == len(ewDatabaseLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	ewDatabaseLink := &EwDatabaseLink{}
	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, ewDatabaseLink, ewDatabaseLinkDBTypes, true, ewDatabaseLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ewDatabaseLinkColumns, ewDatabaseLinkPrimaryKeyColumns) {
		fields = ewDatabaseLinkColumns
	} else {
		fields = strmangle.SetComplement(
			ewDatabaseLinkColumns,
			ewDatabaseLinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(ewDatabaseLink))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := EwDatabaseLinkSlice{ewDatabaseLink}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testEwDatabaseLinksUpsert(t *testing.T) {
	t.Parallel()

	if len(ewDatabaseLinkColumns) == len(ewDatabaseLinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	ewDatabaseLink := EwDatabaseLink{}
	if err = randomize.Struct(seed, &ewDatabaseLink, ewDatabaseLinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = ewDatabaseLink.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EwDatabaseLink: %s", err)
	}

	count, err := EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &ewDatabaseLink, ewDatabaseLinkDBTypes, false, ewDatabaseLinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EwDatabaseLink struct: %s", err)
	}

	if err = ewDatabaseLink.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EwDatabaseLink: %s", err)
	}

	count, err = EwDatabaseLinks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

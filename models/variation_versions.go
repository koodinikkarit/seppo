// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// VariationVersion is an object representing the database table.
type VariationVersion struct {
	ID          uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	VariationID uint64    `boil:"variation_id" json:"variation_id" toml:"variation_id" yaml:"variation_id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Text        string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	Version     uint      `boil:"version" json:"version" toml:"version" yaml:"version"`
	Newest      null.Int8 `boil:"newest" json:"newest,omitempty" toml:"newest" yaml:"newest,omitempty"`
	CreatedAt   null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DisabledAt  null.Time `boil:"disabled_at" json:"disabled_at,omitempty" toml:"disabled_at" yaml:"disabled_at,omitempty"`

	R *variationVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L variationVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VariationVersionColumns = struct {
	ID          string
	VariationID string
	Name        string
	Text        string
	Version     string
	Newest      string
	CreatedAt   string
	DisabledAt  string
}{
	ID:          "id",
	VariationID: "variation_id",
	Name:        "name",
	Text:        "text",
	Version:     "version",
	Newest:      "newest",
	CreatedAt:   "created_at",
	DisabledAt:  "disabled_at",
}

// variationVersionR is where relationships are stored.
type variationVersionR struct {
	Variation                           *Variation
	SourceVariationVersionBranches      BranchSlice
	DestinationVariationVersionBranches BranchSlice
	VariationVersion1Merges             MergeSlice
	VariationVersion2Merges             MergeSlice
	DestinationVariationVersionMerges   MergeSlice
	SREwConflicts                       SREwConflictSlice
	SREwSongs                           SREwSongSlice
	SRNewVariationVersions              SRNewVariationVersionSlice
	SRPassivatedVariationVersions       SRPassivatedVariationVersionSlice
}

// variationVersionL is where Load methods for each relationship are stored.
type variationVersionL struct{}

var (
	variationVersionColumns               = []string{"id", "variation_id", "name", "text", "version", "newest", "created_at", "disabled_at"}
	variationVersionColumnsWithoutDefault = []string{"variation_id", "name", "text", "newest", "created_at", "disabled_at"}
	variationVersionColumnsWithDefault    = []string{"id", "version"}
	variationVersionPrimaryKeyColumns     = []string{"id"}
)

type (
	// VariationVersionSlice is an alias for a slice of pointers to VariationVersion.
	// This should generally be used opposed to []VariationVersion.
	VariationVersionSlice []*VariationVersion
	// VariationVersionHook is the signature for custom VariationVersion hook methods
	VariationVersionHook func(boil.Executor, *VariationVersion) error

	variationVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	variationVersionType                 = reflect.TypeOf(&VariationVersion{})
	variationVersionMapping              = queries.MakeStructMapping(variationVersionType)
	variationVersionPrimaryKeyMapping, _ = queries.BindMapping(variationVersionType, variationVersionMapping, variationVersionPrimaryKeyColumns)
	variationVersionInsertCacheMut       sync.RWMutex
	variationVersionInsertCache          = make(map[string]insertCache)
	variationVersionUpdateCacheMut       sync.RWMutex
	variationVersionUpdateCache          = make(map[string]updateCache)
	variationVersionUpsertCacheMut       sync.RWMutex
	variationVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var variationVersionBeforeInsertHooks []VariationVersionHook
var variationVersionBeforeUpdateHooks []VariationVersionHook
var variationVersionBeforeDeleteHooks []VariationVersionHook
var variationVersionBeforeUpsertHooks []VariationVersionHook

var variationVersionAfterInsertHooks []VariationVersionHook
var variationVersionAfterSelectHooks []VariationVersionHook
var variationVersionAfterUpdateHooks []VariationVersionHook
var variationVersionAfterDeleteHooks []VariationVersionHook
var variationVersionAfterUpsertHooks []VariationVersionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VariationVersion) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VariationVersion) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VariationVersion) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VariationVersion) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VariationVersion) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VariationVersion) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VariationVersion) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VariationVersion) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VariationVersion) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range variationVersionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVariationVersionHook registers your hook function for all future operations.
func AddVariationVersionHook(hookPoint boil.HookPoint, variationVersionHook VariationVersionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		variationVersionBeforeInsertHooks = append(variationVersionBeforeInsertHooks, variationVersionHook)
	case boil.BeforeUpdateHook:
		variationVersionBeforeUpdateHooks = append(variationVersionBeforeUpdateHooks, variationVersionHook)
	case boil.BeforeDeleteHook:
		variationVersionBeforeDeleteHooks = append(variationVersionBeforeDeleteHooks, variationVersionHook)
	case boil.BeforeUpsertHook:
		variationVersionBeforeUpsertHooks = append(variationVersionBeforeUpsertHooks, variationVersionHook)
	case boil.AfterInsertHook:
		variationVersionAfterInsertHooks = append(variationVersionAfterInsertHooks, variationVersionHook)
	case boil.AfterSelectHook:
		variationVersionAfterSelectHooks = append(variationVersionAfterSelectHooks, variationVersionHook)
	case boil.AfterUpdateHook:
		variationVersionAfterUpdateHooks = append(variationVersionAfterUpdateHooks, variationVersionHook)
	case boil.AfterDeleteHook:
		variationVersionAfterDeleteHooks = append(variationVersionAfterDeleteHooks, variationVersionHook)
	case boil.AfterUpsertHook:
		variationVersionAfterUpsertHooks = append(variationVersionAfterUpsertHooks, variationVersionHook)
	}
}

// OneP returns a single variationVersion record from the query, and panics on error.
func (q variationVersionQuery) OneP() *VariationVersion {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single variationVersion record from the query.
func (q variationVersionQuery) One() (*VariationVersion, error) {
	o := &VariationVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for variation_versions")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all VariationVersion records from the query, and panics on error.
func (q variationVersionQuery) AllP() VariationVersionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all VariationVersion records from the query.
func (q variationVersionQuery) All() (VariationVersionSlice, error) {
	var o []*VariationVersion

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VariationVersion slice")
	}

	if len(variationVersionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all VariationVersion records in the query, and panics on error.
func (q variationVersionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all VariationVersion records in the query.
func (q variationVersionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count variation_versions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q variationVersionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q variationVersionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if variation_versions exists")
	}

	return count > 0, nil
}

// VariationG pointed to by the foreign key.
func (o *VariationVersion) VariationG(mods ...qm.QueryMod) variationQuery {
	return o.Variation(boil.GetDB(), mods...)
}

// Variation pointed to by the foreign key.
func (o *VariationVersion) Variation(exec boil.Executor, mods ...qm.QueryMod) variationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationID),
	}

	queryMods = append(queryMods, mods...)

	query := Variations(exec, queryMods...)
	queries.SetFrom(query.Query, "`variations`")

	return query
}

// SourceVariationVersionBranchesG retrieves all the branch's branches via source_variation_version_id column.
func (o *VariationVersion) SourceVariationVersionBranchesG(mods ...qm.QueryMod) branchQuery {
	return o.SourceVariationVersionBranches(boil.GetDB(), mods...)
}

// SourceVariationVersionBranches retrieves all the branch's branches with an executor via source_variation_version_id column.
func (o *VariationVersion) SourceVariationVersionBranches(exec boil.Executor, mods ...qm.QueryMod) branchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`branches`.`source_variation_version_id`=?", o.ID),
	)

	query := Branches(exec, queryMods...)
	queries.SetFrom(query.Query, "`branches`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`branches`.*"})
	}

	return query
}

// DestinationVariationVersionBranchesG retrieves all the branch's branches via destination_variation_version_id column.
func (o *VariationVersion) DestinationVariationVersionBranchesG(mods ...qm.QueryMod) branchQuery {
	return o.DestinationVariationVersionBranches(boil.GetDB(), mods...)
}

// DestinationVariationVersionBranches retrieves all the branch's branches with an executor via destination_variation_version_id column.
func (o *VariationVersion) DestinationVariationVersionBranches(exec boil.Executor, mods ...qm.QueryMod) branchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`branches`.`destination_variation_version_id`=?", o.ID),
	)

	query := Branches(exec, queryMods...)
	queries.SetFrom(query.Query, "`branches`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`branches`.*"})
	}

	return query
}

// VariationVersion1MergesG retrieves all the merge's merges via variation_version1_id column.
func (o *VariationVersion) VariationVersion1MergesG(mods ...qm.QueryMod) mergeQuery {
	return o.VariationVersion1Merges(boil.GetDB(), mods...)
}

// VariationVersion1Merges retrieves all the merge's merges with an executor via variation_version1_id column.
func (o *VariationVersion) VariationVersion1Merges(exec boil.Executor, mods ...qm.QueryMod) mergeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`merges`.`variation_version1_id`=?", o.ID),
	)

	query := Merges(exec, queryMods...)
	queries.SetFrom(query.Query, "`merges`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`merges`.*"})
	}

	return query
}

// VariationVersion2MergesG retrieves all the merge's merges via variation_version2_id column.
func (o *VariationVersion) VariationVersion2MergesG(mods ...qm.QueryMod) mergeQuery {
	return o.VariationVersion2Merges(boil.GetDB(), mods...)
}

// VariationVersion2Merges retrieves all the merge's merges with an executor via variation_version2_id column.
func (o *VariationVersion) VariationVersion2Merges(exec boil.Executor, mods ...qm.QueryMod) mergeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`merges`.`variation_version2_id`=?", o.ID),
	)

	query := Merges(exec, queryMods...)
	queries.SetFrom(query.Query, "`merges`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`merges`.*"})
	}

	return query
}

// DestinationVariationVersionMergesG retrieves all the merge's merges via destination_variation_version_id column.
func (o *VariationVersion) DestinationVariationVersionMergesG(mods ...qm.QueryMod) mergeQuery {
	return o.DestinationVariationVersionMerges(boil.GetDB(), mods...)
}

// DestinationVariationVersionMerges retrieves all the merge's merges with an executor via destination_variation_version_id column.
func (o *VariationVersion) DestinationVariationVersionMerges(exec boil.Executor, mods ...qm.QueryMod) mergeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`merges`.`destination_variation_version_id`=?", o.ID),
	)

	query := Merges(exec, queryMods...)
	queries.SetFrom(query.Query, "`merges`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`merges`.*"})
	}

	return query
}

// SREwConflictsG retrieves all the sr_ew_conflict's sr ew conflicts.
func (o *VariationVersion) SREwConflictsG(mods ...qm.QueryMod) srEwConflictQuery {
	return o.SREwConflicts(boil.GetDB(), mods...)
}

// SREwConflicts retrieves all the sr_ew_conflict's sr ew conflicts with an executor.
func (o *VariationVersion) SREwConflicts(exec boil.Executor, mods ...qm.QueryMod) srEwConflictQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_conflicts`.`variation_version_id`=?", o.ID),
	)

	query := SREwConflicts(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_conflicts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_conflicts`.*"})
	}

	return query
}

// SREwSongsG retrieves all the sr_ew_song's sr ew song.
func (o *VariationVersion) SREwSongsG(mods ...qm.QueryMod) srEwSongQuery {
	return o.SREwSongs(boil.GetDB(), mods...)
}

// SREwSongs retrieves all the sr_ew_song's sr ew song with an executor.
func (o *VariationVersion) SREwSongs(exec boil.Executor, mods ...qm.QueryMod) srEwSongQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_song`.`variation_version_id`=?", o.ID),
	)

	query := SREwSongs(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_song`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_song`.*"})
	}

	return query
}

// SRNewVariationVersionsG retrieves all the sr_new_variation_version's sr new variation versions.
func (o *VariationVersion) SRNewVariationVersionsG(mods ...qm.QueryMod) srNewVariationVersionQuery {
	return o.SRNewVariationVersions(boil.GetDB(), mods...)
}

// SRNewVariationVersions retrieves all the sr_new_variation_version's sr new variation versions with an executor.
func (o *VariationVersion) SRNewVariationVersions(exec boil.Executor, mods ...qm.QueryMod) srNewVariationVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_variation_versions`.`variation_version_id`=?", o.ID),
	)

	query := SRNewVariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_variation_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_variation_versions`.*"})
	}

	return query
}

// SRPassivatedVariationVersionsG retrieves all the sr_passivated_variation_version's sr passivated variation versions.
func (o *VariationVersion) SRPassivatedVariationVersionsG(mods ...qm.QueryMod) srPassivatedVariationVersionQuery {
	return o.SRPassivatedVariationVersions(boil.GetDB(), mods...)
}

// SRPassivatedVariationVersions retrieves all the sr_passivated_variation_version's sr passivated variation versions with an executor.
func (o *VariationVersion) SRPassivatedVariationVersions(exec boil.Executor, mods ...qm.QueryMod) srPassivatedVariationVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_passivated_variation_versions`.`variation_version_id`=?", o.ID),
	)

	query := SRPassivatedVariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_passivated_variation_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_passivated_variation_versions`.*"})
	}

	return query
}

// LoadVariation allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadVariation(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.VariationID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.VariationID
		}
	}

	query := fmt.Sprintf(
		"select * from `variations` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Variation")
	}
	defer results.Close()

	var resultSlice []*Variation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Variation")
	}

	if len(variationVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Variation = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationID == foreign.ID {
				local.R.Variation = foreign
				break
			}
		}
	}

	return nil
}

// LoadSourceVariationVersionBranches allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadSourceVariationVersionBranches(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `branches` where `source_variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load branches")
	}
	defer results.Close()

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SourceVariationVersionBranches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SourceVariationVersionID {
				local.R.SourceVariationVersionBranches = append(local.R.SourceVariationVersionBranches, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDestinationVariationVersionBranches allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadDestinationVariationVersionBranches(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `branches` where `destination_variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load branches")
	}
	defer results.Close()

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice branches")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationVariationVersionBranches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DestinationVariationVersionID {
				local.R.DestinationVariationVersionBranches = append(local.R.DestinationVariationVersionBranches, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVariationVersion1Merges allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadVariationVersion1Merges(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `merges` where `variation_version1_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load merges")
	}
	defer results.Close()

	var resultSlice []*Merge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice merges")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariationVersion1Merges = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationVersion1ID {
				local.R.VariationVersion1Merges = append(local.R.VariationVersion1Merges, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVariationVersion2Merges allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadVariationVersion2Merges(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `merges` where `variation_version2_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load merges")
	}
	defer results.Close()

	var resultSlice []*Merge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice merges")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariationVersion2Merges = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationVersion2ID {
				local.R.VariationVersion2Merges = append(local.R.VariationVersion2Merges, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDestinationVariationVersionMerges allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadDestinationVariationVersionMerges(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `merges` where `destination_variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load merges")
	}
	defer results.Close()

	var resultSlice []*Merge
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice merges")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationVariationVersionMerges = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DestinationVariationVersionID {
				local.R.DestinationVariationVersionMerges = append(local.R.DestinationVariationVersionMerges, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSREwConflicts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadSREwConflicts(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_conflicts` where `variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_conflicts")
	}
	defer results.Close()

	var resultSlice []*SREwConflict
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_conflicts")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SREwConflicts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationVersionID {
				local.R.SREwConflicts = append(local.R.SREwConflicts, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSREwSongs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadSREwSongs(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_song` where `variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_song")
	}
	defer results.Close()

	var resultSlice []*SREwSong
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_song")
	}

	if len(srEwSongAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SREwSongs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationVersionID {
				local.R.SREwSongs = append(local.R.SREwSongs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRNewVariationVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadSRNewVariationVersions(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_variation_versions` where `variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_variation_versions")
	}
	defer results.Close()

	var resultSlice []*SRNewVariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_variation_versions")
	}

	if len(srNewVariationVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRNewVariationVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationVersionID {
				local.R.SRNewVariationVersions = append(local.R.SRNewVariationVersions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRPassivatedVariationVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (variationVersionL) LoadSRPassivatedVariationVersions(e boil.Executor, singular bool, maybeVariationVersion interface{}) error {
	var slice []*VariationVersion
	var object *VariationVersion

	count := 1
	if singular {
		object = maybeVariationVersion.(*VariationVersion)
	} else {
		slice = *maybeVariationVersion.(*[]*VariationVersion)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &variationVersionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &variationVersionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_passivated_variation_versions` where `variation_version_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_passivated_variation_versions")
	}
	defer results.Close()

	var resultSlice []*SRPassivatedVariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_passivated_variation_versions")
	}

	if len(srPassivatedVariationVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRPassivatedVariationVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VariationVersionID {
				local.R.SRPassivatedVariationVersions = append(local.R.SRPassivatedVariationVersions, foreign)
				break
			}
		}
	}

	return nil
}

// SetVariationG of the variation_version to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.VariationVersions.
// Uses the global database handle.
func (o *VariationVersion) SetVariationG(insert bool, related *Variation) error {
	return o.SetVariation(boil.GetDB(), insert, related)
}

// SetVariationP of the variation_version to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.VariationVersions.
// Panics on error.
func (o *VariationVersion) SetVariationP(exec boil.Executor, insert bool, related *Variation) {
	if err := o.SetVariation(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationGP of the variation_version to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.VariationVersions.
// Uses the global database handle and panics on error.
func (o *VariationVersion) SetVariationGP(insert bool, related *Variation) {
	if err := o.SetVariation(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariation of the variation_version to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.VariationVersions.
func (o *VariationVersion) SetVariation(exec boil.Executor, insert bool, related *Variation) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `variation_versions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
		strmangle.WhereClause("`", "`", 0, variationVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationID = related.ID

	if o.R == nil {
		o.R = &variationVersionR{
			Variation: related,
		}
	} else {
		o.R.Variation = related
	}

	if related.R == nil {
		related.R = &variationR{
			VariationVersions: VariationVersionSlice{o},
		}
	} else {
		related.R.VariationVersions = append(related.R.VariationVersions, o)
	}

	return nil
}

// AddSourceVariationVersionBranchesG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SourceVariationVersionBranches.
// Sets related.R.SourceVariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddSourceVariationVersionBranchesG(insert bool, related ...*Branch) error {
	return o.AddSourceVariationVersionBranches(boil.GetDB(), insert, related...)
}

// AddSourceVariationVersionBranchesP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SourceVariationVersionBranches.
// Sets related.R.SourceVariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddSourceVariationVersionBranchesP(exec boil.Executor, insert bool, related ...*Branch) {
	if err := o.AddSourceVariationVersionBranches(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSourceVariationVersionBranchesGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SourceVariationVersionBranches.
// Sets related.R.SourceVariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddSourceVariationVersionBranchesGP(insert bool, related ...*Branch) {
	if err := o.AddSourceVariationVersionBranches(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSourceVariationVersionBranches adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SourceVariationVersionBranches.
// Sets related.R.SourceVariationVersion appropriately.
func (o *VariationVersion) AddSourceVariationVersionBranches(exec boil.Executor, insert bool, related ...*Branch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SourceVariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `branches` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"source_variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SourceVariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			SourceVariationVersionBranches: related,
		}
	} else {
		o.R.SourceVariationVersionBranches = append(o.R.SourceVariationVersionBranches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &branchR{
				SourceVariationVersion: o,
			}
		} else {
			rel.R.SourceVariationVersion = o
		}
	}
	return nil
}

// AddDestinationVariationVersionBranchesG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionBranches.
// Sets related.R.DestinationVariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddDestinationVariationVersionBranchesG(insert bool, related ...*Branch) error {
	return o.AddDestinationVariationVersionBranches(boil.GetDB(), insert, related...)
}

// AddDestinationVariationVersionBranchesP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionBranches.
// Sets related.R.DestinationVariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddDestinationVariationVersionBranchesP(exec boil.Executor, insert bool, related ...*Branch) {
	if err := o.AddDestinationVariationVersionBranches(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddDestinationVariationVersionBranchesGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionBranches.
// Sets related.R.DestinationVariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddDestinationVariationVersionBranchesGP(insert bool, related ...*Branch) {
	if err := o.AddDestinationVariationVersionBranches(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddDestinationVariationVersionBranches adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionBranches.
// Sets related.R.DestinationVariationVersion appropriately.
func (o *VariationVersion) AddDestinationVariationVersionBranches(exec boil.Executor, insert bool, related ...*Branch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationVariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `branches` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"destination_variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationVariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			DestinationVariationVersionBranches: related,
		}
	} else {
		o.R.DestinationVariationVersionBranches = append(o.R.DestinationVariationVersionBranches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &branchR{
				DestinationVariationVersion: o,
			}
		} else {
			rel.R.DestinationVariationVersion = o
		}
	}
	return nil
}

// AddVariationVersion1MergesG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion1Merges.
// Sets related.R.VariationVersion1 appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddVariationVersion1MergesG(insert bool, related ...*Merge) error {
	return o.AddVariationVersion1Merges(boil.GetDB(), insert, related...)
}

// AddVariationVersion1MergesP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion1Merges.
// Sets related.R.VariationVersion1 appropriately.
// Panics on error.
func (o *VariationVersion) AddVariationVersion1MergesP(exec boil.Executor, insert bool, related ...*Merge) {
	if err := o.AddVariationVersion1Merges(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVariationVersion1MergesGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion1Merges.
// Sets related.R.VariationVersion1 appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddVariationVersion1MergesGP(insert bool, related ...*Merge) {
	if err := o.AddVariationVersion1Merges(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVariationVersion1Merges adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion1Merges.
// Sets related.R.VariationVersion1 appropriately.
func (o *VariationVersion) AddVariationVersion1Merges(exec boil.Executor, insert bool, related ...*Merge) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationVersion1ID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `merges` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_version1_id"}),
				strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationVersion1ID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			VariationVersion1Merges: related,
		}
	} else {
		o.R.VariationVersion1Merges = append(o.R.VariationVersion1Merges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mergeR{
				VariationVersion1: o,
			}
		} else {
			rel.R.VariationVersion1 = o
		}
	}
	return nil
}

// AddVariationVersion2MergesG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion2Merges.
// Sets related.R.VariationVersion2 appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddVariationVersion2MergesG(insert bool, related ...*Merge) error {
	return o.AddVariationVersion2Merges(boil.GetDB(), insert, related...)
}

// AddVariationVersion2MergesP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion2Merges.
// Sets related.R.VariationVersion2 appropriately.
// Panics on error.
func (o *VariationVersion) AddVariationVersion2MergesP(exec boil.Executor, insert bool, related ...*Merge) {
	if err := o.AddVariationVersion2Merges(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVariationVersion2MergesGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion2Merges.
// Sets related.R.VariationVersion2 appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddVariationVersion2MergesGP(insert bool, related ...*Merge) {
	if err := o.AddVariationVersion2Merges(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVariationVersion2Merges adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.VariationVersion2Merges.
// Sets related.R.VariationVersion2 appropriately.
func (o *VariationVersion) AddVariationVersion2Merges(exec boil.Executor, insert bool, related ...*Merge) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationVersion2ID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `merges` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_version2_id"}),
				strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationVersion2ID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			VariationVersion2Merges: related,
		}
	} else {
		o.R.VariationVersion2Merges = append(o.R.VariationVersion2Merges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mergeR{
				VariationVersion2: o,
			}
		} else {
			rel.R.VariationVersion2 = o
		}
	}
	return nil
}

// AddDestinationVariationVersionMergesG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionMerges.
// Sets related.R.DestinationVariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddDestinationVariationVersionMergesG(insert bool, related ...*Merge) error {
	return o.AddDestinationVariationVersionMerges(boil.GetDB(), insert, related...)
}

// AddDestinationVariationVersionMergesP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionMerges.
// Sets related.R.DestinationVariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddDestinationVariationVersionMergesP(exec boil.Executor, insert bool, related ...*Merge) {
	if err := o.AddDestinationVariationVersionMerges(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddDestinationVariationVersionMergesGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionMerges.
// Sets related.R.DestinationVariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddDestinationVariationVersionMergesGP(insert bool, related ...*Merge) {
	if err := o.AddDestinationVariationVersionMerges(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddDestinationVariationVersionMerges adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.DestinationVariationVersionMerges.
// Sets related.R.DestinationVariationVersion appropriately.
func (o *VariationVersion) AddDestinationVariationVersionMerges(exec boil.Executor, insert bool, related ...*Merge) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationVariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `merges` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"destination_variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationVariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			DestinationVariationVersionMerges: related,
		}
	} else {
		o.R.DestinationVariationVersionMerges = append(o.R.DestinationVariationVersionMerges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mergeR{
				DestinationVariationVersion: o,
			}
		} else {
			rel.R.DestinationVariationVersion = o
		}
	}
	return nil
}

// AddSREwConflictsG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddSREwConflictsG(insert bool, related ...*SREwConflict) error {
	return o.AddSREwConflicts(boil.GetDB(), insert, related...)
}

// AddSREwConflictsP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.VariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddSREwConflictsP(exec boil.Executor, insert bool, related ...*SREwConflict) {
	if err := o.AddSREwConflicts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwConflictsGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddSREwConflictsGP(insert bool, related ...*SREwConflict) {
	if err := o.AddSREwConflicts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwConflicts adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.VariationVersion appropriately.
func (o *VariationVersion) AddSREwConflicts(exec boil.Executor, insert bool, related ...*SREwConflict) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_conflicts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			SREwConflicts: related,
		}
	} else {
		o.R.SREwConflicts = append(o.R.SREwConflicts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwConflictR{
				VariationVersion: o,
			}
		} else {
			rel.R.VariationVersion = o
		}
	}
	return nil
}

// AddSREwSongsG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwSongs.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddSREwSongsG(insert bool, related ...*SREwSong) error {
	return o.AddSREwSongs(boil.GetDB(), insert, related...)
}

// AddSREwSongsP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwSongs.
// Sets related.R.VariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddSREwSongsP(exec boil.Executor, insert bool, related ...*SREwSong) {
	if err := o.AddSREwSongs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwSongsGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwSongs.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddSREwSongsGP(insert bool, related ...*SREwSong) {
	if err := o.AddSREwSongs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwSongs adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SREwSongs.
// Sets related.R.VariationVersion appropriately.
func (o *VariationVersion) AddSREwSongs(exec boil.Executor, insert bool, related ...*SREwSong) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_song` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, srEwSongPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			SREwSongs: related,
		}
	} else {
		o.R.SREwSongs = append(o.R.SREwSongs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwSongR{
				VariationVersion: o,
			}
		} else {
			rel.R.VariationVersion = o
		}
	}
	return nil
}

// AddSRNewVariationVersionsG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRNewVariationVersions.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddSRNewVariationVersionsG(insert bool, related ...*SRNewVariationVersion) error {
	return o.AddSRNewVariationVersions(boil.GetDB(), insert, related...)
}

// AddSRNewVariationVersionsP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRNewVariationVersions.
// Sets related.R.VariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddSRNewVariationVersionsP(exec boil.Executor, insert bool, related ...*SRNewVariationVersion) {
	if err := o.AddSRNewVariationVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRNewVariationVersionsGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRNewVariationVersions.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddSRNewVariationVersionsGP(insert bool, related ...*SRNewVariationVersion) {
	if err := o.AddSRNewVariationVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRNewVariationVersions adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRNewVariationVersions.
// Sets related.R.VariationVersion appropriately.
func (o *VariationVersion) AddSRNewVariationVersions(exec boil.Executor, insert bool, related ...*SRNewVariationVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_variation_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, srNewVariationVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			SRNewVariationVersions: related,
		}
	} else {
		o.R.SRNewVariationVersions = append(o.R.SRNewVariationVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewVariationVersionR{
				VariationVersion: o,
			}
		} else {
			rel.R.VariationVersion = o
		}
	}
	return nil
}

// AddSRPassivatedVariationVersionsG adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRPassivatedVariationVersions.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle.
func (o *VariationVersion) AddSRPassivatedVariationVersionsG(insert bool, related ...*SRPassivatedVariationVersion) error {
	return o.AddSRPassivatedVariationVersions(boil.GetDB(), insert, related...)
}

// AddSRPassivatedVariationVersionsP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRPassivatedVariationVersions.
// Sets related.R.VariationVersion appropriately.
// Panics on error.
func (o *VariationVersion) AddSRPassivatedVariationVersionsP(exec boil.Executor, insert bool, related ...*SRPassivatedVariationVersion) {
	if err := o.AddSRPassivatedVariationVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRPassivatedVariationVersionsGP adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRPassivatedVariationVersions.
// Sets related.R.VariationVersion appropriately.
// Uses the global database handle and panics on error.
func (o *VariationVersion) AddSRPassivatedVariationVersionsGP(insert bool, related ...*SRPassivatedVariationVersion) {
	if err := o.AddSRPassivatedVariationVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRPassivatedVariationVersions adds the given related objects to the existing relationships
// of the variation_version, optionally inserting them as new records.
// Appends related to o.R.SRPassivatedVariationVersions.
// Sets related.R.VariationVersion appropriately.
func (o *VariationVersion) AddSRPassivatedVariationVersions(exec boil.Executor, insert bool, related ...*SRPassivatedVariationVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VariationVersionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_passivated_variation_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"variation_version_id"}),
				strmangle.WhereClause("`", "`", 0, srPassivatedVariationVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VariationVersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &variationVersionR{
			SRPassivatedVariationVersions: related,
		}
	} else {
		o.R.SRPassivatedVariationVersions = append(o.R.SRPassivatedVariationVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srPassivatedVariationVersionR{
				VariationVersion: o,
			}
		} else {
			rel.R.VariationVersion = o
		}
	}
	return nil
}

// VariationVersionsG retrieves all records.
func VariationVersionsG(mods ...qm.QueryMod) variationVersionQuery {
	return VariationVersions(boil.GetDB(), mods...)
}

// VariationVersions retrieves all the records using an executor.
func VariationVersions(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	mods = append(mods, qm.From("`variation_versions`"))
	return variationVersionQuery{NewQuery(exec, mods...)}
}

// FindVariationVersionG retrieves a single record by ID.
func FindVariationVersionG(id uint64, selectCols ...string) (*VariationVersion, error) {
	return FindVariationVersion(boil.GetDB(), id, selectCols...)
}

// FindVariationVersionGP retrieves a single record by ID, and panics on error.
func FindVariationVersionGP(id uint64, selectCols ...string) *VariationVersion {
	retobj, err := FindVariationVersion(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindVariationVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVariationVersion(exec boil.Executor, id uint64, selectCols ...string) (*VariationVersion, error) {
	variationVersionObj := &VariationVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `variation_versions` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(variationVersionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from variation_versions")
	}

	return variationVersionObj, nil
}

// FindVariationVersionP retrieves a single record by ID with an executor, and panics on error.
func FindVariationVersionP(exec boil.Executor, id uint64, selectCols ...string) *VariationVersion {
	retobj, err := FindVariationVersion(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *VariationVersion) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *VariationVersion) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *VariationVersion) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *VariationVersion) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no variation_versions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variationVersionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	variationVersionInsertCacheMut.RLock()
	cache, cached := variationVersionInsertCache[key]
	variationVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			variationVersionColumns,
			variationVersionColumnsWithDefault,
			variationVersionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(variationVersionType, variationVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(variationVersionType, variationVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `variation_versions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `variation_versions` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `variation_versions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, variationVersionPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into variation_versions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == variationVersionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for variation_versions")
	}

CacheNoHooks:
	if !cached {
		variationVersionInsertCacheMut.Lock()
		variationVersionInsertCache[key] = cache
		variationVersionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single VariationVersion record. See Update for
// whitelist behavior description.
func (o *VariationVersion) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single VariationVersion record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *VariationVersion) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the VariationVersion, and panics on error.
// See Update for whitelist behavior description.
func (o *VariationVersion) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the VariationVersion.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *VariationVersion) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	variationVersionUpdateCacheMut.RLock()
	cache, cached := variationVersionUpdateCache[key]
	variationVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			variationVersionColumns,
			variationVersionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update variation_versions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `variation_versions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, variationVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(variationVersionType, variationVersionMapping, append(wl, variationVersionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update variation_versions row")
	}

	if !cached {
		variationVersionUpdateCacheMut.Lock()
		variationVersionUpdateCache[key] = cache
		variationVersionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q variationVersionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q variationVersionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for variation_versions")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o VariationVersionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o VariationVersionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o VariationVersionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VariationVersionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variationVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `variation_versions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variationVersionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in variationVersion slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *VariationVersion) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *VariationVersion) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *VariationVersion) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *VariationVersion) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no variation_versions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(variationVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	variationVersionUpsertCacheMut.RLock()
	cache, cached := variationVersionUpsertCache[key]
	variationVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			variationVersionColumns,
			variationVersionColumnsWithDefault,
			variationVersionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			variationVersionColumns,
			variationVersionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert variation_versions, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "variation_versions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `variation_versions` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(variationVersionType, variationVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(variationVersionType, variationVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for variation_versions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == variationVersionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for variation_versions")
	}

CacheNoHooks:
	if !cached {
		variationVersionUpsertCacheMut.Lock()
		variationVersionUpsertCache[key] = cache
		variationVersionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single VariationVersion record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *VariationVersion) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single VariationVersion record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *VariationVersion) DeleteG() error {
	if o == nil {
		return errors.New("models: no VariationVersion provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single VariationVersion record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *VariationVersion) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single VariationVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VariationVersion) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no VariationVersion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), variationVersionPrimaryKeyMapping)
	sql := "DELETE FROM `variation_versions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from variation_versions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q variationVersionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q variationVersionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no variationVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from variation_versions")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o VariationVersionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o VariationVersionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no VariationVersion slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o VariationVersionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VariationVersionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no VariationVersion slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(variationVersionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variationVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `variation_versions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variationVersionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from variationVersion slice")
	}

	if len(variationVersionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *VariationVersion) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *VariationVersion) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *VariationVersion) ReloadG() error {
	if o == nil {
		return errors.New("models: no VariationVersion provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VariationVersion) Reload(exec boil.Executor) error {
	ret, err := FindVariationVersion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *VariationVersionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *VariationVersionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariationVersionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty VariationVersionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariationVersionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	variationVersions := VariationVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variationVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `variation_versions`.* FROM `variation_versions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, variationVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&variationVersions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VariationVersionSlice")
	}

	*o = variationVersions

	return nil
}

// VariationVersionExists checks if the VariationVersion row exists.
func VariationVersionExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `variation_versions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if variation_versions exists")
	}

	return exists, nil
}

// VariationVersionExistsG checks if the VariationVersion row exists.
func VariationVersionExistsG(id uint64) (bool, error) {
	return VariationVersionExists(boil.GetDB(), id)
}

// VariationVersionExistsGP checks if the VariationVersion row exists. Panics on error.
func VariationVersionExistsGP(id uint64) bool {
	e, err := VariationVersionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// VariationVersionExistsP checks if the VariationVersion row exists. Panics on error.
func VariationVersionExistsP(exec boil.Executor, id uint64) bool {
	e, err := VariationVersionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

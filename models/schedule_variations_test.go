// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testScheduleVariations(t *testing.T) {
	t.Parallel()

	query := ScheduleVariations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testScheduleVariationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = scheduleVariation.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScheduleVariationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ScheduleVariations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testScheduleVariationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ScheduleVariationSlice{scheduleVariation}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testScheduleVariationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ScheduleVariationExists(tx, scheduleVariation.ID)
	if err != nil {
		t.Errorf("Unable to check if ScheduleVariation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ScheduleVariationExistsG to return true, but got false.")
	}
}
func testScheduleVariationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	scheduleVariationFound, err := FindScheduleVariation(tx, scheduleVariation.ID)
	if err != nil {
		t.Error(err)
	}

	if scheduleVariationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testScheduleVariationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ScheduleVariations(tx).Bind(scheduleVariation); err != nil {
		t.Error(err)
	}
}

func testScheduleVariationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ScheduleVariations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testScheduleVariationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariationOne := &ScheduleVariation{}
	scheduleVariationTwo := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariationOne, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleVariationTwo, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = scheduleVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ScheduleVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testScheduleVariationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	scheduleVariationOne := &ScheduleVariation{}
	scheduleVariationTwo := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariationOne, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, scheduleVariationTwo, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = scheduleVariationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func scheduleVariationBeforeInsertHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationAfterInsertHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationAfterSelectHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationBeforeUpdateHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationAfterUpdateHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationBeforeDeleteHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationAfterDeleteHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationBeforeUpsertHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func scheduleVariationAfterUpsertHook(e boil.Executor, o *ScheduleVariation) error {
	*o = ScheduleVariation{}
	return nil
}

func testScheduleVariationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &ScheduleVariation{}
	o := &ScheduleVariation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, scheduleVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation object: %s", err)
	}

	AddScheduleVariationHook(boil.BeforeInsertHook, scheduleVariationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	scheduleVariationBeforeInsertHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.AfterInsertHook, scheduleVariationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	scheduleVariationAfterInsertHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.AfterSelectHook, scheduleVariationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	scheduleVariationAfterSelectHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.BeforeUpdateHook, scheduleVariationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleVariationBeforeUpdateHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.AfterUpdateHook, scheduleVariationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	scheduleVariationAfterUpdateHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.BeforeDeleteHook, scheduleVariationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleVariationBeforeDeleteHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.AfterDeleteHook, scheduleVariationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	scheduleVariationAfterDeleteHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.BeforeUpsertHook, scheduleVariationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleVariationBeforeUpsertHooks = []ScheduleVariationHook{}

	AddScheduleVariationHook(boil.AfterUpsertHook, scheduleVariationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	scheduleVariationAfterUpsertHooks = []ScheduleVariationHook{}
}
func testScheduleVariationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScheduleVariationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx, scheduleVariationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testScheduleVariationToOneScheduleUsingSchedule(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local ScheduleVariation
	var foreign Schedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ScheduleID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Schedule(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ScheduleVariationSlice{&local}
	if err = local.L.LoadSchedule(tx, false, (*[]*ScheduleVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Schedule == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Schedule = nil
	if err = local.L.LoadSchedule(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Schedule == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testScheduleVariationToOneVariationUsingVariation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local ScheduleVariation
	var foreign Variation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, scheduleVariationDBTypes, false, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationDBTypes, false, variationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Variation struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variation(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ScheduleVariationSlice{&local}
	if err = local.L.LoadVariation(tx, false, (*[]*ScheduleVariation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variation = nil
	if err = local.L.LoadVariation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Variation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testScheduleVariationToOneSetOpScheduleUsingSchedule(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ScheduleVariation
	var b, c Schedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleVariationDBTypes, false, strmangle.SetComplement(scheduleVariationPrimaryKeyColumns, scheduleVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Schedule{&b, &c} {
		err = a.SetSchedule(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Schedule != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ScheduleVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ScheduleID != x.ID {
			t.Error("foreign key was wrong value", a.ScheduleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ScheduleID))
		reflect.Indirect(reflect.ValueOf(&a.ScheduleID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ScheduleID != x.ID {
			t.Error("foreign key was wrong value", a.ScheduleID, x.ID)
		}
	}
}
func testScheduleVariationToOneSetOpVariationUsingVariation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a ScheduleVariation
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, scheduleVariationDBTypes, false, strmangle.SetComplement(scheduleVariationPrimaryKeyColumns, scheduleVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Variation{&b, &c} {
		err = a.SetVariation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ScheduleVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationID))
		reflect.Indirect(reflect.ValueOf(&a.VariationID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationID != x.ID {
			t.Error("foreign key was wrong value", a.VariationID, x.ID)
		}
	}
}
func testScheduleVariationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = scheduleVariation.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testScheduleVariationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ScheduleVariationSlice{scheduleVariation}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testScheduleVariationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ScheduleVariations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	scheduleVariationDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `OrderNumber`: `int`, `ScheduleID`: `bigint`, `VariationID`: `bigint`}
	_                        = bytes.MinRead
)

func testScheduleVariationsUpdate(t *testing.T) {
	t.Parallel()

	if len(scheduleVariationColumns) == len(scheduleVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	if err = scheduleVariation.Update(tx); err != nil {
		t.Error(err)
	}
}

func testScheduleVariationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(scheduleVariationColumns) == len(scheduleVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	scheduleVariation := &ScheduleVariation{}
	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, scheduleVariation, scheduleVariationDBTypes, true, scheduleVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(scheduleVariationColumns, scheduleVariationPrimaryKeyColumns) {
		fields = scheduleVariationColumns
	} else {
		fields = strmangle.SetComplement(
			scheduleVariationColumns,
			scheduleVariationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(scheduleVariation))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ScheduleVariationSlice{scheduleVariation}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testScheduleVariationsUpsert(t *testing.T) {
	t.Parallel()

	if len(scheduleVariationColumns) == len(scheduleVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	scheduleVariation := ScheduleVariation{}
	if err = randomize.Struct(seed, &scheduleVariation, scheduleVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = scheduleVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert ScheduleVariation: %s", err)
	}

	count, err := ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &scheduleVariation, scheduleVariationDBTypes, false, scheduleVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ScheduleVariation struct: %s", err)
	}

	if err = scheduleVariation.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert ScheduleVariation: %s", err)
	}

	count, err = ScheduleVariations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

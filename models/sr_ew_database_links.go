// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SREwDatabaseLink is an object representing the database table.
type SREwDatabaseLink struct {
	ID               uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	SRID             uint64 `boil:"sr_id" json:"sr_id" toml:"sr_id" yaml:"sr_id"`
	EwDatabaseID     uint64 `boil:"ew_database_id" json:"ew_database_id" toml:"ew_database_id" yaml:"ew_database_id"`
	EwDatabaseSongID uint64 `boil:"ew_database_song_id" json:"ew_database_song_id" toml:"ew_database_song_id" yaml:"ew_database_song_id"`
	VariationID      uint64 `boil:"variation_id" json:"variation_id" toml:"variation_id" yaml:"variation_id"`
	Version          uint   `boil:"version" json:"version" toml:"version" yaml:"version"`
	Author           string `boil:"author" json:"author" toml:"author" yaml:"author"`
	Copyright        string `boil:"copyright" json:"copyright" toml:"copyright" yaml:"copyright"`
	Operation        int8   `boil:"operation" json:"operation" toml:"operation" yaml:"operation"`

	R *srEwDatabaseLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L srEwDatabaseLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SREwDatabaseLinkColumns = struct {
	ID               string
	SRID             string
	EwDatabaseID     string
	EwDatabaseSongID string
	VariationID      string
	Version          string
	Author           string
	Copyright        string
	Operation        string
}{
	ID:               "id",
	SRID:             "sr_id",
	EwDatabaseID:     "ew_database_id",
	EwDatabaseSongID: "ew_database_song_id",
	VariationID:      "variation_id",
	Version:          "version",
	Author:           "author",
	Copyright:        "copyright",
	Operation:        "operation",
}

// srEwDatabaseLinkR is where relationships are stored.
type srEwDatabaseLinkR struct {
	SR         *SynchronizationRaport
	EwDatabase *EwDatabase
	Variation  *Variation
}

// srEwDatabaseLinkL is where Load methods for each relationship are stored.
type srEwDatabaseLinkL struct{}

var (
	srEwDatabaseLinkColumns               = []string{"id", "sr_id", "ew_database_id", "ew_database_song_id", "variation_id", "version", "author", "copyright", "operation"}
	srEwDatabaseLinkColumnsWithoutDefault = []string{"sr_id", "ew_database_id", "ew_database_song_id", "variation_id", "author", "copyright", "operation"}
	srEwDatabaseLinkColumnsWithDefault    = []string{"id", "version"}
	srEwDatabaseLinkPrimaryKeyColumns     = []string{"id"}
)

type (
	// SREwDatabaseLinkSlice is an alias for a slice of pointers to SREwDatabaseLink.
	// This should generally be used opposed to []SREwDatabaseLink.
	SREwDatabaseLinkSlice []*SREwDatabaseLink
	// SREwDatabaseLinkHook is the signature for custom SREwDatabaseLink hook methods
	SREwDatabaseLinkHook func(boil.Executor, *SREwDatabaseLink) error

	srEwDatabaseLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	srEwDatabaseLinkType                 = reflect.TypeOf(&SREwDatabaseLink{})
	srEwDatabaseLinkMapping              = queries.MakeStructMapping(srEwDatabaseLinkType)
	srEwDatabaseLinkPrimaryKeyMapping, _ = queries.BindMapping(srEwDatabaseLinkType, srEwDatabaseLinkMapping, srEwDatabaseLinkPrimaryKeyColumns)
	srEwDatabaseLinkInsertCacheMut       sync.RWMutex
	srEwDatabaseLinkInsertCache          = make(map[string]insertCache)
	srEwDatabaseLinkUpdateCacheMut       sync.RWMutex
	srEwDatabaseLinkUpdateCache          = make(map[string]updateCache)
	srEwDatabaseLinkUpsertCacheMut       sync.RWMutex
	srEwDatabaseLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var srEwDatabaseLinkBeforeInsertHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkBeforeUpdateHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkBeforeDeleteHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkBeforeUpsertHooks []SREwDatabaseLinkHook

var srEwDatabaseLinkAfterInsertHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkAfterSelectHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkAfterUpdateHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkAfterDeleteHooks []SREwDatabaseLinkHook
var srEwDatabaseLinkAfterUpsertHooks []SREwDatabaseLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SREwDatabaseLink) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SREwDatabaseLink) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SREwDatabaseLink) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SREwDatabaseLink) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SREwDatabaseLink) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SREwDatabaseLink) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SREwDatabaseLink) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SREwDatabaseLink) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SREwDatabaseLink) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwDatabaseLinkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSREwDatabaseLinkHook registers your hook function for all future operations.
func AddSREwDatabaseLinkHook(hookPoint boil.HookPoint, srEwDatabaseLinkHook SREwDatabaseLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		srEwDatabaseLinkBeforeInsertHooks = append(srEwDatabaseLinkBeforeInsertHooks, srEwDatabaseLinkHook)
	case boil.BeforeUpdateHook:
		srEwDatabaseLinkBeforeUpdateHooks = append(srEwDatabaseLinkBeforeUpdateHooks, srEwDatabaseLinkHook)
	case boil.BeforeDeleteHook:
		srEwDatabaseLinkBeforeDeleteHooks = append(srEwDatabaseLinkBeforeDeleteHooks, srEwDatabaseLinkHook)
	case boil.BeforeUpsertHook:
		srEwDatabaseLinkBeforeUpsertHooks = append(srEwDatabaseLinkBeforeUpsertHooks, srEwDatabaseLinkHook)
	case boil.AfterInsertHook:
		srEwDatabaseLinkAfterInsertHooks = append(srEwDatabaseLinkAfterInsertHooks, srEwDatabaseLinkHook)
	case boil.AfterSelectHook:
		srEwDatabaseLinkAfterSelectHooks = append(srEwDatabaseLinkAfterSelectHooks, srEwDatabaseLinkHook)
	case boil.AfterUpdateHook:
		srEwDatabaseLinkAfterUpdateHooks = append(srEwDatabaseLinkAfterUpdateHooks, srEwDatabaseLinkHook)
	case boil.AfterDeleteHook:
		srEwDatabaseLinkAfterDeleteHooks = append(srEwDatabaseLinkAfterDeleteHooks, srEwDatabaseLinkHook)
	case boil.AfterUpsertHook:
		srEwDatabaseLinkAfterUpsertHooks = append(srEwDatabaseLinkAfterUpsertHooks, srEwDatabaseLinkHook)
	}
}

// OneP returns a single srEwDatabaseLink record from the query, and panics on error.
func (q srEwDatabaseLinkQuery) OneP() *SREwDatabaseLink {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single srEwDatabaseLink record from the query.
func (q srEwDatabaseLinkQuery) One() (*SREwDatabaseLink, error) {
	o := &SREwDatabaseLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sr_ew_database_links")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SREwDatabaseLink records from the query, and panics on error.
func (q srEwDatabaseLinkQuery) AllP() SREwDatabaseLinkSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SREwDatabaseLink records from the query.
func (q srEwDatabaseLinkQuery) All() (SREwDatabaseLinkSlice, error) {
	var o []*SREwDatabaseLink

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SREwDatabaseLink slice")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SREwDatabaseLink records in the query, and panics on error.
func (q srEwDatabaseLinkQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SREwDatabaseLink records in the query.
func (q srEwDatabaseLinkQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sr_ew_database_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q srEwDatabaseLinkQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q srEwDatabaseLinkQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sr_ew_database_links exists")
	}

	return count > 0, nil
}

// SRG pointed to by the foreign key.
func (o *SREwDatabaseLink) SRG(mods ...qm.QueryMod) synchronizationRaportQuery {
	return o.SR(boil.GetDB(), mods...)
}

// SR pointed to by the foreign key.
func (o *SREwDatabaseLink) SR(exec boil.Executor, mods ...qm.QueryMod) synchronizationRaportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SRID),
	}

	queryMods = append(queryMods, mods...)

	query := SynchronizationRaports(exec, queryMods...)
	queries.SetFrom(query.Query, "`synchronization_raports`")

	return query
}

// EwDatabaseG pointed to by the foreign key.
func (o *SREwDatabaseLink) EwDatabaseG(mods ...qm.QueryMod) ewDatabaseQuery {
	return o.EwDatabase(boil.GetDB(), mods...)
}

// EwDatabase pointed to by the foreign key.
func (o *SREwDatabaseLink) EwDatabase(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EwDatabaseID),
	}

	queryMods = append(queryMods, mods...)

	query := EwDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_databases`")

	return query
}

// VariationG pointed to by the foreign key.
func (o *SREwDatabaseLink) VariationG(mods ...qm.QueryMod) variationQuery {
	return o.Variation(boil.GetDB(), mods...)
}

// Variation pointed to by the foreign key.
func (o *SREwDatabaseLink) Variation(exec boil.Executor, mods ...qm.QueryMod) variationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationID),
	}

	queryMods = append(queryMods, mods...)

	query := Variations(exec, queryMods...)
	queries.SetFrom(query.Query, "`variations`")

	return query
} // LoadSR allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwDatabaseLinkL) LoadSR(e boil.Executor, singular bool, maybeSREwDatabaseLink interface{}) error {
	var slice []*SREwDatabaseLink
	var object *SREwDatabaseLink

	count := 1
	if singular {
		object = maybeSREwDatabaseLink.(*SREwDatabaseLink)
	} else {
		slice = *maybeSREwDatabaseLink.(*[]*SREwDatabaseLink)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwDatabaseLinkR{}
		}
		args[0] = object.SRID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwDatabaseLinkR{}
			}
			args[i] = obj.SRID
		}
	}

	query := fmt.Sprintf(
		"select * from `synchronization_raports` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SynchronizationRaport")
	}
	defer results.Close()

	var resultSlice []*SynchronizationRaport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SynchronizationRaport")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SR = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRID == foreign.ID {
				local.R.SR = foreign
				break
			}
		}
	}

	return nil
}

// LoadEwDatabase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwDatabaseLinkL) LoadEwDatabase(e boil.Executor, singular bool, maybeSREwDatabaseLink interface{}) error {
	var slice []*SREwDatabaseLink
	var object *SREwDatabaseLink

	count := 1
	if singular {
		object = maybeSREwDatabaseLink.(*SREwDatabaseLink)
	} else {
		slice = *maybeSREwDatabaseLink.(*[]*SREwDatabaseLink)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwDatabaseLinkR{}
		}
		args[0] = object.EwDatabaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwDatabaseLinkR{}
			}
			args[i] = obj.EwDatabaseID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_databases` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EwDatabase")
	}
	defer results.Close()

	var resultSlice []*EwDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EwDatabase")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.EwDatabase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EwDatabaseID == foreign.ID {
				local.R.EwDatabase = foreign
				break
			}
		}
	}

	return nil
}

// LoadVariation allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwDatabaseLinkL) LoadVariation(e boil.Executor, singular bool, maybeSREwDatabaseLink interface{}) error {
	var slice []*SREwDatabaseLink
	var object *SREwDatabaseLink

	count := 1
	if singular {
		object = maybeSREwDatabaseLink.(*SREwDatabaseLink)
	} else {
		slice = *maybeSREwDatabaseLink.(*[]*SREwDatabaseLink)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwDatabaseLinkR{}
		}
		args[0] = object.VariationID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwDatabaseLinkR{}
			}
			args[i] = obj.VariationID
		}
	}

	query := fmt.Sprintf(
		"select * from `variations` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Variation")
	}
	defer results.Close()

	var resultSlice []*Variation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Variation")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Variation = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationID == foreign.ID {
				local.R.Variation = foreign
				break
			}
		}
	}

	return nil
}

// SetSRG of the sr_ew_database_link to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwDatabaseLinks.
// Uses the global database handle.
func (o *SREwDatabaseLink) SetSRG(insert bool, related *SynchronizationRaport) error {
	return o.SetSR(boil.GetDB(), insert, related)
}

// SetSRP of the sr_ew_database_link to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwDatabaseLinks.
// Panics on error.
func (o *SREwDatabaseLink) SetSRP(exec boil.Executor, insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSRGP of the sr_ew_database_link to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwDatabaseLinks.
// Uses the global database handle and panics on error.
func (o *SREwDatabaseLink) SetSRGP(insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSR of the sr_ew_database_link to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwDatabaseLinks.
func (o *SREwDatabaseLink) SetSR(exec boil.Executor, insert bool, related *SynchronizationRaport) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
		strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRID = related.ID

	if o.R == nil {
		o.R = &srEwDatabaseLinkR{
			SR: related,
		}
	} else {
		o.R.SR = related
	}

	if related.R == nil {
		related.R = &synchronizationRaportR{
			SRSREwDatabaseLinks: SREwDatabaseLinkSlice{o},
		}
	} else {
		related.R.SRSREwDatabaseLinks = append(related.R.SRSREwDatabaseLinks, o)
	}

	return nil
}

// SetEwDatabaseG of the sr_ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwDatabaseLinks.
// Uses the global database handle.
func (o *SREwDatabaseLink) SetEwDatabaseG(insert bool, related *EwDatabase) error {
	return o.SetEwDatabase(boil.GetDB(), insert, related)
}

// SetEwDatabaseP of the sr_ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwDatabaseLinks.
// Panics on error.
func (o *SREwDatabaseLink) SetEwDatabaseP(exec boil.Executor, insert bool, related *EwDatabase) {
	if err := o.SetEwDatabase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabaseGP of the sr_ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwDatabaseLinks.
// Uses the global database handle and panics on error.
func (o *SREwDatabaseLink) SetEwDatabaseGP(insert bool, related *EwDatabase) {
	if err := o.SetEwDatabase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabase of the sr_ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.SREwDatabaseLinks.
func (o *SREwDatabaseLink) SetEwDatabase(exec boil.Executor, insert bool, related *EwDatabase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ew_database_id"}),
		strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EwDatabaseID = related.ID

	if o.R == nil {
		o.R = &srEwDatabaseLinkR{
			EwDatabase: related,
		}
	} else {
		o.R.EwDatabase = related
	}

	if related.R == nil {
		related.R = &ewDatabaseR{
			SREwDatabaseLinks: SREwDatabaseLinkSlice{o},
		}
	} else {
		related.R.SREwDatabaseLinks = append(related.R.SREwDatabaseLinks, o)
	}

	return nil
}

// SetVariationG of the sr_ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SREwDatabaseLinks.
// Uses the global database handle.
func (o *SREwDatabaseLink) SetVariationG(insert bool, related *Variation) error {
	return o.SetVariation(boil.GetDB(), insert, related)
}

// SetVariationP of the sr_ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SREwDatabaseLinks.
// Panics on error.
func (o *SREwDatabaseLink) SetVariationP(exec boil.Executor, insert bool, related *Variation) {
	if err := o.SetVariation(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationGP of the sr_ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SREwDatabaseLinks.
// Uses the global database handle and panics on error.
func (o *SREwDatabaseLink) SetVariationGP(insert bool, related *Variation) {
	if err := o.SetVariation(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariation of the sr_ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SREwDatabaseLinks.
func (o *SREwDatabaseLink) SetVariation(exec boil.Executor, insert bool, related *Variation) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
		strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationID = related.ID

	if o.R == nil {
		o.R = &srEwDatabaseLinkR{
			Variation: related,
		}
	} else {
		o.R.Variation = related
	}

	if related.R == nil {
		related.R = &variationR{
			SREwDatabaseLinks: SREwDatabaseLinkSlice{o},
		}
	} else {
		related.R.SREwDatabaseLinks = append(related.R.SREwDatabaseLinks, o)
	}

	return nil
}

// SREwDatabaseLinksG retrieves all records.
func SREwDatabaseLinksG(mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	return SREwDatabaseLinks(boil.GetDB(), mods...)
}

// SREwDatabaseLinks retrieves all the records using an executor.
func SREwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	mods = append(mods, qm.From("`sr_ew_database_links`"))
	return srEwDatabaseLinkQuery{NewQuery(exec, mods...)}
}

// FindSREwDatabaseLinkG retrieves a single record by ID.
func FindSREwDatabaseLinkG(id uint64, selectCols ...string) (*SREwDatabaseLink, error) {
	return FindSREwDatabaseLink(boil.GetDB(), id, selectCols...)
}

// FindSREwDatabaseLinkGP retrieves a single record by ID, and panics on error.
func FindSREwDatabaseLinkGP(id uint64, selectCols ...string) *SREwDatabaseLink {
	retobj, err := FindSREwDatabaseLink(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSREwDatabaseLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSREwDatabaseLink(exec boil.Executor, id uint64, selectCols ...string) (*SREwDatabaseLink, error) {
	srEwDatabaseLinkObj := &SREwDatabaseLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sr_ew_database_links` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(srEwDatabaseLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sr_ew_database_links")
	}

	return srEwDatabaseLinkObj, nil
}

// FindSREwDatabaseLinkP retrieves a single record by ID with an executor, and panics on error.
func FindSREwDatabaseLinkP(exec boil.Executor, id uint64, selectCols ...string) *SREwDatabaseLink {
	retobj, err := FindSREwDatabaseLink(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SREwDatabaseLink) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SREwDatabaseLink) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SREwDatabaseLink) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SREwDatabaseLink) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_ew_database_links provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srEwDatabaseLinkColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	srEwDatabaseLinkInsertCacheMut.RLock()
	cache, cached := srEwDatabaseLinkInsertCache[key]
	srEwDatabaseLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			srEwDatabaseLinkColumns,
			srEwDatabaseLinkColumnsWithDefault,
			srEwDatabaseLinkColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(srEwDatabaseLinkType, srEwDatabaseLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(srEwDatabaseLinkType, srEwDatabaseLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sr_ew_database_links` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sr_ew_database_links` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sr_ew_database_links` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sr_ew_database_links")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srEwDatabaseLinkMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_ew_database_links")
	}

CacheNoHooks:
	if !cached {
		srEwDatabaseLinkInsertCacheMut.Lock()
		srEwDatabaseLinkInsertCache[key] = cache
		srEwDatabaseLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SREwDatabaseLink record. See Update for
// whitelist behavior description.
func (o *SREwDatabaseLink) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SREwDatabaseLink record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SREwDatabaseLink) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SREwDatabaseLink, and panics on error.
// See Update for whitelist behavior description.
func (o *SREwDatabaseLink) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SREwDatabaseLink.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SREwDatabaseLink) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	srEwDatabaseLinkUpdateCacheMut.RLock()
	cache, cached := srEwDatabaseLinkUpdateCache[key]
	srEwDatabaseLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			srEwDatabaseLinkColumns,
			srEwDatabaseLinkPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sr_ew_database_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sr_ew_database_links` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(srEwDatabaseLinkType, srEwDatabaseLinkMapping, append(wl, srEwDatabaseLinkPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sr_ew_database_links row")
	}

	if !cached {
		srEwDatabaseLinkUpdateCacheMut.Lock()
		srEwDatabaseLinkUpdateCache[key] = cache
		srEwDatabaseLinkUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q srEwDatabaseLinkQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q srEwDatabaseLinkQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sr_ew_database_links")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SREwDatabaseLinkSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SREwDatabaseLinkSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SREwDatabaseLinkSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SREwDatabaseLinkSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwDatabaseLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sr_ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwDatabaseLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in srEwDatabaseLink slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SREwDatabaseLink) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SREwDatabaseLink) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SREwDatabaseLink) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SREwDatabaseLink) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_ew_database_links provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srEwDatabaseLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	srEwDatabaseLinkUpsertCacheMut.RLock()
	cache, cached := srEwDatabaseLinkUpsertCache[key]
	srEwDatabaseLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			srEwDatabaseLinkColumns,
			srEwDatabaseLinkColumnsWithDefault,
			srEwDatabaseLinkColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			srEwDatabaseLinkColumns,
			srEwDatabaseLinkPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sr_ew_database_links, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "sr_ew_database_links", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sr_ew_database_links` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(srEwDatabaseLinkType, srEwDatabaseLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(srEwDatabaseLinkType, srEwDatabaseLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sr_ew_database_links")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srEwDatabaseLinkMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_ew_database_links")
	}

CacheNoHooks:
	if !cached {
		srEwDatabaseLinkUpsertCacheMut.Lock()
		srEwDatabaseLinkUpsertCache[key] = cache
		srEwDatabaseLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SREwDatabaseLink record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SREwDatabaseLink) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SREwDatabaseLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SREwDatabaseLink) DeleteG() error {
	if o == nil {
		return errors.New("models: no SREwDatabaseLink provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SREwDatabaseLink record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SREwDatabaseLink) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SREwDatabaseLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SREwDatabaseLink) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SREwDatabaseLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), srEwDatabaseLinkPrimaryKeyMapping)
	sql := "DELETE FROM `sr_ew_database_links` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sr_ew_database_links")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q srEwDatabaseLinkQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q srEwDatabaseLinkQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no srEwDatabaseLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sr_ew_database_links")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SREwDatabaseLinkSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SREwDatabaseLinkSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SREwDatabaseLink slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SREwDatabaseLinkSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SREwDatabaseLinkSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SREwDatabaseLink slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(srEwDatabaseLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwDatabaseLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sr_ew_database_links` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwDatabaseLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from srEwDatabaseLink slice")
	}

	if len(srEwDatabaseLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SREwDatabaseLink) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SREwDatabaseLink) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SREwDatabaseLink) ReloadG() error {
	if o == nil {
		return errors.New("models: no SREwDatabaseLink provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SREwDatabaseLink) Reload(exec boil.Executor) error {
	ret, err := FindSREwDatabaseLink(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SREwDatabaseLinkSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SREwDatabaseLinkSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SREwDatabaseLinkSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SREwDatabaseLinkSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SREwDatabaseLinkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	srEwDatabaseLinks := SREwDatabaseLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwDatabaseLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sr_ew_database_links`.* FROM `sr_ew_database_links` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwDatabaseLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&srEwDatabaseLinks)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SREwDatabaseLinkSlice")
	}

	*o = srEwDatabaseLinks

	return nil
}

// SREwDatabaseLinkExists checks if the SREwDatabaseLink row exists.
func SREwDatabaseLinkExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sr_ew_database_links` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sr_ew_database_links exists")
	}

	return exists, nil
}

// SREwDatabaseLinkExistsG checks if the SREwDatabaseLink row exists.
func SREwDatabaseLinkExistsG(id uint64) (bool, error) {
	return SREwDatabaseLinkExists(boil.GetDB(), id)
}

// SREwDatabaseLinkExistsGP checks if the SREwDatabaseLink row exists. Panics on error.
func SREwDatabaseLinkExistsGP(id uint64) bool {
	e, err := SREwDatabaseLinkExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SREwDatabaseLinkExistsP checks if the SREwDatabaseLink row exists. Panics on error.
func SREwDatabaseLinkExistsP(exec boil.Executor, id uint64) bool {
	e, err := SREwDatabaseLinkExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// EventSchedule is an object representing the database table.
type EventSchedule struct {
	ID         uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ScheduleID uint64    `boil:"schedule_id" json:"schedule_id" toml:"schedule_id" yaml:"schedule_id"`
	EventID    uint64    `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	CreatedAt  null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	DeletedAt  null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *eventScheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventScheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventScheduleColumns = struct {
	ID         string
	ScheduleID string
	EventID    string
	CreatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	ScheduleID: "schedule_id",
	EventID:    "event_id",
	CreatedAt:  "created_at",
	DeletedAt:  "deleted_at",
}

// eventScheduleR is where relationships are stored.
type eventScheduleR struct {
	Schedule *Schedule
	Event    *Event
}

// eventScheduleL is where Load methods for each relationship are stored.
type eventScheduleL struct{}

var (
	eventScheduleColumns               = []string{"id", "schedule_id", "event_id", "created_at", "deleted_at"}
	eventScheduleColumnsWithoutDefault = []string{"schedule_id", "event_id", "created_at", "deleted_at"}
	eventScheduleColumnsWithDefault    = []string{"id"}
	eventSchedulePrimaryKeyColumns     = []string{"id"}
)

type (
	// EventScheduleSlice is an alias for a slice of pointers to EventSchedule.
	// This should generally be used opposed to []EventSchedule.
	EventScheduleSlice []*EventSchedule
	// EventScheduleHook is the signature for custom EventSchedule hook methods
	EventScheduleHook func(boil.Executor, *EventSchedule) error

	eventScheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventScheduleType                 = reflect.TypeOf(&EventSchedule{})
	eventScheduleMapping              = queries.MakeStructMapping(eventScheduleType)
	eventSchedulePrimaryKeyMapping, _ = queries.BindMapping(eventScheduleType, eventScheduleMapping, eventSchedulePrimaryKeyColumns)
	eventScheduleInsertCacheMut       sync.RWMutex
	eventScheduleInsertCache          = make(map[string]insertCache)
	eventScheduleUpdateCacheMut       sync.RWMutex
	eventScheduleUpdateCache          = make(map[string]updateCache)
	eventScheduleUpsertCacheMut       sync.RWMutex
	eventScheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var eventScheduleBeforeInsertHooks []EventScheduleHook
var eventScheduleBeforeUpdateHooks []EventScheduleHook
var eventScheduleBeforeDeleteHooks []EventScheduleHook
var eventScheduleBeforeUpsertHooks []EventScheduleHook

var eventScheduleAfterInsertHooks []EventScheduleHook
var eventScheduleAfterSelectHooks []EventScheduleHook
var eventScheduleAfterUpdateHooks []EventScheduleHook
var eventScheduleAfterDeleteHooks []EventScheduleHook
var eventScheduleAfterUpsertHooks []EventScheduleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventSchedule) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventSchedule) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventSchedule) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventSchedule) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventSchedule) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventSchedule) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventSchedule) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventSchedule) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventSchedule) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventScheduleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventScheduleHook registers your hook function for all future operations.
func AddEventScheduleHook(hookPoint boil.HookPoint, eventScheduleHook EventScheduleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		eventScheduleBeforeInsertHooks = append(eventScheduleBeforeInsertHooks, eventScheduleHook)
	case boil.BeforeUpdateHook:
		eventScheduleBeforeUpdateHooks = append(eventScheduleBeforeUpdateHooks, eventScheduleHook)
	case boil.BeforeDeleteHook:
		eventScheduleBeforeDeleteHooks = append(eventScheduleBeforeDeleteHooks, eventScheduleHook)
	case boil.BeforeUpsertHook:
		eventScheduleBeforeUpsertHooks = append(eventScheduleBeforeUpsertHooks, eventScheduleHook)
	case boil.AfterInsertHook:
		eventScheduleAfterInsertHooks = append(eventScheduleAfterInsertHooks, eventScheduleHook)
	case boil.AfterSelectHook:
		eventScheduleAfterSelectHooks = append(eventScheduleAfterSelectHooks, eventScheduleHook)
	case boil.AfterUpdateHook:
		eventScheduleAfterUpdateHooks = append(eventScheduleAfterUpdateHooks, eventScheduleHook)
	case boil.AfterDeleteHook:
		eventScheduleAfterDeleteHooks = append(eventScheduleAfterDeleteHooks, eventScheduleHook)
	case boil.AfterUpsertHook:
		eventScheduleAfterUpsertHooks = append(eventScheduleAfterUpsertHooks, eventScheduleHook)
	}
}

// OneP returns a single eventSchedule record from the query, and panics on error.
func (q eventScheduleQuery) OneP() *EventSchedule {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single eventSchedule record from the query.
func (q eventScheduleQuery) One() (*EventSchedule, error) {
	o := &EventSchedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_schedules")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all EventSchedule records from the query, and panics on error.
func (q eventScheduleQuery) AllP() EventScheduleSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all EventSchedule records from the query.
func (q eventScheduleQuery) All() (EventScheduleSlice, error) {
	var o []*EventSchedule

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventSchedule slice")
	}

	if len(eventScheduleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all EventSchedule records in the query, and panics on error.
func (q eventScheduleQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all EventSchedule records in the query.
func (q eventScheduleQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_schedules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q eventScheduleQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q eventScheduleQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_schedules exists")
	}

	return count > 0, nil
}

// ScheduleG pointed to by the foreign key.
func (o *EventSchedule) ScheduleG(mods ...qm.QueryMod) scheduleQuery {
	return o.Schedule(boil.GetDB(), mods...)
}

// Schedule pointed to by the foreign key.
func (o *EventSchedule) Schedule(exec boil.Executor, mods ...qm.QueryMod) scheduleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ScheduleID),
	}

	queryMods = append(queryMods, mods...)

	query := Schedules(exec, queryMods...)
	queries.SetFrom(query.Query, "`schedules`")

	return query
}

// EventG pointed to by the foreign key.
func (o *EventSchedule) EventG(mods ...qm.QueryMod) eventQuery {
	return o.Event(boil.GetDB(), mods...)
}

// Event pointed to by the foreign key.
func (o *EventSchedule) Event(exec boil.Executor, mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	query := Events(exec, queryMods...)
	queries.SetFrom(query.Query, "`events`")

	return query
} // LoadSchedule allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (eventScheduleL) LoadSchedule(e boil.Executor, singular bool, maybeEventSchedule interface{}) error {
	var slice []*EventSchedule
	var object *EventSchedule

	count := 1
	if singular {
		object = maybeEventSchedule.(*EventSchedule)
	} else {
		slice = *maybeEventSchedule.(*[]*EventSchedule)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &eventScheduleR{}
		}
		args[0] = object.ScheduleID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &eventScheduleR{}
			}
			args[i] = obj.ScheduleID
		}
	}

	query := fmt.Sprintf(
		"select * from `schedules` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Schedule")
	}
	defer results.Close()

	var resultSlice []*Schedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Schedule")
	}

	if len(eventScheduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Schedule = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ScheduleID == foreign.ID {
				local.R.Schedule = foreign
				break
			}
		}
	}

	return nil
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (eventScheduleL) LoadEvent(e boil.Executor, singular bool, maybeEventSchedule interface{}) error {
	var slice []*EventSchedule
	var object *EventSchedule

	count := 1
	if singular {
		object = maybeEventSchedule.(*EventSchedule)
	} else {
		slice = *maybeEventSchedule.(*[]*EventSchedule)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &eventScheduleR{}
		}
		args[0] = object.EventID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &eventScheduleR{}
			}
			args[i] = obj.EventID
		}
	}

	query := fmt.Sprintf(
		"select * from `events` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}
	defer results.Close()

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if len(eventScheduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Event = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				break
			}
		}
	}

	return nil
}

// SetScheduleG of the event_schedule to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.EventSchedules.
// Uses the global database handle.
func (o *EventSchedule) SetScheduleG(insert bool, related *Schedule) error {
	return o.SetSchedule(boil.GetDB(), insert, related)
}

// SetScheduleP of the event_schedule to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.EventSchedules.
// Panics on error.
func (o *EventSchedule) SetScheduleP(exec boil.Executor, insert bool, related *Schedule) {
	if err := o.SetSchedule(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetScheduleGP of the event_schedule to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.EventSchedules.
// Uses the global database handle and panics on error.
func (o *EventSchedule) SetScheduleGP(insert bool, related *Schedule) {
	if err := o.SetSchedule(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSchedule of the event_schedule to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.EventSchedules.
func (o *EventSchedule) SetSchedule(exec boil.Executor, insert bool, related *Schedule) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `event_schedules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"schedule_id"}),
		strmangle.WhereClause("`", "`", 0, eventSchedulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ScheduleID = related.ID

	if o.R == nil {
		o.R = &eventScheduleR{
			Schedule: related,
		}
	} else {
		o.R.Schedule = related
	}

	if related.R == nil {
		related.R = &scheduleR{
			EventSchedules: EventScheduleSlice{o},
		}
	} else {
		related.R.EventSchedules = append(related.R.EventSchedules, o)
	}

	return nil
}

// SetEventG of the event_schedule to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventSchedules.
// Uses the global database handle.
func (o *EventSchedule) SetEventG(insert bool, related *Event) error {
	return o.SetEvent(boil.GetDB(), insert, related)
}

// SetEventP of the event_schedule to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventSchedules.
// Panics on error.
func (o *EventSchedule) SetEventP(exec boil.Executor, insert bool, related *Event) {
	if err := o.SetEvent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEventGP of the event_schedule to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventSchedules.
// Uses the global database handle and panics on error.
func (o *EventSchedule) SetEventGP(insert bool, related *Event) {
	if err := o.SetEvent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEvent of the event_schedule to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventSchedules.
func (o *EventSchedule) SetEvent(exec boil.Executor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `event_schedules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"event_id"}),
		strmangle.WhereClause("`", "`", 0, eventSchedulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID

	if o.R == nil {
		o.R = &eventScheduleR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			EventSchedules: EventScheduleSlice{o},
		}
	} else {
		related.R.EventSchedules = append(related.R.EventSchedules, o)
	}

	return nil
}

// EventSchedulesG retrieves all records.
func EventSchedulesG(mods ...qm.QueryMod) eventScheduleQuery {
	return EventSchedules(boil.GetDB(), mods...)
}

// EventSchedules retrieves all the records using an executor.
func EventSchedules(exec boil.Executor, mods ...qm.QueryMod) eventScheduleQuery {
	mods = append(mods, qm.From("`event_schedules`"))
	return eventScheduleQuery{NewQuery(exec, mods...)}
}

// FindEventScheduleG retrieves a single record by ID.
func FindEventScheduleG(id uint64, selectCols ...string) (*EventSchedule, error) {
	return FindEventSchedule(boil.GetDB(), id, selectCols...)
}

// FindEventScheduleGP retrieves a single record by ID, and panics on error.
func FindEventScheduleGP(id uint64, selectCols ...string) *EventSchedule {
	retobj, err := FindEventSchedule(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEventSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventSchedule(exec boil.Executor, id uint64, selectCols ...string) (*EventSchedule, error) {
	eventScheduleObj := &EventSchedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `event_schedules` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(eventScheduleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_schedules")
	}

	return eventScheduleObj, nil
}

// FindEventScheduleP retrieves a single record by ID with an executor, and panics on error.
func FindEventScheduleP(exec boil.Executor, id uint64, selectCols ...string) *EventSchedule {
	retobj, err := FindEventSchedule(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EventSchedule) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *EventSchedule) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *EventSchedule) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *EventSchedule) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no event_schedules provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventScheduleColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	eventScheduleInsertCacheMut.RLock()
	cache, cached := eventScheduleInsertCache[key]
	eventScheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			eventScheduleColumns,
			eventScheduleColumnsWithDefault,
			eventScheduleColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(eventScheduleType, eventScheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventScheduleType, eventScheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `event_schedules` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `event_schedules` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `event_schedules` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, eventSchedulePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_schedules")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == eventScheduleMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for event_schedules")
	}

CacheNoHooks:
	if !cached {
		eventScheduleInsertCacheMut.Lock()
		eventScheduleInsertCache[key] = cache
		eventScheduleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single EventSchedule record. See Update for
// whitelist behavior description.
func (o *EventSchedule) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single EventSchedule record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *EventSchedule) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the EventSchedule, and panics on error.
// See Update for whitelist behavior description.
func (o *EventSchedule) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the EventSchedule.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *EventSchedule) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	eventScheduleUpdateCacheMut.RLock()
	cache, cached := eventScheduleUpdateCache[key]
	eventScheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			eventScheduleColumns,
			eventSchedulePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update event_schedules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `event_schedules` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, eventSchedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventScheduleType, eventScheduleMapping, append(wl, eventSchedulePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update event_schedules row")
	}

	if !cached {
		eventScheduleUpdateCacheMut.Lock()
		eventScheduleUpdateCache[key] = cache
		eventScheduleUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q eventScheduleQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q eventScheduleQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for event_schedules")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EventScheduleSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o EventScheduleSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o EventScheduleSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventScheduleSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `event_schedules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, eventSchedulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in eventSchedule slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EventSchedule) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *EventSchedule) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *EventSchedule) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *EventSchedule) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no event_schedules provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventScheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventScheduleUpsertCacheMut.RLock()
	cache, cached := eventScheduleUpsertCache[key]
	eventScheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			eventScheduleColumns,
			eventScheduleColumnsWithDefault,
			eventScheduleColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			eventScheduleColumns,
			eventSchedulePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert event_schedules, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "event_schedules", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `event_schedules` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(eventScheduleType, eventScheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventScheduleType, eventScheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for event_schedules")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == eventScheduleMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for event_schedules")
	}

CacheNoHooks:
	if !cached {
		eventScheduleUpsertCacheMut.Lock()
		eventScheduleUpsertCache[key] = cache
		eventScheduleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single EventSchedule record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *EventSchedule) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single EventSchedule record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EventSchedule) DeleteG() error {
	if o == nil {
		return errors.New("models: no EventSchedule provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single EventSchedule record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *EventSchedule) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single EventSchedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventSchedule) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no EventSchedule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventSchedulePrimaryKeyMapping)
	sql := "DELETE FROM `event_schedules` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from event_schedules")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q eventScheduleQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q eventScheduleQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no eventScheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from event_schedules")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o EventScheduleSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o EventScheduleSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no EventSchedule slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o EventScheduleSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventScheduleSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no EventSchedule slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(eventScheduleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `event_schedules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, eventSchedulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from eventSchedule slice")
	}

	if len(eventScheduleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *EventSchedule) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *EventSchedule) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EventSchedule) ReloadG() error {
	if o == nil {
		return errors.New("models: no EventSchedule provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventSchedule) Reload(exec boil.Executor) error {
	ret, err := FindEventSchedule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EventScheduleSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EventScheduleSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventScheduleSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty EventScheduleSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventScheduleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	eventSchedules := EventScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `event_schedules`.* FROM `event_schedules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, eventSchedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&eventSchedules)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventScheduleSlice")
	}

	*o = eventSchedules

	return nil
}

// EventScheduleExists checks if the EventSchedule row exists.
func EventScheduleExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `event_schedules` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_schedules exists")
	}

	return exists, nil
}

// EventScheduleExistsG checks if the EventSchedule row exists.
func EventScheduleExistsG(id uint64) (bool, error) {
	return EventScheduleExists(boil.GetDB(), id)
}

// EventScheduleExistsGP checks if the EventSchedule row exists. Panics on error.
func EventScheduleExistsGP(id uint64) bool {
	e, err := EventScheduleExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EventScheduleExistsP checks if the EventSchedule row exists. Panics on error.
func EventScheduleExistsP(exec boil.Executor, id uint64) bool {
	e, err := EventScheduleExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

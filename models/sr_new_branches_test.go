// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSRNewBranches(t *testing.T) {
	t.Parallel()

	query := SRNewBranches(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSRNewBranchesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srNewBranch.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRNewBranchesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRNewBranches(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSRNewBranchesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRNewBranchSlice{srNewBranch}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSRNewBranchesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SRNewBranchExists(tx, srNewBranch.ID)
	if err != nil {
		t.Errorf("Unable to check if SRNewBranch exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SRNewBranchExistsG to return true, but got false.")
	}
}
func testSRNewBranchesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	srNewBranchFound, err := FindSRNewBranch(tx, srNewBranch.ID)
	if err != nil {
		t.Error(err)
	}

	if srNewBranchFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSRNewBranchesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SRNewBranches(tx).Bind(srNewBranch); err != nil {
		t.Error(err)
	}
}

func testSRNewBranchesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SRNewBranches(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSRNewBranchesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranchOne := &SRNewBranch{}
	srNewBranchTwo := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranchOne, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}
	if err = randomize.Struct(seed, srNewBranchTwo, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranchOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srNewBranchTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRNewBranches(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSRNewBranchesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srNewBranchOne := &SRNewBranch{}
	srNewBranchTwo := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranchOne, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}
	if err = randomize.Struct(seed, srNewBranchTwo, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranchOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srNewBranchTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srNewBranchBeforeInsertHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchAfterInsertHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchAfterSelectHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchBeforeUpdateHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchAfterUpdateHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchBeforeDeleteHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchAfterDeleteHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchBeforeUpsertHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func srNewBranchAfterUpsertHook(e boil.Executor, o *SRNewBranch) error {
	*o = SRNewBranch{}
	return nil
}

func testSRNewBranchesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SRNewBranch{}
	o := &SRNewBranch{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srNewBranchDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SRNewBranch object: %s", err)
	}

	AddSRNewBranchHook(boil.BeforeInsertHook, srNewBranchBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srNewBranchBeforeInsertHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.AfterInsertHook, srNewBranchAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srNewBranchAfterInsertHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.AfterSelectHook, srNewBranchAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srNewBranchAfterSelectHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.BeforeUpdateHook, srNewBranchBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srNewBranchBeforeUpdateHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.AfterUpdateHook, srNewBranchAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srNewBranchAfterUpdateHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.BeforeDeleteHook, srNewBranchBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srNewBranchBeforeDeleteHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.AfterDeleteHook, srNewBranchAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srNewBranchAfterDeleteHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.BeforeUpsertHook, srNewBranchBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srNewBranchBeforeUpsertHooks = []SRNewBranchHook{}

	AddSRNewBranchHook(boil.AfterUpsertHook, srNewBranchAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srNewBranchAfterUpsertHooks = []SRNewBranchHook{}
}
func testSRNewBranchesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRNewBranchesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx, srNewBranchColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSRNewBranchToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRNewBranch
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRNewBranchSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SRNewBranch)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRNewBranchToOneBranchUsingBranch(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SRNewBranch
	var foreign Branch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srNewBranchDBTypes, false, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, branchDBTypes, false, branchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Branch struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.BranchID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Branch(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SRNewBranchSlice{&local}
	if err = local.L.LoadBranch(tx, false, (*[]*SRNewBranch)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Branch = nil
	if err = local.L.LoadBranch(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Branch == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSRNewBranchToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRNewBranch
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srNewBranchDBTypes, false, strmangle.SetComplement(srNewBranchPrimaryKeyColumns, srNewBranchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSRNewBranches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSRNewBranchToOneSetOpBranchUsingBranch(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SRNewBranch
	var b, c Branch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srNewBranchDBTypes, false, strmangle.SetComplement(srNewBranchPrimaryKeyColumns, srNewBranchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, branchDBTypes, false, strmangle.SetComplement(branchPrimaryKeyColumns, branchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Branch{&b, &c} {
		err = a.SetBranch(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Branch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRNewBranches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BranchID != x.ID {
			t.Error("foreign key was wrong value", a.BranchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BranchID))
		reflect.Indirect(reflect.ValueOf(&a.BranchID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BranchID != x.ID {
			t.Error("foreign key was wrong value", a.BranchID, x.ID)
		}
	}
}
func testSRNewBranchesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srNewBranch.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSRNewBranchesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SRNewBranchSlice{srNewBranch}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSRNewBranchesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SRNewBranches(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srNewBranchDBTypes = map[string]string{`BranchID`: `bigint`, `ID`: `bigint`, `SRID`: `bigint`}
	_                  = bytes.MinRead
)

func testSRNewBranchesUpdate(t *testing.T) {
	t.Parallel()

	if len(srNewBranchColumns) == len(srNewBranchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	if err = srNewBranch.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSRNewBranchesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srNewBranchColumns) == len(srNewBranchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srNewBranch := &SRNewBranch{}
	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srNewBranch, srNewBranchDBTypes, true, srNewBranchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srNewBranchColumns, srNewBranchPrimaryKeyColumns) {
		fields = srNewBranchColumns
	} else {
		fields = strmangle.SetComplement(
			srNewBranchColumns,
			srNewBranchPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srNewBranch))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SRNewBranchSlice{srNewBranch}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSRNewBranchesUpsert(t *testing.T) {
	t.Parallel()

	if len(srNewBranchColumns) == len(srNewBranchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srNewBranch := SRNewBranch{}
	if err = randomize.Struct(seed, &srNewBranch, srNewBranchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srNewBranch.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRNewBranch: %s", err)
	}

	count, err := SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srNewBranch, srNewBranchDBTypes, false, srNewBranchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SRNewBranch struct: %s", err)
	}

	if err = srNewBranch.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SRNewBranch: %s", err)
	}

	count, err = SRNewBranches(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

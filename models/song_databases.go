// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// SongDatabase is an object representing the database table.
type SongDatabase struct {
	ID        uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *songDatabaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songDatabaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongDatabaseColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// songDatabaseR is where relationships are stored.
type songDatabaseR struct {
	EwDatabases                    EwDatabaseSlice
	SongDatabaseTags               SongDatabaseTagSlice
	SongDatabaseVariations         SongDatabaseVariationSlice
	SRAddSongDatabaseVariations    SRAddSongDatabaseVariationSlice
	SRRemoveSongDatabaseVariations SRRemoveSongDatabaseVariationSlice
}

// songDatabaseL is where Load methods for each relationship are stored.
type songDatabaseL struct{}

var (
	songDatabaseColumns               = []string{"id", "name", "created_at", "updated_at", "deleted_at"}
	songDatabaseColumnsWithoutDefault = []string{"name", "created_at", "updated_at", "deleted_at"}
	songDatabaseColumnsWithDefault    = []string{"id"}
	songDatabasePrimaryKeyColumns     = []string{"id"}
)

type (
	// SongDatabaseSlice is an alias for a slice of pointers to SongDatabase.
	// This should generally be used opposed to []SongDatabase.
	SongDatabaseSlice []*SongDatabase
	// SongDatabaseHook is the signature for custom SongDatabase hook methods
	SongDatabaseHook func(boil.Executor, *SongDatabase) error

	songDatabaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songDatabaseType                 = reflect.TypeOf(&SongDatabase{})
	songDatabaseMapping              = queries.MakeStructMapping(songDatabaseType)
	songDatabasePrimaryKeyMapping, _ = queries.BindMapping(songDatabaseType, songDatabaseMapping, songDatabasePrimaryKeyColumns)
	songDatabaseInsertCacheMut       sync.RWMutex
	songDatabaseInsertCache          = make(map[string]insertCache)
	songDatabaseUpdateCacheMut       sync.RWMutex
	songDatabaseUpdateCache          = make(map[string]updateCache)
	songDatabaseUpsertCacheMut       sync.RWMutex
	songDatabaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var songDatabaseBeforeInsertHooks []SongDatabaseHook
var songDatabaseBeforeUpdateHooks []SongDatabaseHook
var songDatabaseBeforeDeleteHooks []SongDatabaseHook
var songDatabaseBeforeUpsertHooks []SongDatabaseHook

var songDatabaseAfterInsertHooks []SongDatabaseHook
var songDatabaseAfterSelectHooks []SongDatabaseHook
var songDatabaseAfterUpdateHooks []SongDatabaseHook
var songDatabaseAfterDeleteHooks []SongDatabaseHook
var songDatabaseAfterUpsertHooks []SongDatabaseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SongDatabase) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SongDatabase) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SongDatabase) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SongDatabase) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SongDatabase) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SongDatabase) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SongDatabase) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SongDatabase) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SongDatabase) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range songDatabaseAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongDatabaseHook registers your hook function for all future operations.
func AddSongDatabaseHook(hookPoint boil.HookPoint, songDatabaseHook SongDatabaseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		songDatabaseBeforeInsertHooks = append(songDatabaseBeforeInsertHooks, songDatabaseHook)
	case boil.BeforeUpdateHook:
		songDatabaseBeforeUpdateHooks = append(songDatabaseBeforeUpdateHooks, songDatabaseHook)
	case boil.BeforeDeleteHook:
		songDatabaseBeforeDeleteHooks = append(songDatabaseBeforeDeleteHooks, songDatabaseHook)
	case boil.BeforeUpsertHook:
		songDatabaseBeforeUpsertHooks = append(songDatabaseBeforeUpsertHooks, songDatabaseHook)
	case boil.AfterInsertHook:
		songDatabaseAfterInsertHooks = append(songDatabaseAfterInsertHooks, songDatabaseHook)
	case boil.AfterSelectHook:
		songDatabaseAfterSelectHooks = append(songDatabaseAfterSelectHooks, songDatabaseHook)
	case boil.AfterUpdateHook:
		songDatabaseAfterUpdateHooks = append(songDatabaseAfterUpdateHooks, songDatabaseHook)
	case boil.AfterDeleteHook:
		songDatabaseAfterDeleteHooks = append(songDatabaseAfterDeleteHooks, songDatabaseHook)
	case boil.AfterUpsertHook:
		songDatabaseAfterUpsertHooks = append(songDatabaseAfterUpsertHooks, songDatabaseHook)
	}
}

// OneP returns a single songDatabase record from the query, and panics on error.
func (q songDatabaseQuery) OneP() *SongDatabase {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single songDatabase record from the query.
func (q songDatabaseQuery) One() (*SongDatabase, error) {
	o := &SongDatabase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for song_databases")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SongDatabase records from the query, and panics on error.
func (q songDatabaseQuery) AllP() SongDatabaseSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SongDatabase records from the query.
func (q songDatabaseQuery) All() (SongDatabaseSlice, error) {
	var o []*SongDatabase

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SongDatabase slice")
	}

	if len(songDatabaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SongDatabase records in the query, and panics on error.
func (q songDatabaseQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SongDatabase records in the query.
func (q songDatabaseQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count song_databases rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q songDatabaseQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q songDatabaseQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if song_databases exists")
	}

	return count > 0, nil
}

// EwDatabasesG retrieves all the ew_database's ew databases.
func (o *SongDatabase) EwDatabasesG(mods ...qm.QueryMod) ewDatabaseQuery {
	return o.EwDatabases(boil.GetDB(), mods...)
}

// EwDatabases retrieves all the ew_database's ew databases with an executor.
func (o *SongDatabase) EwDatabases(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ew_databases`.`song_database_id`=?", o.ID),
	)

	query := EwDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_databases`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ew_databases`.*"})
	}

	return query
}

// SongDatabaseTagsG retrieves all the song_database_tag's song database tags.
func (o *SongDatabase) SongDatabaseTagsG(mods ...qm.QueryMod) songDatabaseTagQuery {
	return o.SongDatabaseTags(boil.GetDB(), mods...)
}

// SongDatabaseTags retrieves all the song_database_tag's song database tags with an executor.
func (o *SongDatabase) SongDatabaseTags(exec boil.Executor, mods ...qm.QueryMod) songDatabaseTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`song_database_tags`.`song_database_id`=?", o.ID),
	)

	query := SongDatabaseTags(exec, queryMods...)
	queries.SetFrom(query.Query, "`song_database_tags`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`song_database_tags`.*"})
	}

	return query
}

// SongDatabaseVariationsG retrieves all the song_database_variation's song database variations.
func (o *SongDatabase) SongDatabaseVariationsG(mods ...qm.QueryMod) songDatabaseVariationQuery {
	return o.SongDatabaseVariations(boil.GetDB(), mods...)
}

// SongDatabaseVariations retrieves all the song_database_variation's song database variations with an executor.
func (o *SongDatabase) SongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) songDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`song_database_variations`.`song_database_id`=?", o.ID),
	)

	query := SongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`song_database_variations`.*"})
	}

	return query
}

// SRAddSongDatabaseVariationsG retrieves all the sr_add_song_database_variation's sr add song database variations.
func (o *SongDatabase) SRAddSongDatabaseVariationsG(mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	return o.SRAddSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRAddSongDatabaseVariations retrieves all the sr_add_song_database_variation's sr add song database variations with an executor.
func (o *SongDatabase) SRAddSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_add_song_database_variations`.`song_database_id`=?", o.ID),
	)

	query := SRAddSongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_add_song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_add_song_database_variations`.*"})
	}

	return query
}

// SRRemoveSongDatabaseVariationsG retrieves all the sr_remove_song_database_variation's sr remove song database variations.
func (o *SongDatabase) SRRemoveSongDatabaseVariationsG(mods ...qm.QueryMod) srRemoveSongDatabaseVariationQuery {
	return o.SRRemoveSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRRemoveSongDatabaseVariations retrieves all the sr_remove_song_database_variation's sr remove song database variations with an executor.
func (o *SongDatabase) SRRemoveSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srRemoveSongDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_remove_song_database_variations`.`song_database_id`=?", o.ID),
	)

	query := SRRemoveSongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_remove_song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_remove_song_database_variations`.*"})
	}

	return query
}

// LoadEwDatabases allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseL) LoadEwDatabases(e boil.Executor, singular bool, maybeSongDatabase interface{}) error {
	var slice []*SongDatabase
	var object *SongDatabase

	count := 1
	if singular {
		object = maybeSongDatabase.(*SongDatabase)
	} else {
		slice = *maybeSongDatabase.(*[]*SongDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_databases` where `song_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ew_databases")
	}
	defer results.Close()

	var resultSlice []*EwDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ew_databases")
	}

	if len(ewDatabaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EwDatabases = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SongDatabaseID {
				local.R.EwDatabases = append(local.R.EwDatabases, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSongDatabaseTags allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseL) LoadSongDatabaseTags(e boil.Executor, singular bool, maybeSongDatabase interface{}) error {
	var slice []*SongDatabase
	var object *SongDatabase

	count := 1
	if singular {
		object = maybeSongDatabase.(*SongDatabase)
	} else {
		slice = *maybeSongDatabase.(*[]*SongDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `song_database_tags` where `song_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load song_database_tags")
	}
	defer results.Close()

	var resultSlice []*SongDatabaseTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice song_database_tags")
	}

	if len(songDatabaseTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SongDatabaseTags = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SongDatabaseID {
				local.R.SongDatabaseTags = append(local.R.SongDatabaseTags, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseL) LoadSongDatabaseVariations(e boil.Executor, singular bool, maybeSongDatabase interface{}) error {
	var slice []*SongDatabase
	var object *SongDatabase

	count := 1
	if singular {
		object = maybeSongDatabase.(*SongDatabase)
	} else {
		slice = *maybeSongDatabase.(*[]*SongDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `song_database_variations` where `song_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice song_database_variations")
	}

	if len(songDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SongDatabaseID {
				local.R.SongDatabaseVariations = append(local.R.SongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRAddSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseL) LoadSRAddSongDatabaseVariations(e boil.Executor, singular bool, maybeSongDatabase interface{}) error {
	var slice []*SongDatabase
	var object *SongDatabase

	count := 1
	if singular {
		object = maybeSongDatabase.(*SongDatabase)
	} else {
		slice = *maybeSongDatabase.(*[]*SongDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_add_song_database_variations` where `song_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_add_song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SRAddSongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_add_song_database_variations")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRAddSongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SongDatabaseID {
				local.R.SRAddSongDatabaseVariations = append(local.R.SRAddSongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRRemoveSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (songDatabaseL) LoadSRRemoveSongDatabaseVariations(e boil.Executor, singular bool, maybeSongDatabase interface{}) error {
	var slice []*SongDatabase
	var object *SongDatabase

	count := 1
	if singular {
		object = maybeSongDatabase.(*SongDatabase)
	} else {
		slice = *maybeSongDatabase.(*[]*SongDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &songDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &songDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_remove_song_database_variations` where `song_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_remove_song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SRRemoveSongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_remove_song_database_variations")
	}

	if len(srRemoveSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRRemoveSongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SongDatabaseID {
				local.R.SRRemoveSongDatabaseVariations = append(local.R.SRRemoveSongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// AddEwDatabasesG adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle.
func (o *SongDatabase) AddEwDatabasesG(insert bool, related ...*EwDatabase) error {
	return o.AddEwDatabases(boil.GetDB(), insert, related...)
}

// AddEwDatabasesP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.SongDatabase appropriately.
// Panics on error.
func (o *SongDatabase) AddEwDatabasesP(exec boil.Executor, insert bool, related ...*EwDatabase) {
	if err := o.AddEwDatabases(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabasesGP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *SongDatabase) AddEwDatabasesGP(insert bool, related ...*EwDatabase) {
	if err := o.AddEwDatabases(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabases adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabases.
// Sets related.R.SongDatabase appropriately.
func (o *SongDatabase) AddEwDatabases(exec boil.Executor, insert bool, related ...*EwDatabase) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SongDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ew_databases` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
				strmangle.WhereClause("`", "`", 0, ewDatabasePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SongDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &songDatabaseR{
			EwDatabases: related,
		}
	} else {
		o.R.EwDatabases = append(o.R.EwDatabases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ewDatabaseR{
				SongDatabase: o,
			}
		} else {
			rel.R.SongDatabase = o
		}
	}
	return nil
}

// AddSongDatabaseTagsG adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseTags.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle.
func (o *SongDatabase) AddSongDatabaseTagsG(insert bool, related ...*SongDatabaseTag) error {
	return o.AddSongDatabaseTags(boil.GetDB(), insert, related...)
}

// AddSongDatabaseTagsP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseTags.
// Sets related.R.SongDatabase appropriately.
// Panics on error.
func (o *SongDatabase) AddSongDatabaseTagsP(exec boil.Executor, insert bool, related ...*SongDatabaseTag) {
	if err := o.AddSongDatabaseTags(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSongDatabaseTagsGP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseTags.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *SongDatabase) AddSongDatabaseTagsGP(insert bool, related ...*SongDatabaseTag) {
	if err := o.AddSongDatabaseTags(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSongDatabaseTags adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseTags.
// Sets related.R.SongDatabase appropriately.
func (o *SongDatabase) AddSongDatabaseTags(exec boil.Executor, insert bool, related ...*SongDatabaseTag) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SongDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `song_database_tags` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
				strmangle.WhereClause("`", "`", 0, songDatabaseTagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SongDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &songDatabaseR{
			SongDatabaseTags: related,
		}
	} else {
		o.R.SongDatabaseTags = append(o.R.SongDatabaseTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &songDatabaseTagR{
				SongDatabase: o,
			}
		} else {
			rel.R.SongDatabase = o
		}
	}
	return nil
}

// AddSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle.
func (o *SongDatabase) AddSongDatabaseVariationsG(insert bool, related ...*SongDatabaseVariation) error {
	return o.AddSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Panics on error.
func (o *SongDatabase) AddSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SongDatabaseVariation) {
	if err := o.AddSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *SongDatabase) AddSongDatabaseVariationsGP(insert bool, related ...*SongDatabaseVariation) {
	if err := o.AddSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSongDatabaseVariations adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
func (o *SongDatabase) AddSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SongDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
				strmangle.WhereClause("`", "`", 0, songDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SongDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &songDatabaseR{
			SongDatabaseVariations: related,
		}
	} else {
		o.R.SongDatabaseVariations = append(o.R.SongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &songDatabaseVariationR{
				SongDatabase: o,
			}
		} else {
			rel.R.SongDatabase = o
		}
	}
	return nil
}

// AddSRAddSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle.
func (o *SongDatabase) AddSRAddSongDatabaseVariationsG(insert bool, related ...*SRAddSongDatabaseVariation) error {
	return o.AddSRAddSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSRAddSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Panics on error.
func (o *SongDatabase) AddSRAddSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SRAddSongDatabaseVariation) {
	if err := o.AddSRAddSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRAddSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *SongDatabase) AddSRAddSongDatabaseVariationsGP(insert bool, related ...*SRAddSongDatabaseVariation) {
	if err := o.AddSRAddSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRAddSongDatabaseVariations adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRAddSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
func (o *SongDatabase) AddSRAddSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SRAddSongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SongDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
				strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SongDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &songDatabaseR{
			SRAddSongDatabaseVariations: related,
		}
	} else {
		o.R.SRAddSongDatabaseVariations = append(o.R.SRAddSongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srAddSongDatabaseVariationR{
				SongDatabase: o,
			}
		} else {
			rel.R.SongDatabase = o
		}
	}
	return nil
}

// AddSRRemoveSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle.
func (o *SongDatabase) AddSRRemoveSongDatabaseVariationsG(insert bool, related ...*SRRemoveSongDatabaseVariation) error {
	return o.AddSRRemoveSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSRRemoveSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Panics on error.
func (o *SongDatabase) AddSRRemoveSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SRRemoveSongDatabaseVariation) {
	if err := o.AddSRRemoveSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRRemoveSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *SongDatabase) AddSRRemoveSongDatabaseVariationsGP(insert bool, related ...*SRRemoveSongDatabaseVariation) {
	if err := o.AddSRRemoveSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRRemoveSongDatabaseVariations adds the given related objects to the existing relationships
// of the song_database, optionally inserting them as new records.
// Appends related to o.R.SRRemoveSongDatabaseVariations.
// Sets related.R.SongDatabase appropriately.
func (o *SongDatabase) AddSRRemoveSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SRRemoveSongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SongDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_remove_song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
				strmangle.WhereClause("`", "`", 0, srRemoveSongDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SongDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &songDatabaseR{
			SRRemoveSongDatabaseVariations: related,
		}
	} else {
		o.R.SRRemoveSongDatabaseVariations = append(o.R.SRRemoveSongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srRemoveSongDatabaseVariationR{
				SongDatabase: o,
			}
		} else {
			rel.R.SongDatabase = o
		}
	}
	return nil
}

// SongDatabasesG retrieves all records.
func SongDatabasesG(mods ...qm.QueryMod) songDatabaseQuery {
	return SongDatabases(boil.GetDB(), mods...)
}

// SongDatabases retrieves all the records using an executor.
func SongDatabases(exec boil.Executor, mods ...qm.QueryMod) songDatabaseQuery {
	mods = append(mods, qm.From("`song_databases`"))
	return songDatabaseQuery{NewQuery(exec, mods...)}
}

// FindSongDatabaseG retrieves a single record by ID.
func FindSongDatabaseG(id uint64, selectCols ...string) (*SongDatabase, error) {
	return FindSongDatabase(boil.GetDB(), id, selectCols...)
}

// FindSongDatabaseGP retrieves a single record by ID, and panics on error.
func FindSongDatabaseGP(id uint64, selectCols ...string) *SongDatabase {
	retobj, err := FindSongDatabase(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSongDatabase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSongDatabase(exec boil.Executor, id uint64, selectCols ...string) (*SongDatabase, error) {
	songDatabaseObj := &SongDatabase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `song_databases` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(songDatabaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from song_databases")
	}

	return songDatabaseObj, nil
}

// FindSongDatabaseP retrieves a single record by ID with an executor, and panics on error.
func FindSongDatabaseP(exec boil.Executor, id uint64, selectCols ...string) *SongDatabase {
	retobj, err := FindSongDatabase(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SongDatabase) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SongDatabase) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SongDatabase) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SongDatabase) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no song_databases provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songDatabaseColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	songDatabaseInsertCacheMut.RLock()
	cache, cached := songDatabaseInsertCache[key]
	songDatabaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			songDatabaseColumns,
			songDatabaseColumnsWithDefault,
			songDatabaseColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(songDatabaseType, songDatabaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songDatabaseType, songDatabaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `song_databases` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `song_databases` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `song_databases` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, songDatabasePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into song_databases")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songDatabaseMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for song_databases")
	}

CacheNoHooks:
	if !cached {
		songDatabaseInsertCacheMut.Lock()
		songDatabaseInsertCache[key] = cache
		songDatabaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SongDatabase record. See Update for
// whitelist behavior description.
func (o *SongDatabase) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SongDatabase record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SongDatabase) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SongDatabase, and panics on error.
// See Update for whitelist behavior description.
func (o *SongDatabase) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SongDatabase.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SongDatabase) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	songDatabaseUpdateCacheMut.RLock()
	cache, cached := songDatabaseUpdateCache[key]
	songDatabaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			songDatabaseColumns,
			songDatabasePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update song_databases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `song_databases` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, songDatabasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songDatabaseType, songDatabaseMapping, append(wl, songDatabasePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update song_databases row")
	}

	if !cached {
		songDatabaseUpdateCacheMut.Lock()
		songDatabaseUpdateCache[key] = cache
		songDatabaseUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q songDatabaseQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q songDatabaseQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for song_databases")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SongDatabaseSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SongDatabaseSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SongDatabaseSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongDatabaseSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `song_databases` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songDatabasePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in songDatabase slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SongDatabase) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SongDatabase) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SongDatabase) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SongDatabase) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no song_databases provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songDatabaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songDatabaseUpsertCacheMut.RLock()
	cache, cached := songDatabaseUpsertCache[key]
	songDatabaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			songDatabaseColumns,
			songDatabaseColumnsWithDefault,
			songDatabaseColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			songDatabaseColumns,
			songDatabasePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert song_databases, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "song_databases", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `song_databases` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(songDatabaseType, songDatabaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songDatabaseType, songDatabaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for song_databases")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == songDatabaseMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for song_databases")
	}

CacheNoHooks:
	if !cached {
		songDatabaseUpsertCacheMut.Lock()
		songDatabaseUpsertCache[key] = cache
		songDatabaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SongDatabase record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SongDatabase) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SongDatabase record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SongDatabase) DeleteG() error {
	if o == nil {
		return errors.New("models: no SongDatabase provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SongDatabase record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SongDatabase) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SongDatabase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SongDatabase) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SongDatabase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songDatabasePrimaryKeyMapping)
	sql := "DELETE FROM `song_databases` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from song_databases")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q songDatabaseQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q songDatabaseQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no songDatabaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from song_databases")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SongDatabaseSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SongDatabaseSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SongDatabase slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SongDatabaseSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongDatabaseSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SongDatabase slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(songDatabaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `song_databases` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songDatabasePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from songDatabase slice")
	}

	if len(songDatabaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SongDatabase) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SongDatabase) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SongDatabase) ReloadG() error {
	if o == nil {
		return errors.New("models: no SongDatabase provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SongDatabase) Reload(exec boil.Executor) error {
	ret, err := FindSongDatabase(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SongDatabaseSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SongDatabaseSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongDatabaseSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SongDatabaseSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongDatabaseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	songDatabases := SongDatabaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `song_databases`.* FROM `song_databases` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, songDatabasePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&songDatabases)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SongDatabaseSlice")
	}

	*o = songDatabases

	return nil
}

// SongDatabaseExists checks if the SongDatabase row exists.
func SongDatabaseExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `song_databases` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if song_databases exists")
	}

	return exists, nil
}

// SongDatabaseExistsG checks if the SongDatabase row exists.
func SongDatabaseExistsG(id uint64) (bool, error) {
	return SongDatabaseExists(boil.GetDB(), id)
}

// SongDatabaseExistsGP checks if the SongDatabase row exists. Panics on error.
func SongDatabaseExistsGP(id uint64) bool {
	e, err := SongDatabaseExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SongDatabaseExistsP checks if the SongDatabase row exists. Panics on error.
func SongDatabaseExistsP(exec boil.Executor, id uint64) bool {
	e, err := SongDatabaseExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// EwDatabaseLink is an object representing the database table.
type EwDatabaseLink struct {
	ID               uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	EwDatabaseID     uint64    `boil:"ew_database_id" json:"ew_database_id" toml:"ew_database_id" yaml:"ew_database_id"`
	EwDatabaseSongID uint64    `boil:"ew_database_song_id" json:"ew_database_song_id" toml:"ew_database_song_id" yaml:"ew_database_song_id"`
	VariationID      uint64    `boil:"variation_id" json:"variation_id" toml:"variation_id" yaml:"variation_id"`
	Version          uint      `boil:"version" json:"version" toml:"version" yaml:"version"`
	Author           string    `boil:"author" json:"author" toml:"author" yaml:"author"`
	Copyright        string    `boil:"copyright" json:"copyright" toml:"copyright" yaml:"copyright"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *ewDatabaseLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ewDatabaseLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EwDatabaseLinkColumns = struct {
	ID               string
	EwDatabaseID     string
	EwDatabaseSongID string
	VariationID      string
	Version          string
	Author           string
	Copyright        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	EwDatabaseID:     "ew_database_id",
	EwDatabaseSongID: "ew_database_song_id",
	VariationID:      "variation_id",
	Version:          "version",
	Author:           "author",
	Copyright:        "copyright",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// ewDatabaseLinkR is where relationships are stored.
type ewDatabaseLinkR struct {
	EwDatabase *EwDatabase
	Variation  *Variation
}

// ewDatabaseLinkL is where Load methods for each relationship are stored.
type ewDatabaseLinkL struct{}

var (
	ewDatabaseLinkColumns               = []string{"id", "ew_database_id", "ew_database_song_id", "variation_id", "version", "author", "copyright", "created_at", "updated_at"}
	ewDatabaseLinkColumnsWithoutDefault = []string{"ew_database_id", "ew_database_song_id", "variation_id", "author", "copyright", "created_at", "updated_at"}
	ewDatabaseLinkColumnsWithDefault    = []string{"id", "version"}
	ewDatabaseLinkPrimaryKeyColumns     = []string{"id"}
)

type (
	// EwDatabaseLinkSlice is an alias for a slice of pointers to EwDatabaseLink.
	// This should generally be used opposed to []EwDatabaseLink.
	EwDatabaseLinkSlice []*EwDatabaseLink
	// EwDatabaseLinkHook is the signature for custom EwDatabaseLink hook methods
	EwDatabaseLinkHook func(boil.Executor, *EwDatabaseLink) error

	ewDatabaseLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ewDatabaseLinkType                 = reflect.TypeOf(&EwDatabaseLink{})
	ewDatabaseLinkMapping              = queries.MakeStructMapping(ewDatabaseLinkType)
	ewDatabaseLinkPrimaryKeyMapping, _ = queries.BindMapping(ewDatabaseLinkType, ewDatabaseLinkMapping, ewDatabaseLinkPrimaryKeyColumns)
	ewDatabaseLinkInsertCacheMut       sync.RWMutex
	ewDatabaseLinkInsertCache          = make(map[string]insertCache)
	ewDatabaseLinkUpdateCacheMut       sync.RWMutex
	ewDatabaseLinkUpdateCache          = make(map[string]updateCache)
	ewDatabaseLinkUpsertCacheMut       sync.RWMutex
	ewDatabaseLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var ewDatabaseLinkBeforeInsertHooks []EwDatabaseLinkHook
var ewDatabaseLinkBeforeUpdateHooks []EwDatabaseLinkHook
var ewDatabaseLinkBeforeDeleteHooks []EwDatabaseLinkHook
var ewDatabaseLinkBeforeUpsertHooks []EwDatabaseLinkHook

var ewDatabaseLinkAfterInsertHooks []EwDatabaseLinkHook
var ewDatabaseLinkAfterSelectHooks []EwDatabaseLinkHook
var ewDatabaseLinkAfterUpdateHooks []EwDatabaseLinkHook
var ewDatabaseLinkAfterDeleteHooks []EwDatabaseLinkHook
var ewDatabaseLinkAfterUpsertHooks []EwDatabaseLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EwDatabaseLink) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EwDatabaseLink) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EwDatabaseLink) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EwDatabaseLink) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EwDatabaseLink) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EwDatabaseLink) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EwDatabaseLink) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EwDatabaseLink) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EwDatabaseLink) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseLinkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEwDatabaseLinkHook registers your hook function for all future operations.
func AddEwDatabaseLinkHook(hookPoint boil.HookPoint, ewDatabaseLinkHook EwDatabaseLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ewDatabaseLinkBeforeInsertHooks = append(ewDatabaseLinkBeforeInsertHooks, ewDatabaseLinkHook)
	case boil.BeforeUpdateHook:
		ewDatabaseLinkBeforeUpdateHooks = append(ewDatabaseLinkBeforeUpdateHooks, ewDatabaseLinkHook)
	case boil.BeforeDeleteHook:
		ewDatabaseLinkBeforeDeleteHooks = append(ewDatabaseLinkBeforeDeleteHooks, ewDatabaseLinkHook)
	case boil.BeforeUpsertHook:
		ewDatabaseLinkBeforeUpsertHooks = append(ewDatabaseLinkBeforeUpsertHooks, ewDatabaseLinkHook)
	case boil.AfterInsertHook:
		ewDatabaseLinkAfterInsertHooks = append(ewDatabaseLinkAfterInsertHooks, ewDatabaseLinkHook)
	case boil.AfterSelectHook:
		ewDatabaseLinkAfterSelectHooks = append(ewDatabaseLinkAfterSelectHooks, ewDatabaseLinkHook)
	case boil.AfterUpdateHook:
		ewDatabaseLinkAfterUpdateHooks = append(ewDatabaseLinkAfterUpdateHooks, ewDatabaseLinkHook)
	case boil.AfterDeleteHook:
		ewDatabaseLinkAfterDeleteHooks = append(ewDatabaseLinkAfterDeleteHooks, ewDatabaseLinkHook)
	case boil.AfterUpsertHook:
		ewDatabaseLinkAfterUpsertHooks = append(ewDatabaseLinkAfterUpsertHooks, ewDatabaseLinkHook)
	}
}

// OneP returns a single ewDatabaseLink record from the query, and panics on error.
func (q ewDatabaseLinkQuery) OneP() *EwDatabaseLink {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single ewDatabaseLink record from the query.
func (q ewDatabaseLinkQuery) One() (*EwDatabaseLink, error) {
	o := &EwDatabaseLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ew_database_links")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all EwDatabaseLink records from the query, and panics on error.
func (q ewDatabaseLinkQuery) AllP() EwDatabaseLinkSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all EwDatabaseLink records from the query.
func (q ewDatabaseLinkQuery) All() (EwDatabaseLinkSlice, error) {
	var o []*EwDatabaseLink

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EwDatabaseLink slice")
	}

	if len(ewDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all EwDatabaseLink records in the query, and panics on error.
func (q ewDatabaseLinkQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all EwDatabaseLink records in the query.
func (q ewDatabaseLinkQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ew_database_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q ewDatabaseLinkQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q ewDatabaseLinkQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ew_database_links exists")
	}

	return count > 0, nil
}

// EwDatabaseG pointed to by the foreign key.
func (o *EwDatabaseLink) EwDatabaseG(mods ...qm.QueryMod) ewDatabaseQuery {
	return o.EwDatabase(boil.GetDB(), mods...)
}

// EwDatabase pointed to by the foreign key.
func (o *EwDatabaseLink) EwDatabase(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EwDatabaseID),
	}

	queryMods = append(queryMods, mods...)

	query := EwDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_databases`")

	return query
}

// VariationG pointed to by the foreign key.
func (o *EwDatabaseLink) VariationG(mods ...qm.QueryMod) variationQuery {
	return o.Variation(boil.GetDB(), mods...)
}

// Variation pointed to by the foreign key.
func (o *EwDatabaseLink) Variation(exec boil.Executor, mods ...qm.QueryMod) variationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationID),
	}

	queryMods = append(queryMods, mods...)

	query := Variations(exec, queryMods...)
	queries.SetFrom(query.Query, "`variations`")

	return query
} // LoadEwDatabase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseLinkL) LoadEwDatabase(e boil.Executor, singular bool, maybeEwDatabaseLink interface{}) error {
	var slice []*EwDatabaseLink
	var object *EwDatabaseLink

	count := 1
	if singular {
		object = maybeEwDatabaseLink.(*EwDatabaseLink)
	} else {
		slice = *maybeEwDatabaseLink.(*[]*EwDatabaseLink)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseLinkR{}
		}
		args[0] = object.EwDatabaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseLinkR{}
			}
			args[i] = obj.EwDatabaseID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_databases` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EwDatabase")
	}
	defer results.Close()

	var resultSlice []*EwDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EwDatabase")
	}

	if len(ewDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.EwDatabase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EwDatabaseID == foreign.ID {
				local.R.EwDatabase = foreign
				break
			}
		}
	}

	return nil
}

// LoadVariation allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseLinkL) LoadVariation(e boil.Executor, singular bool, maybeEwDatabaseLink interface{}) error {
	var slice []*EwDatabaseLink
	var object *EwDatabaseLink

	count := 1
	if singular {
		object = maybeEwDatabaseLink.(*EwDatabaseLink)
	} else {
		slice = *maybeEwDatabaseLink.(*[]*EwDatabaseLink)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseLinkR{}
		}
		args[0] = object.VariationID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseLinkR{}
			}
			args[i] = obj.VariationID
		}
	}

	query := fmt.Sprintf(
		"select * from `variations` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Variation")
	}
	defer results.Close()

	var resultSlice []*Variation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Variation")
	}

	if len(ewDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Variation = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationID == foreign.ID {
				local.R.Variation = foreign
				break
			}
		}
	}

	return nil
}

// SetEwDatabaseG of the ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.EwDatabaseLinks.
// Uses the global database handle.
func (o *EwDatabaseLink) SetEwDatabaseG(insert bool, related *EwDatabase) error {
	return o.SetEwDatabase(boil.GetDB(), insert, related)
}

// SetEwDatabaseP of the ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.EwDatabaseLinks.
// Panics on error.
func (o *EwDatabaseLink) SetEwDatabaseP(exec boil.Executor, insert bool, related *EwDatabase) {
	if err := o.SetEwDatabase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabaseGP of the ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.EwDatabaseLinks.
// Uses the global database handle and panics on error.
func (o *EwDatabaseLink) SetEwDatabaseGP(insert bool, related *EwDatabase) {
	if err := o.SetEwDatabase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetEwDatabase of the ew_database_link to the related item.
// Sets o.R.EwDatabase to related.
// Adds o to related.R.EwDatabaseLinks.
func (o *EwDatabaseLink) SetEwDatabase(exec boil.Executor, insert bool, related *EwDatabase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ew_database_id"}),
		strmangle.WhereClause("`", "`", 0, ewDatabaseLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EwDatabaseID = related.ID

	if o.R == nil {
		o.R = &ewDatabaseLinkR{
			EwDatabase: related,
		}
	} else {
		o.R.EwDatabase = related
	}

	if related.R == nil {
		related.R = &ewDatabaseR{
			EwDatabaseLinks: EwDatabaseLinkSlice{o},
		}
	} else {
		related.R.EwDatabaseLinks = append(related.R.EwDatabaseLinks, o)
	}

	return nil
}

// SetVariationG of the ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.EwDatabaseLinks.
// Uses the global database handle.
func (o *EwDatabaseLink) SetVariationG(insert bool, related *Variation) error {
	return o.SetVariation(boil.GetDB(), insert, related)
}

// SetVariationP of the ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.EwDatabaseLinks.
// Panics on error.
func (o *EwDatabaseLink) SetVariationP(exec boil.Executor, insert bool, related *Variation) {
	if err := o.SetVariation(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationGP of the ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.EwDatabaseLinks.
// Uses the global database handle and panics on error.
func (o *EwDatabaseLink) SetVariationGP(insert bool, related *Variation) {
	if err := o.SetVariation(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariation of the ew_database_link to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.EwDatabaseLinks.
func (o *EwDatabaseLink) SetVariation(exec boil.Executor, insert bool, related *Variation) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
		strmangle.WhereClause("`", "`", 0, ewDatabaseLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationID = related.ID

	if o.R == nil {
		o.R = &ewDatabaseLinkR{
			Variation: related,
		}
	} else {
		o.R.Variation = related
	}

	if related.R == nil {
		related.R = &variationR{
			EwDatabaseLinks: EwDatabaseLinkSlice{o},
		}
	} else {
		related.R.EwDatabaseLinks = append(related.R.EwDatabaseLinks, o)
	}

	return nil
}

// EwDatabaseLinksG retrieves all records.
func EwDatabaseLinksG(mods ...qm.QueryMod) ewDatabaseLinkQuery {
	return EwDatabaseLinks(boil.GetDB(), mods...)
}

// EwDatabaseLinks retrieves all the records using an executor.
func EwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseLinkQuery {
	mods = append(mods, qm.From("`ew_database_links`"))
	return ewDatabaseLinkQuery{NewQuery(exec, mods...)}
}

// FindEwDatabaseLinkG retrieves a single record by ID.
func FindEwDatabaseLinkG(id uint64, selectCols ...string) (*EwDatabaseLink, error) {
	return FindEwDatabaseLink(boil.GetDB(), id, selectCols...)
}

// FindEwDatabaseLinkGP retrieves a single record by ID, and panics on error.
func FindEwDatabaseLinkGP(id uint64, selectCols ...string) *EwDatabaseLink {
	retobj, err := FindEwDatabaseLink(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEwDatabaseLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEwDatabaseLink(exec boil.Executor, id uint64, selectCols ...string) (*EwDatabaseLink, error) {
	ewDatabaseLinkObj := &EwDatabaseLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ew_database_links` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(ewDatabaseLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ew_database_links")
	}

	return ewDatabaseLinkObj, nil
}

// FindEwDatabaseLinkP retrieves a single record by ID with an executor, and panics on error.
func FindEwDatabaseLinkP(exec boil.Executor, id uint64, selectCols ...string) *EwDatabaseLink {
	retobj, err := FindEwDatabaseLink(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EwDatabaseLink) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *EwDatabaseLink) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *EwDatabaseLink) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *EwDatabaseLink) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no ew_database_links provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ewDatabaseLinkColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	ewDatabaseLinkInsertCacheMut.RLock()
	cache, cached := ewDatabaseLinkInsertCache[key]
	ewDatabaseLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			ewDatabaseLinkColumns,
			ewDatabaseLinkColumnsWithDefault,
			ewDatabaseLinkColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(ewDatabaseLinkType, ewDatabaseLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ewDatabaseLinkType, ewDatabaseLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ew_database_links` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ew_database_links` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ew_database_links` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ewDatabaseLinkPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ew_database_links")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == ewDatabaseLinkMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ew_database_links")
	}

CacheNoHooks:
	if !cached {
		ewDatabaseLinkInsertCacheMut.Lock()
		ewDatabaseLinkInsertCache[key] = cache
		ewDatabaseLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single EwDatabaseLink record. See Update for
// whitelist behavior description.
func (o *EwDatabaseLink) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single EwDatabaseLink record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *EwDatabaseLink) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the EwDatabaseLink, and panics on error.
// See Update for whitelist behavior description.
func (o *EwDatabaseLink) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the EwDatabaseLink.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *EwDatabaseLink) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	ewDatabaseLinkUpdateCacheMut.RLock()
	cache, cached := ewDatabaseLinkUpdateCache[key]
	ewDatabaseLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			ewDatabaseLinkColumns,
			ewDatabaseLinkPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update ew_database_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ew_database_links` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ewDatabaseLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ewDatabaseLinkType, ewDatabaseLinkMapping, append(wl, ewDatabaseLinkPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update ew_database_links row")
	}

	if !cached {
		ewDatabaseLinkUpdateCacheMut.Lock()
		ewDatabaseLinkUpdateCache[key] = cache
		ewDatabaseLinkUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q ewDatabaseLinkQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q ewDatabaseLinkQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for ew_database_links")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EwDatabaseLinkSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o EwDatabaseLinkSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o EwDatabaseLinkSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EwDatabaseLinkSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ewDatabaseLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ew_database_links` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ewDatabaseLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in ewDatabaseLink slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EwDatabaseLink) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *EwDatabaseLink) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *EwDatabaseLink) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *EwDatabaseLink) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no ew_database_links provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ewDatabaseLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ewDatabaseLinkUpsertCacheMut.RLock()
	cache, cached := ewDatabaseLinkUpsertCache[key]
	ewDatabaseLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			ewDatabaseLinkColumns,
			ewDatabaseLinkColumnsWithDefault,
			ewDatabaseLinkColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			ewDatabaseLinkColumns,
			ewDatabaseLinkPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert ew_database_links, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "ew_database_links", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ew_database_links` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(ewDatabaseLinkType, ewDatabaseLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ewDatabaseLinkType, ewDatabaseLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ew_database_links")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == ewDatabaseLinkMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ew_database_links")
	}

CacheNoHooks:
	if !cached {
		ewDatabaseLinkUpsertCacheMut.Lock()
		ewDatabaseLinkUpsertCache[key] = cache
		ewDatabaseLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single EwDatabaseLink record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *EwDatabaseLink) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single EwDatabaseLink record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EwDatabaseLink) DeleteG() error {
	if o == nil {
		return errors.New("models: no EwDatabaseLink provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single EwDatabaseLink record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *EwDatabaseLink) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single EwDatabaseLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EwDatabaseLink) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no EwDatabaseLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ewDatabaseLinkPrimaryKeyMapping)
	sql := "DELETE FROM `ew_database_links` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from ew_database_links")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q ewDatabaseLinkQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q ewDatabaseLinkQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no ewDatabaseLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ew_database_links")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o EwDatabaseLinkSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o EwDatabaseLinkSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no EwDatabaseLink slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o EwDatabaseLinkSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EwDatabaseLinkSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no EwDatabaseLink slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(ewDatabaseLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ewDatabaseLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ew_database_links` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ewDatabaseLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ewDatabaseLink slice")
	}

	if len(ewDatabaseLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *EwDatabaseLink) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *EwDatabaseLink) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EwDatabaseLink) ReloadG() error {
	if o == nil {
		return errors.New("models: no EwDatabaseLink provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EwDatabaseLink) Reload(exec boil.Executor) error {
	ret, err := FindEwDatabaseLink(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EwDatabaseLinkSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EwDatabaseLinkSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EwDatabaseLinkSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty EwDatabaseLinkSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EwDatabaseLinkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	ewDatabaseLinks := EwDatabaseLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ewDatabaseLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ew_database_links`.* FROM `ew_database_links` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ewDatabaseLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&ewDatabaseLinks)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EwDatabaseLinkSlice")
	}

	*o = ewDatabaseLinks

	return nil
}

// EwDatabaseLinkExists checks if the EwDatabaseLink row exists.
func EwDatabaseLinkExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ew_database_links` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ew_database_links exists")
	}

	return exists, nil
}

// EwDatabaseLinkExistsG checks if the EwDatabaseLink row exists.
func EwDatabaseLinkExistsG(id uint64) (bool, error) {
	return EwDatabaseLinkExists(boil.GetDB(), id)
}

// EwDatabaseLinkExistsGP checks if the EwDatabaseLink row exists. Panics on error.
func EwDatabaseLinkExistsGP(id uint64) bool {
	e, err := EwDatabaseLinkExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EwDatabaseLinkExistsP checks if the EwDatabaseLink row exists. Panics on error.
func EwDatabaseLinkExistsP(exec boil.Executor, id uint64) bool {
	e, err := EwDatabaseLinkExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

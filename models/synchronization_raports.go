// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// SynchronizationRaport is an object representing the database table.
type SynchronizationRaport struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	RaportType      null.Int    `boil:"raport_type" json:"raport_type,omitempty" toml:"raport_type" yaml:"raport_type,omitempty"`
	DatabaseID      null.Uint64 `boil:"database_id" json:"database_id,omitempty" toml:"database_id" yaml:"database_id,omitempty"`
	DatabaseKey     null.String `boil:"database_key" json:"database_key,omitempty" toml:"database_key" yaml:"database_key,omitempty"`
	DatabaseFound   null.Int8   `boil:"database_found" json:"database_found,omitempty" toml:"database_found" yaml:"database_found,omitempty"`
	DurationMS      null.Int64  `boil:"duration_ms" json:"duration_ms,omitempty" toml:"duration_ms" yaml:"duration_ms,omitempty"`
	SRGenDurationMS null.Int64  `boil:"sr_gen_duration_ms" json:"sr_gen_duration_ms,omitempty" toml:"sr_gen_duration_ms" yaml:"sr_gen_duration_ms,omitempty"`
	StartedAt       null.Time   `boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	FinishedAt      null.Time   `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`

	R *synchronizationRaportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L synchronizationRaportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SynchronizationRaportColumns = struct {
	ID              string
	RaportType      string
	DatabaseID      string
	DatabaseKey     string
	DatabaseFound   string
	DurationMS      string
	SRGenDurationMS string
	StartedAt       string
	FinishedAt      string
}{
	ID:              "id",
	RaportType:      "raport_type",
	DatabaseID:      "database_id",
	DatabaseKey:     "database_key",
	DatabaseFound:   "database_found",
	DurationMS:      "duration_ms",
	SRGenDurationMS: "sr_gen_duration_ms",
	StartedAt:       "started_at",
	FinishedAt:      "finished_at",
}

// synchronizationRaportR is where relationships are stored.
type synchronizationRaportR struct {
	SRSRAddSongDatabaseVariations     SRAddSongDatabaseVariationSlice
	SRSREwConflicts                   SREwConflictSlice
	SRSREwDatabaseLinks               SREwDatabaseLinkSlice
	SRSREwSongs                       SREwSongSlice
	SRSRNewAuthors                    SRNewAuthorSlice
	SRSRNewBranches                   SRNewBranchSlice
	SRSRNewCopyrights                 SRNewCopyrightSlice
	SRSRNewVariationVersions          SRNewVariationVersionSlice
	SRSRNewVariations                 SRNewVariationSlice
	SRSRPassivatedVariationVersions   SRPassivatedVariationVersionSlice
	SRSRRemoveSongDatabaseVariations  SRRemoveSongDatabaseVariationSlice
	SRSRUpdatedEwDatabaseLinkVersions SRUpdatedEwDatabaseLinkVersionSlice
}

// synchronizationRaportL is where Load methods for each relationship are stored.
type synchronizationRaportL struct{}

var (
	synchronizationRaportColumns               = []string{"id", "raport_type", "database_id", "database_key", "database_found", "duration_ms", "sr_gen_duration_ms", "started_at", "finished_at"}
	synchronizationRaportColumnsWithoutDefault = []string{"raport_type", "database_id", "database_key", "database_found", "duration_ms", "sr_gen_duration_ms", "started_at", "finished_at"}
	synchronizationRaportColumnsWithDefault    = []string{"id"}
	synchronizationRaportPrimaryKeyColumns     = []string{"id"}
)

type (
	// SynchronizationRaportSlice is an alias for a slice of pointers to SynchronizationRaport.
	// This should generally be used opposed to []SynchronizationRaport.
	SynchronizationRaportSlice []*SynchronizationRaport
	// SynchronizationRaportHook is the signature for custom SynchronizationRaport hook methods
	SynchronizationRaportHook func(boil.Executor, *SynchronizationRaport) error

	synchronizationRaportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	synchronizationRaportType                 = reflect.TypeOf(&SynchronizationRaport{})
	synchronizationRaportMapping              = queries.MakeStructMapping(synchronizationRaportType)
	synchronizationRaportPrimaryKeyMapping, _ = queries.BindMapping(synchronizationRaportType, synchronizationRaportMapping, synchronizationRaportPrimaryKeyColumns)
	synchronizationRaportInsertCacheMut       sync.RWMutex
	synchronizationRaportInsertCache          = make(map[string]insertCache)
	synchronizationRaportUpdateCacheMut       sync.RWMutex
	synchronizationRaportUpdateCache          = make(map[string]updateCache)
	synchronizationRaportUpsertCacheMut       sync.RWMutex
	synchronizationRaportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var synchronizationRaportBeforeInsertHooks []SynchronizationRaportHook
var synchronizationRaportBeforeUpdateHooks []SynchronizationRaportHook
var synchronizationRaportBeforeDeleteHooks []SynchronizationRaportHook
var synchronizationRaportBeforeUpsertHooks []SynchronizationRaportHook

var synchronizationRaportAfterInsertHooks []SynchronizationRaportHook
var synchronizationRaportAfterSelectHooks []SynchronizationRaportHook
var synchronizationRaportAfterUpdateHooks []SynchronizationRaportHook
var synchronizationRaportAfterDeleteHooks []SynchronizationRaportHook
var synchronizationRaportAfterUpsertHooks []SynchronizationRaportHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SynchronizationRaport) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SynchronizationRaport) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SynchronizationRaport) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SynchronizationRaport) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SynchronizationRaport) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SynchronizationRaport) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SynchronizationRaport) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SynchronizationRaport) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SynchronizationRaport) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range synchronizationRaportAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSynchronizationRaportHook registers your hook function for all future operations.
func AddSynchronizationRaportHook(hookPoint boil.HookPoint, synchronizationRaportHook SynchronizationRaportHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		synchronizationRaportBeforeInsertHooks = append(synchronizationRaportBeforeInsertHooks, synchronizationRaportHook)
	case boil.BeforeUpdateHook:
		synchronizationRaportBeforeUpdateHooks = append(synchronizationRaportBeforeUpdateHooks, synchronizationRaportHook)
	case boil.BeforeDeleteHook:
		synchronizationRaportBeforeDeleteHooks = append(synchronizationRaportBeforeDeleteHooks, synchronizationRaportHook)
	case boil.BeforeUpsertHook:
		synchronizationRaportBeforeUpsertHooks = append(synchronizationRaportBeforeUpsertHooks, synchronizationRaportHook)
	case boil.AfterInsertHook:
		synchronizationRaportAfterInsertHooks = append(synchronizationRaportAfterInsertHooks, synchronizationRaportHook)
	case boil.AfterSelectHook:
		synchronizationRaportAfterSelectHooks = append(synchronizationRaportAfterSelectHooks, synchronizationRaportHook)
	case boil.AfterUpdateHook:
		synchronizationRaportAfterUpdateHooks = append(synchronizationRaportAfterUpdateHooks, synchronizationRaportHook)
	case boil.AfterDeleteHook:
		synchronizationRaportAfterDeleteHooks = append(synchronizationRaportAfterDeleteHooks, synchronizationRaportHook)
	case boil.AfterUpsertHook:
		synchronizationRaportAfterUpsertHooks = append(synchronizationRaportAfterUpsertHooks, synchronizationRaportHook)
	}
}

// OneP returns a single synchronizationRaport record from the query, and panics on error.
func (q synchronizationRaportQuery) OneP() *SynchronizationRaport {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single synchronizationRaport record from the query.
func (q synchronizationRaportQuery) One() (*SynchronizationRaport, error) {
	o := &SynchronizationRaport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for synchronization_raports")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SynchronizationRaport records from the query, and panics on error.
func (q synchronizationRaportQuery) AllP() SynchronizationRaportSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SynchronizationRaport records from the query.
func (q synchronizationRaportQuery) All() (SynchronizationRaportSlice, error) {
	var o []*SynchronizationRaport

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SynchronizationRaport slice")
	}

	if len(synchronizationRaportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SynchronizationRaport records in the query, and panics on error.
func (q synchronizationRaportQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SynchronizationRaport records in the query.
func (q synchronizationRaportQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count synchronization_raports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q synchronizationRaportQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q synchronizationRaportQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if synchronization_raports exists")
	}

	return count > 0, nil
}

// SRSRAddSongDatabaseVariationsG retrieves all the sr_add_song_database_variation's sr add song database variations via sr_id column.
func (o *SynchronizationRaport) SRSRAddSongDatabaseVariationsG(mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	return o.SRSRAddSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRSRAddSongDatabaseVariations retrieves all the sr_add_song_database_variation's sr add song database variations with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRAddSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_add_song_database_variations`.`sr_id`=?", o.ID),
	)

	query := SRAddSongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_add_song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_add_song_database_variations`.*"})
	}

	return query
}

// SRSREwConflictsG retrieves all the sr_ew_conflict's sr ew conflicts via sr_id column.
func (o *SynchronizationRaport) SRSREwConflictsG(mods ...qm.QueryMod) srEwConflictQuery {
	return o.SRSREwConflicts(boil.GetDB(), mods...)
}

// SRSREwConflicts retrieves all the sr_ew_conflict's sr ew conflicts with an executor via sr_id column.
func (o *SynchronizationRaport) SRSREwConflicts(exec boil.Executor, mods ...qm.QueryMod) srEwConflictQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_conflicts`.`sr_id`=?", o.ID),
	)

	query := SREwConflicts(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_conflicts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_conflicts`.*"})
	}

	return query
}

// SRSREwDatabaseLinksG retrieves all the sr_ew_database_link's sr ew database links via sr_id column.
func (o *SynchronizationRaport) SRSREwDatabaseLinksG(mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	return o.SRSREwDatabaseLinks(boil.GetDB(), mods...)
}

// SRSREwDatabaseLinks retrieves all the sr_ew_database_link's sr ew database links with an executor via sr_id column.
func (o *SynchronizationRaport) SRSREwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_database_links`.`sr_id`=?", o.ID),
	)

	query := SREwDatabaseLinks(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_database_links`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_database_links`.*"})
	}

	return query
}

// SRSREwSongsG retrieves all the sr_ew_song's sr ew song via sr_id column.
func (o *SynchronizationRaport) SRSREwSongsG(mods ...qm.QueryMod) srEwSongQuery {
	return o.SRSREwSongs(boil.GetDB(), mods...)
}

// SRSREwSongs retrieves all the sr_ew_song's sr ew song with an executor via sr_id column.
func (o *SynchronizationRaport) SRSREwSongs(exec boil.Executor, mods ...qm.QueryMod) srEwSongQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_song`.`sr_id`=?", o.ID),
	)

	query := SREwSongs(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_song`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_song`.*"})
	}

	return query
}

// SRSRNewAuthorsG retrieves all the sr_new_author's sr new authors via sr_id column.
func (o *SynchronizationRaport) SRSRNewAuthorsG(mods ...qm.QueryMod) srNewAuthorQuery {
	return o.SRSRNewAuthors(boil.GetDB(), mods...)
}

// SRSRNewAuthors retrieves all the sr_new_author's sr new authors with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRNewAuthors(exec boil.Executor, mods ...qm.QueryMod) srNewAuthorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_authors`.`sr_id`=?", o.ID),
	)

	query := SRNewAuthors(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_authors`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_authors`.*"})
	}

	return query
}

// SRSRNewBranchesG retrieves all the sr_new_branch's sr new branches via sr_id column.
func (o *SynchronizationRaport) SRSRNewBranchesG(mods ...qm.QueryMod) srNewBranchQuery {
	return o.SRSRNewBranches(boil.GetDB(), mods...)
}

// SRSRNewBranches retrieves all the sr_new_branch's sr new branches with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRNewBranches(exec boil.Executor, mods ...qm.QueryMod) srNewBranchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_branches`.`sr_id`=?", o.ID),
	)

	query := SRNewBranches(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_branches`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_branches`.*"})
	}

	return query
}

// SRSRNewCopyrightsG retrieves all the sr_new_copyright's sr new copyrights via sr_id column.
func (o *SynchronizationRaport) SRSRNewCopyrightsG(mods ...qm.QueryMod) srNewCopyrightQuery {
	return o.SRSRNewCopyrights(boil.GetDB(), mods...)
}

// SRSRNewCopyrights retrieves all the sr_new_copyright's sr new copyrights with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRNewCopyrights(exec boil.Executor, mods ...qm.QueryMod) srNewCopyrightQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_copyrights`.`sr_id`=?", o.ID),
	)

	query := SRNewCopyrights(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_copyrights`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_copyrights`.*"})
	}

	return query
}

// SRSRNewVariationVersionsG retrieves all the sr_new_variation_version's sr new variation versions via sr_id column.
func (o *SynchronizationRaport) SRSRNewVariationVersionsG(mods ...qm.QueryMod) srNewVariationVersionQuery {
	return o.SRSRNewVariationVersions(boil.GetDB(), mods...)
}

// SRSRNewVariationVersions retrieves all the sr_new_variation_version's sr new variation versions with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRNewVariationVersions(exec boil.Executor, mods ...qm.QueryMod) srNewVariationVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_variation_versions`.`sr_id`=?", o.ID),
	)

	query := SRNewVariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_variation_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_variation_versions`.*"})
	}

	return query
}

// SRSRNewVariationsG retrieves all the sr_new_variation's sr new variations via sr_id column.
func (o *SynchronizationRaport) SRSRNewVariationsG(mods ...qm.QueryMod) srNewVariationQuery {
	return o.SRSRNewVariations(boil.GetDB(), mods...)
}

// SRSRNewVariations retrieves all the sr_new_variation's sr new variations with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRNewVariations(exec boil.Executor, mods ...qm.QueryMod) srNewVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_new_variations`.`sr_id`=?", o.ID),
	)

	query := SRNewVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_new_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_new_variations`.*"})
	}

	return query
}

// SRSRPassivatedVariationVersionsG retrieves all the sr_passivated_variation_version's sr passivated variation versions via sr_id column.
func (o *SynchronizationRaport) SRSRPassivatedVariationVersionsG(mods ...qm.QueryMod) srPassivatedVariationVersionQuery {
	return o.SRSRPassivatedVariationVersions(boil.GetDB(), mods...)
}

// SRSRPassivatedVariationVersions retrieves all the sr_passivated_variation_version's sr passivated variation versions with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRPassivatedVariationVersions(exec boil.Executor, mods ...qm.QueryMod) srPassivatedVariationVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_passivated_variation_versions`.`sr_id`=?", o.ID),
	)

	query := SRPassivatedVariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_passivated_variation_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_passivated_variation_versions`.*"})
	}

	return query
}

// SRSRRemoveSongDatabaseVariationsG retrieves all the sr_remove_song_database_variation's sr remove song database variations via sr_id column.
func (o *SynchronizationRaport) SRSRRemoveSongDatabaseVariationsG(mods ...qm.QueryMod) srRemoveSongDatabaseVariationQuery {
	return o.SRSRRemoveSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRSRRemoveSongDatabaseVariations retrieves all the sr_remove_song_database_variation's sr remove song database variations with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRRemoveSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srRemoveSongDatabaseVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_remove_song_database_variations`.`sr_id`=?", o.ID),
	)

	query := SRRemoveSongDatabaseVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_remove_song_database_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_remove_song_database_variations`.*"})
	}

	return query
}

// SRSRUpdatedEwDatabaseLinkVersionsG retrieves all the sr_updated_ew_database_link_version's sr updated ew database link versions via sr_id column.
func (o *SynchronizationRaport) SRSRUpdatedEwDatabaseLinkVersionsG(mods ...qm.QueryMod) srUpdatedEwDatabaseLinkVersionQuery {
	return o.SRSRUpdatedEwDatabaseLinkVersions(boil.GetDB(), mods...)
}

// SRSRUpdatedEwDatabaseLinkVersions retrieves all the sr_updated_ew_database_link_version's sr updated ew database link versions with an executor via sr_id column.
func (o *SynchronizationRaport) SRSRUpdatedEwDatabaseLinkVersions(exec boil.Executor, mods ...qm.QueryMod) srUpdatedEwDatabaseLinkVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_updated_ew_database_link_versions`.`sr_id`=?", o.ID),
	)

	query := SRUpdatedEwDatabaseLinkVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_updated_ew_database_link_versions`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_updated_ew_database_link_versions`.*"})
	}

	return query
}

// LoadSRSRAddSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRAddSongDatabaseVariations(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_add_song_database_variations` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_add_song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SRAddSongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_add_song_database_variations")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRAddSongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRAddSongDatabaseVariations = append(local.R.SRSRAddSongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSREwConflicts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSREwConflicts(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_conflicts` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_conflicts")
	}
	defer results.Close()

	var resultSlice []*SREwConflict
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_conflicts")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSREwConflicts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSREwConflicts = append(local.R.SRSREwConflicts, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSREwDatabaseLinks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSREwDatabaseLinks(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_database_links` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_database_links")
	}
	defer results.Close()

	var resultSlice []*SREwDatabaseLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_database_links")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSREwDatabaseLinks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSREwDatabaseLinks = append(local.R.SRSREwDatabaseLinks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSREwSongs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSREwSongs(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_song` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_song")
	}
	defer results.Close()

	var resultSlice []*SREwSong
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_song")
	}

	if len(srEwSongAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSREwSongs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSREwSongs = append(local.R.SRSREwSongs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRNewAuthors allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRNewAuthors(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_authors` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_authors")
	}
	defer results.Close()

	var resultSlice []*SRNewAuthor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_authors")
	}

	if len(srNewAuthorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRNewAuthors = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRNewAuthors = append(local.R.SRSRNewAuthors, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRNewBranches allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRNewBranches(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_branches` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_branches")
	}
	defer results.Close()

	var resultSlice []*SRNewBranch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_branches")
	}

	if len(srNewBranchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRNewBranches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRNewBranches = append(local.R.SRSRNewBranches, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRNewCopyrights allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRNewCopyrights(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_copyrights` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_copyrights")
	}
	defer results.Close()

	var resultSlice []*SRNewCopyright
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_copyrights")
	}

	if len(srNewCopyrightAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRNewCopyrights = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRNewCopyrights = append(local.R.SRSRNewCopyrights, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRNewVariationVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRNewVariationVersions(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_variation_versions` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_variation_versions")
	}
	defer results.Close()

	var resultSlice []*SRNewVariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_variation_versions")
	}

	if len(srNewVariationVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRNewVariationVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRNewVariationVersions = append(local.R.SRSRNewVariationVersions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRNewVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRNewVariations(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_new_variations` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_new_variations")
	}
	defer results.Close()

	var resultSlice []*SRNewVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_new_variations")
	}

	if len(srNewVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRNewVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRNewVariations = append(local.R.SRSRNewVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRPassivatedVariationVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRPassivatedVariationVersions(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_passivated_variation_versions` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_passivated_variation_versions")
	}
	defer results.Close()

	var resultSlice []*SRPassivatedVariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_passivated_variation_versions")
	}

	if len(srPassivatedVariationVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRPassivatedVariationVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRPassivatedVariationVersions = append(local.R.SRSRPassivatedVariationVersions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRRemoveSongDatabaseVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRRemoveSongDatabaseVariations(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_remove_song_database_variations` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_remove_song_database_variations")
	}
	defer results.Close()

	var resultSlice []*SRRemoveSongDatabaseVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_remove_song_database_variations")
	}

	if len(srRemoveSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRRemoveSongDatabaseVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRRemoveSongDatabaseVariations = append(local.R.SRSRRemoveSongDatabaseVariations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSRSRUpdatedEwDatabaseLinkVersions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (synchronizationRaportL) LoadSRSRUpdatedEwDatabaseLinkVersions(e boil.Executor, singular bool, maybeSynchronizationRaport interface{}) error {
	var slice []*SynchronizationRaport
	var object *SynchronizationRaport

	count := 1
	if singular {
		object = maybeSynchronizationRaport.(*SynchronizationRaport)
	} else {
		slice = *maybeSynchronizationRaport.(*[]*SynchronizationRaport)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &synchronizationRaportR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &synchronizationRaportR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_updated_ew_database_link_versions` where `sr_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_updated_ew_database_link_versions")
	}
	defer results.Close()

	var resultSlice []*SRUpdatedEwDatabaseLinkVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_updated_ew_database_link_versions")
	}

	if len(srUpdatedEwDatabaseLinkVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SRSRUpdatedEwDatabaseLinkVersions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SRID {
				local.R.SRSRUpdatedEwDatabaseLinkVersions = append(local.R.SRSRUpdatedEwDatabaseLinkVersions, foreign)
				break
			}
		}
	}

	return nil
}

// AddSRSRAddSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRAddSongDatabaseVariations.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRAddSongDatabaseVariationsG(insert bool, related ...*SRAddSongDatabaseVariation) error {
	return o.AddSRSRAddSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSRSRAddSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRAddSongDatabaseVariations.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRAddSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SRAddSongDatabaseVariation) {
	if err := o.AddSRSRAddSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRAddSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRAddSongDatabaseVariations.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRAddSongDatabaseVariationsGP(insert bool, related ...*SRAddSongDatabaseVariation) {
	if err := o.AddSRSRAddSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRAddSongDatabaseVariations adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRAddSongDatabaseVariations.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRAddSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SRAddSongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRAddSongDatabaseVariations: related,
		}
	} else {
		o.R.SRSRAddSongDatabaseVariations = append(o.R.SRSRAddSongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srAddSongDatabaseVariationR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSREwConflictsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwConflicts.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSREwConflictsG(insert bool, related ...*SREwConflict) error {
	return o.AddSRSREwConflicts(boil.GetDB(), insert, related...)
}

// AddSRSREwConflictsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwConflicts.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSREwConflictsP(exec boil.Executor, insert bool, related ...*SREwConflict) {
	if err := o.AddSRSREwConflicts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSREwConflictsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwConflicts.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSREwConflictsGP(insert bool, related ...*SREwConflict) {
	if err := o.AddSRSREwConflicts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSREwConflicts adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwConflicts.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSREwConflicts(exec boil.Executor, insert bool, related ...*SREwConflict) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_conflicts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSREwConflicts: related,
		}
	} else {
		o.R.SRSREwConflicts = append(o.R.SRSREwConflicts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwConflictR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSREwDatabaseLinksG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwDatabaseLinks.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSREwDatabaseLinksG(insert bool, related ...*SREwDatabaseLink) error {
	return o.AddSRSREwDatabaseLinks(boil.GetDB(), insert, related...)
}

// AddSRSREwDatabaseLinksP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwDatabaseLinks.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSREwDatabaseLinksP(exec boil.Executor, insert bool, related ...*SREwDatabaseLink) {
	if err := o.AddSRSREwDatabaseLinks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSREwDatabaseLinksGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwDatabaseLinks.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSREwDatabaseLinksGP(insert bool, related ...*SREwDatabaseLink) {
	if err := o.AddSRSREwDatabaseLinks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSREwDatabaseLinks adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwDatabaseLinks.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSREwDatabaseLinks(exec boil.Executor, insert bool, related ...*SREwDatabaseLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_database_links` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSREwDatabaseLinks: related,
		}
	} else {
		o.R.SRSREwDatabaseLinks = append(o.R.SRSREwDatabaseLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwDatabaseLinkR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSREwSongsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwSongs.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSREwSongsG(insert bool, related ...*SREwSong) error {
	return o.AddSRSREwSongs(boil.GetDB(), insert, related...)
}

// AddSRSREwSongsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwSongs.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSREwSongsP(exec boil.Executor, insert bool, related ...*SREwSong) {
	if err := o.AddSRSREwSongs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSREwSongsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwSongs.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSREwSongsGP(insert bool, related ...*SREwSong) {
	if err := o.AddSRSREwSongs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSREwSongs adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSREwSongs.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSREwSongs(exec boil.Executor, insert bool, related ...*SREwSong) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_song` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srEwSongPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSREwSongs: related,
		}
	} else {
		o.R.SRSREwSongs = append(o.R.SRSREwSongs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwSongR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRNewAuthorsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewAuthors.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRNewAuthorsG(insert bool, related ...*SRNewAuthor) error {
	return o.AddSRSRNewAuthors(boil.GetDB(), insert, related...)
}

// AddSRSRNewAuthorsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewAuthors.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRNewAuthorsP(exec boil.Executor, insert bool, related ...*SRNewAuthor) {
	if err := o.AddSRSRNewAuthors(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewAuthorsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewAuthors.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRNewAuthorsGP(insert bool, related ...*SRNewAuthor) {
	if err := o.AddSRSRNewAuthors(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewAuthors adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewAuthors.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRNewAuthors(exec boil.Executor, insert bool, related ...*SRNewAuthor) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_authors` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srNewAuthorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRNewAuthors: related,
		}
	} else {
		o.R.SRSRNewAuthors = append(o.R.SRSRNewAuthors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewAuthorR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRNewBranchesG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewBranches.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRNewBranchesG(insert bool, related ...*SRNewBranch) error {
	return o.AddSRSRNewBranches(boil.GetDB(), insert, related...)
}

// AddSRSRNewBranchesP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewBranches.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRNewBranchesP(exec boil.Executor, insert bool, related ...*SRNewBranch) {
	if err := o.AddSRSRNewBranches(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewBranchesGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewBranches.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRNewBranchesGP(insert bool, related ...*SRNewBranch) {
	if err := o.AddSRSRNewBranches(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewBranches adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewBranches.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRNewBranches(exec boil.Executor, insert bool, related ...*SRNewBranch) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_branches` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srNewBranchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRNewBranches: related,
		}
	} else {
		o.R.SRSRNewBranches = append(o.R.SRSRNewBranches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewBranchR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRNewCopyrightsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewCopyrights.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRNewCopyrightsG(insert bool, related ...*SRNewCopyright) error {
	return o.AddSRSRNewCopyrights(boil.GetDB(), insert, related...)
}

// AddSRSRNewCopyrightsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewCopyrights.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRNewCopyrightsP(exec boil.Executor, insert bool, related ...*SRNewCopyright) {
	if err := o.AddSRSRNewCopyrights(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewCopyrightsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewCopyrights.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRNewCopyrightsGP(insert bool, related ...*SRNewCopyright) {
	if err := o.AddSRSRNewCopyrights(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewCopyrights adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewCopyrights.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRNewCopyrights(exec boil.Executor, insert bool, related ...*SRNewCopyright) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_copyrights` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srNewCopyrightPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRNewCopyrights: related,
		}
	} else {
		o.R.SRSRNewCopyrights = append(o.R.SRSRNewCopyrights, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewCopyrightR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRNewVariationVersionsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariationVersions.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRNewVariationVersionsG(insert bool, related ...*SRNewVariationVersion) error {
	return o.AddSRSRNewVariationVersions(boil.GetDB(), insert, related...)
}

// AddSRSRNewVariationVersionsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariationVersions.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRNewVariationVersionsP(exec boil.Executor, insert bool, related ...*SRNewVariationVersion) {
	if err := o.AddSRSRNewVariationVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewVariationVersionsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariationVersions.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRNewVariationVersionsGP(insert bool, related ...*SRNewVariationVersion) {
	if err := o.AddSRSRNewVariationVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewVariationVersions adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariationVersions.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRNewVariationVersions(exec boil.Executor, insert bool, related ...*SRNewVariationVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_variation_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srNewVariationVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRNewVariationVersions: related,
		}
	} else {
		o.R.SRSRNewVariationVersions = append(o.R.SRSRNewVariationVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewVariationVersionR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRNewVariationsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariations.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRNewVariationsG(insert bool, related ...*SRNewVariation) error {
	return o.AddSRSRNewVariations(boil.GetDB(), insert, related...)
}

// AddSRSRNewVariationsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariations.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRNewVariationsP(exec boil.Executor, insert bool, related ...*SRNewVariation) {
	if err := o.AddSRSRNewVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewVariationsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariations.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRNewVariationsGP(insert bool, related ...*SRNewVariation) {
	if err := o.AddSRSRNewVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRNewVariations adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRNewVariations.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRNewVariations(exec boil.Executor, insert bool, related ...*SRNewVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_new_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srNewVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRNewVariations: related,
		}
	} else {
		o.R.SRSRNewVariations = append(o.R.SRSRNewVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srNewVariationR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRPassivatedVariationVersionsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRPassivatedVariationVersions.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRPassivatedVariationVersionsG(insert bool, related ...*SRPassivatedVariationVersion) error {
	return o.AddSRSRPassivatedVariationVersions(boil.GetDB(), insert, related...)
}

// AddSRSRPassivatedVariationVersionsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRPassivatedVariationVersions.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRPassivatedVariationVersionsP(exec boil.Executor, insert bool, related ...*SRPassivatedVariationVersion) {
	if err := o.AddSRSRPassivatedVariationVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRPassivatedVariationVersionsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRPassivatedVariationVersions.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRPassivatedVariationVersionsGP(insert bool, related ...*SRPassivatedVariationVersion) {
	if err := o.AddSRSRPassivatedVariationVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRPassivatedVariationVersions adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRPassivatedVariationVersions.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRPassivatedVariationVersions(exec boil.Executor, insert bool, related ...*SRPassivatedVariationVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_passivated_variation_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srPassivatedVariationVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRPassivatedVariationVersions: related,
		}
	} else {
		o.R.SRSRPassivatedVariationVersions = append(o.R.SRSRPassivatedVariationVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srPassivatedVariationVersionR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRRemoveSongDatabaseVariationsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRRemoveSongDatabaseVariations.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRRemoveSongDatabaseVariationsG(insert bool, related ...*SRRemoveSongDatabaseVariation) error {
	return o.AddSRSRRemoveSongDatabaseVariations(boil.GetDB(), insert, related...)
}

// AddSRSRRemoveSongDatabaseVariationsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRRemoveSongDatabaseVariations.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRRemoveSongDatabaseVariationsP(exec boil.Executor, insert bool, related ...*SRRemoveSongDatabaseVariation) {
	if err := o.AddSRSRRemoveSongDatabaseVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRRemoveSongDatabaseVariationsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRRemoveSongDatabaseVariations.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRRemoveSongDatabaseVariationsGP(insert bool, related ...*SRRemoveSongDatabaseVariation) {
	if err := o.AddSRSRRemoveSongDatabaseVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRRemoveSongDatabaseVariations adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRRemoveSongDatabaseVariations.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRRemoveSongDatabaseVariations(exec boil.Executor, insert bool, related ...*SRRemoveSongDatabaseVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_remove_song_database_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srRemoveSongDatabaseVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRRemoveSongDatabaseVariations: related,
		}
	} else {
		o.R.SRSRRemoveSongDatabaseVariations = append(o.R.SRSRRemoveSongDatabaseVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srRemoveSongDatabaseVariationR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// AddSRSRUpdatedEwDatabaseLinkVersionsG adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRUpdatedEwDatabaseLinkVersions.
// Sets related.R.SR appropriately.
// Uses the global database handle.
func (o *SynchronizationRaport) AddSRSRUpdatedEwDatabaseLinkVersionsG(insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) error {
	return o.AddSRSRUpdatedEwDatabaseLinkVersions(boil.GetDB(), insert, related...)
}

// AddSRSRUpdatedEwDatabaseLinkVersionsP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRUpdatedEwDatabaseLinkVersions.
// Sets related.R.SR appropriately.
// Panics on error.
func (o *SynchronizationRaport) AddSRSRUpdatedEwDatabaseLinkVersionsP(exec boil.Executor, insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) {
	if err := o.AddSRSRUpdatedEwDatabaseLinkVersions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRUpdatedEwDatabaseLinkVersionsGP adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRUpdatedEwDatabaseLinkVersions.
// Sets related.R.SR appropriately.
// Uses the global database handle and panics on error.
func (o *SynchronizationRaport) AddSRSRUpdatedEwDatabaseLinkVersionsGP(insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) {
	if err := o.AddSRSRUpdatedEwDatabaseLinkVersions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSRSRUpdatedEwDatabaseLinkVersions adds the given related objects to the existing relationships
// of the synchronization_raport, optionally inserting them as new records.
// Appends related to o.R.SRSRUpdatedEwDatabaseLinkVersions.
// Sets related.R.SR appropriately.
func (o *SynchronizationRaport) AddSRSRUpdatedEwDatabaseLinkVersions(exec boil.Executor, insert bool, related ...*SRUpdatedEwDatabaseLinkVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SRID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_updated_ew_database_link_versions` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
				strmangle.WhereClause("`", "`", 0, srUpdatedEwDatabaseLinkVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SRID = o.ID
		}
	}

	if o.R == nil {
		o.R = &synchronizationRaportR{
			SRSRUpdatedEwDatabaseLinkVersions: related,
		}
	} else {
		o.R.SRSRUpdatedEwDatabaseLinkVersions = append(o.R.SRSRUpdatedEwDatabaseLinkVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srUpdatedEwDatabaseLinkVersionR{
				SR: o,
			}
		} else {
			rel.R.SR = o
		}
	}
	return nil
}

// SynchronizationRaportsG retrieves all records.
func SynchronizationRaportsG(mods ...qm.QueryMod) synchronizationRaportQuery {
	return SynchronizationRaports(boil.GetDB(), mods...)
}

// SynchronizationRaports retrieves all the records using an executor.
func SynchronizationRaports(exec boil.Executor, mods ...qm.QueryMod) synchronizationRaportQuery {
	mods = append(mods, qm.From("`synchronization_raports`"))
	return synchronizationRaportQuery{NewQuery(exec, mods...)}
}

// FindSynchronizationRaportG retrieves a single record by ID.
func FindSynchronizationRaportG(id uint64, selectCols ...string) (*SynchronizationRaport, error) {
	return FindSynchronizationRaport(boil.GetDB(), id, selectCols...)
}

// FindSynchronizationRaportGP retrieves a single record by ID, and panics on error.
func FindSynchronizationRaportGP(id uint64, selectCols ...string) *SynchronizationRaport {
	retobj, err := FindSynchronizationRaport(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSynchronizationRaport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSynchronizationRaport(exec boil.Executor, id uint64, selectCols ...string) (*SynchronizationRaport, error) {
	synchronizationRaportObj := &SynchronizationRaport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `synchronization_raports` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(synchronizationRaportObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from synchronization_raports")
	}

	return synchronizationRaportObj, nil
}

// FindSynchronizationRaportP retrieves a single record by ID with an executor, and panics on error.
func FindSynchronizationRaportP(exec boil.Executor, id uint64, selectCols ...string) *SynchronizationRaport {
	retobj, err := FindSynchronizationRaport(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SynchronizationRaport) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SynchronizationRaport) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SynchronizationRaport) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SynchronizationRaport) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no synchronization_raports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(synchronizationRaportColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	synchronizationRaportInsertCacheMut.RLock()
	cache, cached := synchronizationRaportInsertCache[key]
	synchronizationRaportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			synchronizationRaportColumns,
			synchronizationRaportColumnsWithDefault,
			synchronizationRaportColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(synchronizationRaportType, synchronizationRaportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(synchronizationRaportType, synchronizationRaportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `synchronization_raports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `synchronization_raports` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `synchronization_raports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, synchronizationRaportPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into synchronization_raports")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == synchronizationRaportMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for synchronization_raports")
	}

CacheNoHooks:
	if !cached {
		synchronizationRaportInsertCacheMut.Lock()
		synchronizationRaportInsertCache[key] = cache
		synchronizationRaportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SynchronizationRaport record. See Update for
// whitelist behavior description.
func (o *SynchronizationRaport) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SynchronizationRaport record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SynchronizationRaport) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SynchronizationRaport, and panics on error.
// See Update for whitelist behavior description.
func (o *SynchronizationRaport) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SynchronizationRaport.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SynchronizationRaport) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	synchronizationRaportUpdateCacheMut.RLock()
	cache, cached := synchronizationRaportUpdateCache[key]
	synchronizationRaportUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			synchronizationRaportColumns,
			synchronizationRaportPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update synchronization_raports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `synchronization_raports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, synchronizationRaportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(synchronizationRaportType, synchronizationRaportMapping, append(wl, synchronizationRaportPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update synchronization_raports row")
	}

	if !cached {
		synchronizationRaportUpdateCacheMut.Lock()
		synchronizationRaportUpdateCache[key] = cache
		synchronizationRaportUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q synchronizationRaportQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q synchronizationRaportQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for synchronization_raports")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SynchronizationRaportSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SynchronizationRaportSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SynchronizationRaportSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SynchronizationRaportSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), synchronizationRaportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `synchronization_raports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, synchronizationRaportPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in synchronizationRaport slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SynchronizationRaport) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SynchronizationRaport) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SynchronizationRaport) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SynchronizationRaport) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no synchronization_raports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(synchronizationRaportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	synchronizationRaportUpsertCacheMut.RLock()
	cache, cached := synchronizationRaportUpsertCache[key]
	synchronizationRaportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			synchronizationRaportColumns,
			synchronizationRaportColumnsWithDefault,
			synchronizationRaportColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			synchronizationRaportColumns,
			synchronizationRaportPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert synchronization_raports, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "synchronization_raports", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `synchronization_raports` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(synchronizationRaportType, synchronizationRaportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(synchronizationRaportType, synchronizationRaportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for synchronization_raports")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == synchronizationRaportMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for synchronization_raports")
	}

CacheNoHooks:
	if !cached {
		synchronizationRaportUpsertCacheMut.Lock()
		synchronizationRaportUpsertCache[key] = cache
		synchronizationRaportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SynchronizationRaport record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SynchronizationRaport) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SynchronizationRaport record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SynchronizationRaport) DeleteG() error {
	if o == nil {
		return errors.New("models: no SynchronizationRaport provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SynchronizationRaport record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SynchronizationRaport) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SynchronizationRaport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SynchronizationRaport) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SynchronizationRaport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), synchronizationRaportPrimaryKeyMapping)
	sql := "DELETE FROM `synchronization_raports` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from synchronization_raports")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q synchronizationRaportQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q synchronizationRaportQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no synchronizationRaportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from synchronization_raports")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SynchronizationRaportSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SynchronizationRaportSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SynchronizationRaport slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SynchronizationRaportSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SynchronizationRaportSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SynchronizationRaport slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(synchronizationRaportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), synchronizationRaportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `synchronization_raports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, synchronizationRaportPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from synchronizationRaport slice")
	}

	if len(synchronizationRaportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SynchronizationRaport) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SynchronizationRaport) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SynchronizationRaport) ReloadG() error {
	if o == nil {
		return errors.New("models: no SynchronizationRaport provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SynchronizationRaport) Reload(exec boil.Executor) error {
	ret, err := FindSynchronizationRaport(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SynchronizationRaportSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SynchronizationRaportSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SynchronizationRaportSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SynchronizationRaportSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SynchronizationRaportSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	synchronizationRaports := SynchronizationRaportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), synchronizationRaportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `synchronization_raports`.* FROM `synchronization_raports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, synchronizationRaportPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&synchronizationRaports)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SynchronizationRaportSlice")
	}

	*o = synchronizationRaports

	return nil
}

// SynchronizationRaportExists checks if the SynchronizationRaport row exists.
func SynchronizationRaportExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `synchronization_raports` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if synchronization_raports exists")
	}

	return exists, nil
}

// SynchronizationRaportExistsG checks if the SynchronizationRaport row exists.
func SynchronizationRaportExistsG(id uint64) (bool, error) {
	return SynchronizationRaportExists(boil.GetDB(), id)
}

// SynchronizationRaportExistsGP checks if the SynchronizationRaport row exists. Panics on error.
func SynchronizationRaportExistsGP(id uint64) bool {
	e, err := SynchronizationRaportExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SynchronizationRaportExistsP checks if the SynchronizationRaport row exists. Panics on error.
func SynchronizationRaportExistsP(exec boil.Executor, id uint64) bool {
	e, err := SynchronizationRaportExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

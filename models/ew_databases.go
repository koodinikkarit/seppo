// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// EwDatabase is an object representing the database table.
type EwDatabase struct {
	ID                             uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	SongDatabaseID                 uint64      `boil:"song_database_id" json:"song_database_id" toml:"song_database_id" yaml:"song_database_id"`
	EwDatabaseKey                  string      `boil:"ew_database_key" json:"ew_database_key" toml:"ew_database_key" yaml:"ew_database_key"`
	UseNewestVersion               null.Int8   `boil:"use_newest_version" json:"use_newest_version,omitempty" toml:"use_newest_version" yaml:"use_newest_version,omitempty"`
	MatiasClientID                 null.Uint64 `boil:"matias_client_id" json:"matias_client_id,omitempty" toml:"matias_client_id" yaml:"matias_client_id,omitempty"`
	RemoveSongsFromEwDatabase      int8        `boil:"remove_songs_from_ew_database" json:"remove_songs_from_ew_database" toml:"remove_songs_from_ew_database" yaml:"remove_songs_from_ew_database"`
	RemoveSongsFromSongDatabase    int8        `boil:"remove_songs_from_song_database" json:"remove_songs_from_song_database" toml:"remove_songs_from_song_database" yaml:"remove_songs_from_song_database"`
	VariationVersionConflictAction uint        `boil:"variation_version_conflict_action" json:"variation_version_conflict_action" toml:"variation_version_conflict_action" yaml:"variation_version_conflict_action"`
	CreatedAt                      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt                      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *ewDatabaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L ewDatabaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EwDatabaseColumns = struct {
	ID                             string
	Name                           string
	SongDatabaseID                 string
	EwDatabaseKey                  string
	UseNewestVersion               string
	MatiasClientID                 string
	RemoveSongsFromEwDatabase      string
	RemoveSongsFromSongDatabase    string
	VariationVersionConflictAction string
	CreatedAt                      string
	UpdatedAt                      string
	DeletedAt                      string
}{
	ID:                             "id",
	Name:                           "name",
	SongDatabaseID:                 "song_database_id",
	EwDatabaseKey:                  "ew_database_key",
	UseNewestVersion:               "use_newest_version",
	MatiasClientID:                 "matias_client_id",
	RemoveSongsFromEwDatabase:      "remove_songs_from_ew_database",
	RemoveSongsFromSongDatabase:    "remove_songs_from_song_database",
	VariationVersionConflictAction: "variation_version_conflict_action",
	CreatedAt:                      "created_at",
	UpdatedAt:                      "updated_at",
	DeletedAt:                      "deleted_at",
}

// ewDatabaseR is where relationships are stored.
type ewDatabaseR struct {
	SongDatabase      *SongDatabase
	MatiasClient      *MatiasClient
	EwDatabaseLinks   EwDatabaseLinkSlice
	SREwConflicts     SREwConflictSlice
	SREwDatabaseLinks SREwDatabaseLinkSlice
}

// ewDatabaseL is where Load methods for each relationship are stored.
type ewDatabaseL struct{}

var (
	ewDatabaseColumns               = []string{"id", "name", "song_database_id", "ew_database_key", "use_newest_version", "matias_client_id", "remove_songs_from_ew_database", "remove_songs_from_song_database", "variation_version_conflict_action", "created_at", "updated_at", "deleted_at"}
	ewDatabaseColumnsWithoutDefault = []string{"name", "song_database_id", "ew_database_key", "use_newest_version", "matias_client_id", "created_at", "updated_at", "deleted_at"}
	ewDatabaseColumnsWithDefault    = []string{"id", "remove_songs_from_ew_database", "remove_songs_from_song_database", "variation_version_conflict_action"}
	ewDatabasePrimaryKeyColumns     = []string{"id"}
)

type (
	// EwDatabaseSlice is an alias for a slice of pointers to EwDatabase.
	// This should generally be used opposed to []EwDatabase.
	EwDatabaseSlice []*EwDatabase
	// EwDatabaseHook is the signature for custom EwDatabase hook methods
	EwDatabaseHook func(boil.Executor, *EwDatabase) error

	ewDatabaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ewDatabaseType                 = reflect.TypeOf(&EwDatabase{})
	ewDatabaseMapping              = queries.MakeStructMapping(ewDatabaseType)
	ewDatabasePrimaryKeyMapping, _ = queries.BindMapping(ewDatabaseType, ewDatabaseMapping, ewDatabasePrimaryKeyColumns)
	ewDatabaseInsertCacheMut       sync.RWMutex
	ewDatabaseInsertCache          = make(map[string]insertCache)
	ewDatabaseUpdateCacheMut       sync.RWMutex
	ewDatabaseUpdateCache          = make(map[string]updateCache)
	ewDatabaseUpsertCacheMut       sync.RWMutex
	ewDatabaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var ewDatabaseBeforeInsertHooks []EwDatabaseHook
var ewDatabaseBeforeUpdateHooks []EwDatabaseHook
var ewDatabaseBeforeDeleteHooks []EwDatabaseHook
var ewDatabaseBeforeUpsertHooks []EwDatabaseHook

var ewDatabaseAfterInsertHooks []EwDatabaseHook
var ewDatabaseAfterSelectHooks []EwDatabaseHook
var ewDatabaseAfterUpdateHooks []EwDatabaseHook
var ewDatabaseAfterDeleteHooks []EwDatabaseHook
var ewDatabaseAfterUpsertHooks []EwDatabaseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EwDatabase) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EwDatabase) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EwDatabase) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EwDatabase) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EwDatabase) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EwDatabase) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EwDatabase) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EwDatabase) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EwDatabase) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ewDatabaseAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEwDatabaseHook registers your hook function for all future operations.
func AddEwDatabaseHook(hookPoint boil.HookPoint, ewDatabaseHook EwDatabaseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		ewDatabaseBeforeInsertHooks = append(ewDatabaseBeforeInsertHooks, ewDatabaseHook)
	case boil.BeforeUpdateHook:
		ewDatabaseBeforeUpdateHooks = append(ewDatabaseBeforeUpdateHooks, ewDatabaseHook)
	case boil.BeforeDeleteHook:
		ewDatabaseBeforeDeleteHooks = append(ewDatabaseBeforeDeleteHooks, ewDatabaseHook)
	case boil.BeforeUpsertHook:
		ewDatabaseBeforeUpsertHooks = append(ewDatabaseBeforeUpsertHooks, ewDatabaseHook)
	case boil.AfterInsertHook:
		ewDatabaseAfterInsertHooks = append(ewDatabaseAfterInsertHooks, ewDatabaseHook)
	case boil.AfterSelectHook:
		ewDatabaseAfterSelectHooks = append(ewDatabaseAfterSelectHooks, ewDatabaseHook)
	case boil.AfterUpdateHook:
		ewDatabaseAfterUpdateHooks = append(ewDatabaseAfterUpdateHooks, ewDatabaseHook)
	case boil.AfterDeleteHook:
		ewDatabaseAfterDeleteHooks = append(ewDatabaseAfterDeleteHooks, ewDatabaseHook)
	case boil.AfterUpsertHook:
		ewDatabaseAfterUpsertHooks = append(ewDatabaseAfterUpsertHooks, ewDatabaseHook)
	}
}

// OneP returns a single ewDatabase record from the query, and panics on error.
func (q ewDatabaseQuery) OneP() *EwDatabase {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single ewDatabase record from the query.
func (q ewDatabaseQuery) One() (*EwDatabase, error) {
	o := &EwDatabase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ew_databases")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all EwDatabase records from the query, and panics on error.
func (q ewDatabaseQuery) AllP() EwDatabaseSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all EwDatabase records from the query.
func (q ewDatabaseQuery) All() (EwDatabaseSlice, error) {
	var o []*EwDatabase

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EwDatabase slice")
	}

	if len(ewDatabaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all EwDatabase records in the query, and panics on error.
func (q ewDatabaseQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all EwDatabase records in the query.
func (q ewDatabaseQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ew_databases rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q ewDatabaseQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q ewDatabaseQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ew_databases exists")
	}

	return count > 0, nil
}

// SongDatabaseG pointed to by the foreign key.
func (o *EwDatabase) SongDatabaseG(mods ...qm.QueryMod) songDatabaseQuery {
	return o.SongDatabase(boil.GetDB(), mods...)
}

// SongDatabase pointed to by the foreign key.
func (o *EwDatabase) SongDatabase(exec boil.Executor, mods ...qm.QueryMod) songDatabaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SongDatabaseID),
	}

	queryMods = append(queryMods, mods...)

	query := SongDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`song_databases`")

	return query
}

// MatiasClientG pointed to by the foreign key.
func (o *EwDatabase) MatiasClientG(mods ...qm.QueryMod) matiasClientQuery {
	return o.MatiasClient(boil.GetDB(), mods...)
}

// MatiasClient pointed to by the foreign key.
func (o *EwDatabase) MatiasClient(exec boil.Executor, mods ...qm.QueryMod) matiasClientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.MatiasClientID),
	}

	queryMods = append(queryMods, mods...)

	query := MatiasClients(exec, queryMods...)
	queries.SetFrom(query.Query, "`matias_client`")

	return query
}

// EwDatabaseLinksG retrieves all the ew_database_link's ew database links.
func (o *EwDatabase) EwDatabaseLinksG(mods ...qm.QueryMod) ewDatabaseLinkQuery {
	return o.EwDatabaseLinks(boil.GetDB(), mods...)
}

// EwDatabaseLinks retrieves all the ew_database_link's ew database links with an executor.
func (o *EwDatabase) EwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ew_database_links`.`ew_database_id`=?", o.ID),
	)

	query := EwDatabaseLinks(exec, queryMods...)
	queries.SetFrom(query.Query, "`ew_database_links`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ew_database_links`.*"})
	}

	return query
}

// SREwConflictsG retrieves all the sr_ew_conflict's sr ew conflicts.
func (o *EwDatabase) SREwConflictsG(mods ...qm.QueryMod) srEwConflictQuery {
	return o.SREwConflicts(boil.GetDB(), mods...)
}

// SREwConflicts retrieves all the sr_ew_conflict's sr ew conflicts with an executor.
func (o *EwDatabase) SREwConflicts(exec boil.Executor, mods ...qm.QueryMod) srEwConflictQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_conflicts`.`ew_database_id`=?", o.ID),
	)

	query := SREwConflicts(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_conflicts`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_conflicts`.*"})
	}

	return query
}

// SREwDatabaseLinksG retrieves all the sr_ew_database_link's sr ew database links.
func (o *EwDatabase) SREwDatabaseLinksG(mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	return o.SREwDatabaseLinks(boil.GetDB(), mods...)
}

// SREwDatabaseLinks retrieves all the sr_ew_database_link's sr ew database links with an executor.
func (o *EwDatabase) SREwDatabaseLinks(exec boil.Executor, mods ...qm.QueryMod) srEwDatabaseLinkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sr_ew_database_links`.`ew_database_id`=?", o.ID),
	)

	query := SREwDatabaseLinks(exec, queryMods...)
	queries.SetFrom(query.Query, "`sr_ew_database_links`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`sr_ew_database_links`.*"})
	}

	return query
}

// LoadSongDatabase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseL) LoadSongDatabase(e boil.Executor, singular bool, maybeEwDatabase interface{}) error {
	var slice []*EwDatabase
	var object *EwDatabase

	count := 1
	if singular {
		object = maybeEwDatabase.(*EwDatabase)
	} else {
		slice = *maybeEwDatabase.(*[]*EwDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseR{}
		}
		args[0] = object.SongDatabaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseR{}
			}
			args[i] = obj.SongDatabaseID
		}
	}

	query := fmt.Sprintf(
		"select * from `song_databases` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SongDatabase")
	}
	defer results.Close()

	var resultSlice []*SongDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SongDatabase")
	}

	if len(ewDatabaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SongDatabase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SongDatabaseID == foreign.ID {
				local.R.SongDatabase = foreign
				break
			}
		}
	}

	return nil
}

// LoadMatiasClient allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseL) LoadMatiasClient(e boil.Executor, singular bool, maybeEwDatabase interface{}) error {
	var slice []*EwDatabase
	var object *EwDatabase

	count := 1
	if singular {
		object = maybeEwDatabase.(*EwDatabase)
	} else {
		slice = *maybeEwDatabase.(*[]*EwDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseR{}
		}
		args[0] = object.MatiasClientID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseR{}
			}
			args[i] = obj.MatiasClientID
		}
	}

	query := fmt.Sprintf(
		"select * from `matias_client` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MatiasClient")
	}
	defer results.Close()

	var resultSlice []*MatiasClient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MatiasClient")
	}

	if len(ewDatabaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.MatiasClient = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatiasClientID.Uint64 == foreign.ID {
				local.R.MatiasClient = foreign
				break
			}
		}
	}

	return nil
}

// LoadEwDatabaseLinks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseL) LoadEwDatabaseLinks(e boil.Executor, singular bool, maybeEwDatabase interface{}) error {
	var slice []*EwDatabase
	var object *EwDatabase

	count := 1
	if singular {
		object = maybeEwDatabase.(*EwDatabase)
	} else {
		slice = *maybeEwDatabase.(*[]*EwDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `ew_database_links` where `ew_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ew_database_links")
	}
	defer results.Close()

	var resultSlice []*EwDatabaseLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ew_database_links")
	}

	if len(ewDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EwDatabaseLinks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EwDatabaseID {
				local.R.EwDatabaseLinks = append(local.R.EwDatabaseLinks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSREwConflicts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseL) LoadSREwConflicts(e boil.Executor, singular bool, maybeEwDatabase interface{}) error {
	var slice []*EwDatabase
	var object *EwDatabase

	count := 1
	if singular {
		object = maybeEwDatabase.(*EwDatabase)
	} else {
		slice = *maybeEwDatabase.(*[]*EwDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_conflicts` where `ew_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_conflicts")
	}
	defer results.Close()

	var resultSlice []*SREwConflict
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_conflicts")
	}

	if len(srEwConflictAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SREwConflicts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EwDatabaseID {
				local.R.SREwConflicts = append(local.R.SREwConflicts, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSREwDatabaseLinks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (ewDatabaseL) LoadSREwDatabaseLinks(e boil.Executor, singular bool, maybeEwDatabase interface{}) error {
	var slice []*EwDatabase
	var object *EwDatabase

	count := 1
	if singular {
		object = maybeEwDatabase.(*EwDatabase)
	} else {
		slice = *maybeEwDatabase.(*[]*EwDatabase)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &ewDatabaseR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &ewDatabaseR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `sr_ew_database_links` where `ew_database_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sr_ew_database_links")
	}
	defer results.Close()

	var resultSlice []*SREwDatabaseLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sr_ew_database_links")
	}

	if len(srEwDatabaseLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SREwDatabaseLinks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EwDatabaseID {
				local.R.SREwDatabaseLinks = append(local.R.SREwDatabaseLinks, foreign)
				break
			}
		}
	}

	return nil
}

// SetSongDatabaseG of the ew_database to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.EwDatabases.
// Uses the global database handle.
func (o *EwDatabase) SetSongDatabaseG(insert bool, related *SongDatabase) error {
	return o.SetSongDatabase(boil.GetDB(), insert, related)
}

// SetSongDatabaseP of the ew_database to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.EwDatabases.
// Panics on error.
func (o *EwDatabase) SetSongDatabaseP(exec boil.Executor, insert bool, related *SongDatabase) {
	if err := o.SetSongDatabase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongDatabaseGP of the ew_database to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.EwDatabases.
// Uses the global database handle and panics on error.
func (o *EwDatabase) SetSongDatabaseGP(insert bool, related *SongDatabase) {
	if err := o.SetSongDatabase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongDatabase of the ew_database to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.EwDatabases.
func (o *EwDatabase) SetSongDatabase(exec boil.Executor, insert bool, related *SongDatabase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ew_databases` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
		strmangle.WhereClause("`", "`", 0, ewDatabasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SongDatabaseID = related.ID

	if o.R == nil {
		o.R = &ewDatabaseR{
			SongDatabase: related,
		}
	} else {
		o.R.SongDatabase = related
	}

	if related.R == nil {
		related.R = &songDatabaseR{
			EwDatabases: EwDatabaseSlice{o},
		}
	} else {
		related.R.EwDatabases = append(related.R.EwDatabases, o)
	}

	return nil
}

// SetMatiasClientG of the ew_database to the related item.
// Sets o.R.MatiasClient to related.
// Adds o to related.R.EwDatabases.
// Uses the global database handle.
func (o *EwDatabase) SetMatiasClientG(insert bool, related *MatiasClient) error {
	return o.SetMatiasClient(boil.GetDB(), insert, related)
}

// SetMatiasClientP of the ew_database to the related item.
// Sets o.R.MatiasClient to related.
// Adds o to related.R.EwDatabases.
// Panics on error.
func (o *EwDatabase) SetMatiasClientP(exec boil.Executor, insert bool, related *MatiasClient) {
	if err := o.SetMatiasClient(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMatiasClientGP of the ew_database to the related item.
// Sets o.R.MatiasClient to related.
// Adds o to related.R.EwDatabases.
// Uses the global database handle and panics on error.
func (o *EwDatabase) SetMatiasClientGP(insert bool, related *MatiasClient) {
	if err := o.SetMatiasClient(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMatiasClient of the ew_database to the related item.
// Sets o.R.MatiasClient to related.
// Adds o to related.R.EwDatabases.
func (o *EwDatabase) SetMatiasClient(exec boil.Executor, insert bool, related *MatiasClient) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ew_databases` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"matias_client_id"}),
		strmangle.WhereClause("`", "`", 0, ewDatabasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatiasClientID.Uint64 = related.ID
	o.MatiasClientID.Valid = true

	if o.R == nil {
		o.R = &ewDatabaseR{
			MatiasClient: related,
		}
	} else {
		o.R.MatiasClient = related
	}

	if related.R == nil {
		related.R = &matiasClientR{
			EwDatabases: EwDatabaseSlice{o},
		}
	} else {
		related.R.EwDatabases = append(related.R.EwDatabases, o)
	}

	return nil
}

// RemoveMatiasClientG relationship.
// Sets o.R.MatiasClient to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *EwDatabase) RemoveMatiasClientG(related *MatiasClient) error {
	return o.RemoveMatiasClient(boil.GetDB(), related)
}

// RemoveMatiasClientP relationship.
// Sets o.R.MatiasClient to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *EwDatabase) RemoveMatiasClientP(exec boil.Executor, related *MatiasClient) {
	if err := o.RemoveMatiasClient(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMatiasClientGP relationship.
// Sets o.R.MatiasClient to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *EwDatabase) RemoveMatiasClientGP(related *MatiasClient) {
	if err := o.RemoveMatiasClient(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMatiasClient relationship.
// Sets o.R.MatiasClient to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *EwDatabase) RemoveMatiasClient(exec boil.Executor, related *MatiasClient) error {
	var err error

	o.MatiasClientID.Valid = false
	if err = o.Update(exec, "matias_client_id"); err != nil {
		o.MatiasClientID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.MatiasClient = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EwDatabases {
		if o.MatiasClientID.Uint64 != ri.MatiasClientID.Uint64 {
			continue
		}

		ln := len(related.R.EwDatabases)
		if ln > 1 && i < ln-1 {
			related.R.EwDatabases[i] = related.R.EwDatabases[ln-1]
		}
		related.R.EwDatabases = related.R.EwDatabases[:ln-1]
		break
	}
	return nil
}

// AddEwDatabaseLinksG adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
// Uses the global database handle.
func (o *EwDatabase) AddEwDatabaseLinksG(insert bool, related ...*EwDatabaseLink) error {
	return o.AddEwDatabaseLinks(boil.GetDB(), insert, related...)
}

// AddEwDatabaseLinksP adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
// Panics on error.
func (o *EwDatabase) AddEwDatabaseLinksP(exec boil.Executor, insert bool, related ...*EwDatabaseLink) {
	if err := o.AddEwDatabaseLinks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabaseLinksGP adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *EwDatabase) AddEwDatabaseLinksGP(insert bool, related ...*EwDatabaseLink) {
	if err := o.AddEwDatabaseLinks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEwDatabaseLinks adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.EwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
func (o *EwDatabase) AddEwDatabaseLinks(exec boil.Executor, insert bool, related ...*EwDatabaseLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EwDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ew_database_links` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ew_database_id"}),
				strmangle.WhereClause("`", "`", 0, ewDatabaseLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EwDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &ewDatabaseR{
			EwDatabaseLinks: related,
		}
	} else {
		o.R.EwDatabaseLinks = append(o.R.EwDatabaseLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ewDatabaseLinkR{
				EwDatabase: o,
			}
		} else {
			rel.R.EwDatabase = o
		}
	}
	return nil
}

// AddSREwConflictsG adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.EwDatabase appropriately.
// Uses the global database handle.
func (o *EwDatabase) AddSREwConflictsG(insert bool, related ...*SREwConflict) error {
	return o.AddSREwConflicts(boil.GetDB(), insert, related...)
}

// AddSREwConflictsP adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.EwDatabase appropriately.
// Panics on error.
func (o *EwDatabase) AddSREwConflictsP(exec boil.Executor, insert bool, related ...*SREwConflict) {
	if err := o.AddSREwConflicts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwConflictsGP adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.EwDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *EwDatabase) AddSREwConflictsGP(insert bool, related ...*SREwConflict) {
	if err := o.AddSREwConflicts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwConflicts adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwConflicts.
// Sets related.R.EwDatabase appropriately.
func (o *EwDatabase) AddSREwConflicts(exec boil.Executor, insert bool, related ...*SREwConflict) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EwDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_conflicts` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ew_database_id"}),
				strmangle.WhereClause("`", "`", 0, srEwConflictPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EwDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &ewDatabaseR{
			SREwConflicts: related,
		}
	} else {
		o.R.SREwConflicts = append(o.R.SREwConflicts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwConflictR{
				EwDatabase: o,
			}
		} else {
			rel.R.EwDatabase = o
		}
	}
	return nil
}

// AddSREwDatabaseLinksG adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
// Uses the global database handle.
func (o *EwDatabase) AddSREwDatabaseLinksG(insert bool, related ...*SREwDatabaseLink) error {
	return o.AddSREwDatabaseLinks(boil.GetDB(), insert, related...)
}

// AddSREwDatabaseLinksP adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
// Panics on error.
func (o *EwDatabase) AddSREwDatabaseLinksP(exec boil.Executor, insert bool, related ...*SREwDatabaseLink) {
	if err := o.AddSREwDatabaseLinks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwDatabaseLinksGP adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
// Uses the global database handle and panics on error.
func (o *EwDatabase) AddSREwDatabaseLinksGP(insert bool, related ...*SREwDatabaseLink) {
	if err := o.AddSREwDatabaseLinks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSREwDatabaseLinks adds the given related objects to the existing relationships
// of the ew_database, optionally inserting them as new records.
// Appends related to o.R.SREwDatabaseLinks.
// Sets related.R.EwDatabase appropriately.
func (o *EwDatabase) AddSREwDatabaseLinks(exec boil.Executor, insert bool, related ...*SREwDatabaseLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EwDatabaseID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sr_ew_database_links` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ew_database_id"}),
				strmangle.WhereClause("`", "`", 0, srEwDatabaseLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EwDatabaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &ewDatabaseR{
			SREwDatabaseLinks: related,
		}
	} else {
		o.R.SREwDatabaseLinks = append(o.R.SREwDatabaseLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &srEwDatabaseLinkR{
				EwDatabase: o,
			}
		} else {
			rel.R.EwDatabase = o
		}
	}
	return nil
}

// EwDatabasesG retrieves all records.
func EwDatabasesG(mods ...qm.QueryMod) ewDatabaseQuery {
	return EwDatabases(boil.GetDB(), mods...)
}

// EwDatabases retrieves all the records using an executor.
func EwDatabases(exec boil.Executor, mods ...qm.QueryMod) ewDatabaseQuery {
	mods = append(mods, qm.From("`ew_databases`"))
	return ewDatabaseQuery{NewQuery(exec, mods...)}
}

// FindEwDatabaseG retrieves a single record by ID.
func FindEwDatabaseG(id uint64, selectCols ...string) (*EwDatabase, error) {
	return FindEwDatabase(boil.GetDB(), id, selectCols...)
}

// FindEwDatabaseGP retrieves a single record by ID, and panics on error.
func FindEwDatabaseGP(id uint64, selectCols ...string) *EwDatabase {
	retobj, err := FindEwDatabase(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEwDatabase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEwDatabase(exec boil.Executor, id uint64, selectCols ...string) (*EwDatabase, error) {
	ewDatabaseObj := &EwDatabase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ew_databases` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(ewDatabaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ew_databases")
	}

	return ewDatabaseObj, nil
}

// FindEwDatabaseP retrieves a single record by ID with an executor, and panics on error.
func FindEwDatabaseP(exec boil.Executor, id uint64, selectCols ...string) *EwDatabase {
	retobj, err := FindEwDatabase(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EwDatabase) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *EwDatabase) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *EwDatabase) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *EwDatabase) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no ew_databases provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ewDatabaseColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	ewDatabaseInsertCacheMut.RLock()
	cache, cached := ewDatabaseInsertCache[key]
	ewDatabaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			ewDatabaseColumns,
			ewDatabaseColumnsWithDefault,
			ewDatabaseColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(ewDatabaseType, ewDatabaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ewDatabaseType, ewDatabaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ew_databases` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ew_databases` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ew_databases` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ewDatabasePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ew_databases")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == ewDatabaseMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ew_databases")
	}

CacheNoHooks:
	if !cached {
		ewDatabaseInsertCacheMut.Lock()
		ewDatabaseInsertCache[key] = cache
		ewDatabaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single EwDatabase record. See Update for
// whitelist behavior description.
func (o *EwDatabase) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single EwDatabase record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *EwDatabase) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the EwDatabase, and panics on error.
// See Update for whitelist behavior description.
func (o *EwDatabase) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the EwDatabase.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *EwDatabase) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	ewDatabaseUpdateCacheMut.RLock()
	cache, cached := ewDatabaseUpdateCache[key]
	ewDatabaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			ewDatabaseColumns,
			ewDatabasePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update ew_databases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ew_databases` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ewDatabasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ewDatabaseType, ewDatabaseMapping, append(wl, ewDatabasePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update ew_databases row")
	}

	if !cached {
		ewDatabaseUpdateCacheMut.Lock()
		ewDatabaseUpdateCache[key] = cache
		ewDatabaseUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q ewDatabaseQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q ewDatabaseQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for ew_databases")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EwDatabaseSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o EwDatabaseSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o EwDatabaseSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EwDatabaseSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ewDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ew_databases` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ewDatabasePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in ewDatabase slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EwDatabase) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *EwDatabase) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *EwDatabase) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *EwDatabase) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no ew_databases provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ewDatabaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ewDatabaseUpsertCacheMut.RLock()
	cache, cached := ewDatabaseUpsertCache[key]
	ewDatabaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			ewDatabaseColumns,
			ewDatabaseColumnsWithDefault,
			ewDatabaseColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			ewDatabaseColumns,
			ewDatabasePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert ew_databases, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "ew_databases", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ew_databases` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(ewDatabaseType, ewDatabaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ewDatabaseType, ewDatabaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ew_databases")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == ewDatabaseMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ew_databases")
	}

CacheNoHooks:
	if !cached {
		ewDatabaseUpsertCacheMut.Lock()
		ewDatabaseUpsertCache[key] = cache
		ewDatabaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single EwDatabase record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *EwDatabase) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single EwDatabase record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EwDatabase) DeleteG() error {
	if o == nil {
		return errors.New("models: no EwDatabase provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single EwDatabase record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *EwDatabase) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single EwDatabase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EwDatabase) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no EwDatabase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ewDatabasePrimaryKeyMapping)
	sql := "DELETE FROM `ew_databases` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from ew_databases")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q ewDatabaseQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q ewDatabaseQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no ewDatabaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ew_databases")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o EwDatabaseSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o EwDatabaseSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no EwDatabase slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o EwDatabaseSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EwDatabaseSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no EwDatabase slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(ewDatabaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ewDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ew_databases` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ewDatabasePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ewDatabase slice")
	}

	if len(ewDatabaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *EwDatabase) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *EwDatabase) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EwDatabase) ReloadG() error {
	if o == nil {
		return errors.New("models: no EwDatabase provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EwDatabase) Reload(exec boil.Executor) error {
	ret, err := FindEwDatabase(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EwDatabaseSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EwDatabaseSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EwDatabaseSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty EwDatabaseSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EwDatabaseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	ewDatabases := EwDatabaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ewDatabasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ew_databases`.* FROM `ew_databases` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ewDatabasePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&ewDatabases)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EwDatabaseSlice")
	}

	*o = ewDatabases

	return nil
}

// EwDatabaseExists checks if the EwDatabase row exists.
func EwDatabaseExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ew_databases` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ew_databases exists")
	}

	return exists, nil
}

// EwDatabaseExistsG checks if the EwDatabase row exists.
func EwDatabaseExistsG(id uint64) (bool, error) {
	return EwDatabaseExists(boil.GetDB(), id)
}

// EwDatabaseExistsGP checks if the EwDatabase row exists. Panics on error.
func EwDatabaseExistsGP(id uint64) bool {
	e, err := EwDatabaseExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EwDatabaseExistsP checks if the EwDatabase row exists. Panics on error.
func EwDatabaseExistsP(exec boil.Executor, id uint64) bool {
	e, err := EwDatabaseExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testEventSchedules(t *testing.T) {
	t.Parallel()

	query := EventSchedules(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testEventSchedulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = eventSchedule.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventSchedulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EventSchedules(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventSchedulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EventScheduleSlice{eventSchedule}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testEventSchedulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := EventScheduleExists(tx, eventSchedule.ID)
	if err != nil {
		t.Errorf("Unable to check if EventSchedule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EventScheduleExistsG to return true, but got false.")
	}
}
func testEventSchedulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	eventScheduleFound, err := FindEventSchedule(tx, eventSchedule.ID)
	if err != nil {
		t.Error(err)
	}

	if eventScheduleFound == nil {
		t.Error("want a record, got nil")
	}
}
func testEventSchedulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = EventSchedules(tx).Bind(eventSchedule); err != nil {
		t.Error(err)
	}
}

func testEventSchedulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := EventSchedules(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEventSchedulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventScheduleOne := &EventSchedule{}
	eventScheduleTwo := &EventSchedule{}
	if err = randomize.Struct(seed, eventScheduleOne, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}
	if err = randomize.Struct(seed, eventScheduleTwo, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventScheduleOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = eventScheduleTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EventSchedules(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEventSchedulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	eventScheduleOne := &EventSchedule{}
	eventScheduleTwo := &EventSchedule{}
	if err = randomize.Struct(seed, eventScheduleOne, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}
	if err = randomize.Struct(seed, eventScheduleTwo, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventScheduleOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = eventScheduleTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func eventScheduleBeforeInsertHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleAfterInsertHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleAfterSelectHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleBeforeUpdateHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleAfterUpdateHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleBeforeDeleteHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleAfterDeleteHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleBeforeUpsertHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func eventScheduleAfterUpsertHook(e boil.Executor, o *EventSchedule) error {
	*o = EventSchedule{}
	return nil
}

func testEventSchedulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &EventSchedule{}
	o := &EventSchedule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, eventScheduleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EventSchedule object: %s", err)
	}

	AddEventScheduleHook(boil.BeforeInsertHook, eventScheduleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	eventScheduleBeforeInsertHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.AfterInsertHook, eventScheduleAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	eventScheduleAfterInsertHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.AfterSelectHook, eventScheduleAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	eventScheduleAfterSelectHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.BeforeUpdateHook, eventScheduleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	eventScheduleBeforeUpdateHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.AfterUpdateHook, eventScheduleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	eventScheduleAfterUpdateHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.BeforeDeleteHook, eventScheduleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	eventScheduleBeforeDeleteHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.AfterDeleteHook, eventScheduleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	eventScheduleAfterDeleteHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.BeforeUpsertHook, eventScheduleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	eventScheduleBeforeUpsertHooks = []EventScheduleHook{}

	AddEventScheduleHook(boil.AfterUpsertHook, eventScheduleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	eventScheduleAfterUpsertHooks = []EventScheduleHook{}
}
func testEventSchedulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventSchedulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx, eventScheduleColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventScheduleToOneScheduleUsingSchedule(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local EventSchedule
	var foreign Schedule

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, scheduleDBTypes, false, scheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schedule struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ScheduleID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Schedule(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventScheduleSlice{&local}
	if err = local.L.LoadSchedule(tx, false, (*[]*EventSchedule)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Schedule == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Schedule = nil
	if err = local.L.LoadSchedule(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Schedule == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventScheduleToOneEventUsingEvent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local EventSchedule
	var foreign Event

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventScheduleDBTypes, false, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.EventID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Event(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventScheduleSlice{&local}
	if err = local.L.LoadEvent(tx, false, (*[]*EventSchedule)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Event = nil
	if err = local.L.LoadEvent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventScheduleToOneSetOpScheduleUsingSchedule(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EventSchedule
	var b, c Schedule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventScheduleDBTypes, false, strmangle.SetComplement(eventSchedulePrimaryKeyColumns, eventScheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, scheduleDBTypes, false, strmangle.SetComplement(schedulePrimaryKeyColumns, scheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Schedule{&b, &c} {
		err = a.SetSchedule(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Schedule != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EventSchedules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ScheduleID != x.ID {
			t.Error("foreign key was wrong value", a.ScheduleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ScheduleID))
		reflect.Indirect(reflect.ValueOf(&a.ScheduleID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ScheduleID != x.ID {
			t.Error("foreign key was wrong value", a.ScheduleID, x.ID)
		}
	}
}
func testEventScheduleToOneSetOpEventUsingEvent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a EventSchedule
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventScheduleDBTypes, false, strmangle.SetComplement(eventSchedulePrimaryKeyColumns, eventScheduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Event{&b, &c} {
		err = a.SetEvent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Event != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EventSchedules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EventID))
		reflect.Indirect(reflect.ValueOf(&a.EventID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID, x.ID)
		}
	}
}
func testEventSchedulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = eventSchedule.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEventSchedulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EventScheduleSlice{eventSchedule}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testEventSchedulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := EventSchedules(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	eventScheduleDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `EventID`: `bigint`, `ID`: `bigint`, `ScheduleID`: `bigint`}
	_                    = bytes.MinRead
)

func testEventSchedulesUpdate(t *testing.T) {
	t.Parallel()

	if len(eventScheduleColumns) == len(eventSchedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	if err = eventSchedule.Update(tx); err != nil {
		t.Error(err)
	}
}

func testEventSchedulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(eventScheduleColumns) == len(eventSchedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	eventSchedule := &EventSchedule{}
	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventScheduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, eventSchedule, eventScheduleDBTypes, true, eventSchedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(eventScheduleColumns, eventSchedulePrimaryKeyColumns) {
		fields = eventScheduleColumns
	} else {
		fields = strmangle.SetComplement(
			eventScheduleColumns,
			eventSchedulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(eventSchedule))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := EventScheduleSlice{eventSchedule}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testEventSchedulesUpsert(t *testing.T) {
	t.Parallel()

	if len(eventScheduleColumns) == len(eventSchedulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	eventSchedule := EventSchedule{}
	if err = randomize.Struct(seed, &eventSchedule, eventScheduleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = eventSchedule.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EventSchedule: %s", err)
	}

	count, err := EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &eventSchedule, eventScheduleDBTypes, false, eventSchedulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventSchedule struct: %s", err)
	}

	if err = eventSchedule.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert EventSchedule: %s", err)
	}

	count, err = EventSchedules(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSREwConflicts(t *testing.T) {
	t.Parallel()

	query := SREwConflicts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSREwConflictsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srEwConflict.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSREwConflictsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SREwConflicts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSREwConflictsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SREwConflictSlice{srEwConflict}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSREwConflictsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SREwConflictExists(tx, srEwConflict.ID)
	if err != nil {
		t.Errorf("Unable to check if SREwConflict exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SREwConflictExistsG to return true, but got false.")
	}
}
func testSREwConflictsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	srEwConflictFound, err := FindSREwConflict(tx, srEwConflict.ID)
	if err != nil {
		t.Error(err)
	}

	if srEwConflictFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSREwConflictsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SREwConflicts(tx).Bind(srEwConflict); err != nil {
		t.Error(err)
	}
}

func testSREwConflictsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SREwConflicts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSREwConflictsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflictOne := &SREwConflict{}
	srEwConflictTwo := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflictOne, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}
	if err = randomize.Struct(seed, srEwConflictTwo, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflictOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srEwConflictTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SREwConflicts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSREwConflictsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	srEwConflictOne := &SREwConflict{}
	srEwConflictTwo := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflictOne, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}
	if err = randomize.Struct(seed, srEwConflictTwo, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflictOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = srEwConflictTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func srEwConflictBeforeInsertHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictAfterInsertHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictAfterSelectHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictBeforeUpdateHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictAfterUpdateHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictBeforeDeleteHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictAfterDeleteHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictBeforeUpsertHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func srEwConflictAfterUpsertHook(e boil.Executor, o *SREwConflict) error {
	*o = SREwConflict{}
	return nil
}

func testSREwConflictsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SREwConflict{}
	o := &SREwConflict{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, srEwConflictDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SREwConflict object: %s", err)
	}

	AddSREwConflictHook(boil.BeforeInsertHook, srEwConflictBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	srEwConflictBeforeInsertHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.AfterInsertHook, srEwConflictAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	srEwConflictAfterInsertHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.AfterSelectHook, srEwConflictAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	srEwConflictAfterSelectHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.BeforeUpdateHook, srEwConflictBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	srEwConflictBeforeUpdateHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.AfterUpdateHook, srEwConflictAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	srEwConflictAfterUpdateHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.BeforeDeleteHook, srEwConflictBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	srEwConflictBeforeDeleteHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.AfterDeleteHook, srEwConflictAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	srEwConflictAfterDeleteHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.BeforeUpsertHook, srEwConflictBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	srEwConflictBeforeUpsertHooks = []SREwConflictHook{}

	AddSREwConflictHook(boil.AfterUpsertHook, srEwConflictAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	srEwConflictAfterUpsertHooks = []SREwConflictHook{}
}
func testSREwConflictsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSREwConflictsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx, srEwConflictColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSREwConflictToOneSynchronizationRaportUsingSR(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwConflict
	var foreign SynchronizationRaport

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, synchronizationRaportDBTypes, false, synchronizationRaportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SynchronizationRaport struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SRID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SR(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwConflictSlice{&local}
	if err = local.L.LoadSR(tx, false, (*[]*SREwConflict)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SR = nil
	if err = local.L.LoadSR(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SR == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwConflictToOneVariationVersionUsingVariationVersion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwConflict
	var foreign VariationVersion

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, variationVersionDBTypes, false, variationVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariationVersion struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.VariationVersionID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VariationVersion(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwConflictSlice{&local}
	if err = local.L.LoadVariationVersion(tx, false, (*[]*SREwConflict)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VariationVersion = nil
	if err = local.L.LoadVariationVersion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VariationVersion == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwConflictToOneEwDatabaseUsingEwDatabase(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SREwConflict
	var foreign EwDatabase

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, srEwConflictDBTypes, false, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ewDatabaseDBTypes, false, ewDatabaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EwDatabase struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.EwDatabaseID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.EwDatabase(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SREwConflictSlice{&local}
	if err = local.L.LoadEwDatabase(tx, false, (*[]*SREwConflict)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.EwDatabase == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.EwDatabase = nil
	if err = local.L.LoadEwDatabase(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.EwDatabase == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSREwConflictToOneSetOpSynchronizationRaportUsingSR(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwConflict
	var b, c SynchronizationRaport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwConflictDBTypes, false, strmangle.SetComplement(srEwConflictPrimaryKeyColumns, srEwConflictColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, synchronizationRaportDBTypes, false, strmangle.SetComplement(synchronizationRaportPrimaryKeyColumns, synchronizationRaportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SynchronizationRaport{&b, &c} {
		err = a.SetSR(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SR != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SRSREwConflicts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SRID))
		reflect.Indirect(reflect.ValueOf(&a.SRID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SRID != x.ID {
			t.Error("foreign key was wrong value", a.SRID, x.ID)
		}
	}
}
func testSREwConflictToOneSetOpVariationVersionUsingVariationVersion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwConflict
	var b, c VariationVersion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwConflictDBTypes, false, strmangle.SetComplement(srEwConflictPrimaryKeyColumns, srEwConflictColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variationVersionDBTypes, false, strmangle.SetComplement(variationVersionPrimaryKeyColumns, variationVersionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VariationVersion{&b, &c} {
		err = a.SetVariationVersion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VariationVersion != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SREwConflicts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariationVersionID))
		reflect.Indirect(reflect.ValueOf(&a.VariationVersionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariationVersionID != x.ID {
			t.Error("foreign key was wrong value", a.VariationVersionID, x.ID)
		}
	}
}
func testSREwConflictToOneSetOpEwDatabaseUsingEwDatabase(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SREwConflict
	var b, c EwDatabase

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, srEwConflictDBTypes, false, strmangle.SetComplement(srEwConflictPrimaryKeyColumns, srEwConflictColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ewDatabaseDBTypes, false, strmangle.SetComplement(ewDatabasePrimaryKeyColumns, ewDatabaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*EwDatabase{&b, &c} {
		err = a.SetEwDatabase(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.EwDatabase != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SREwConflicts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EwDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.EwDatabaseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EwDatabaseID))
		reflect.Indirect(reflect.ValueOf(&a.EwDatabaseID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EwDatabaseID != x.ID {
			t.Error("foreign key was wrong value", a.EwDatabaseID, x.ID)
		}
	}
}
func testSREwConflictsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = srEwConflict.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSREwConflictsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SREwConflictSlice{srEwConflict}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSREwConflictsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SREwConflicts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	srEwConflictDBTypes = map[string]string{`EwDatabaseID`: `bigint`, `EwSongID`: `bigint`, `ID`: `bigint`, `Name`: `varchar`, `SRID`: `bigint`, `Text`: `text`, `VariationVersionID`: `bigint`}
	_                   = bytes.MinRead
)

func testSREwConflictsUpdate(t *testing.T) {
	t.Parallel()

	if len(srEwConflictColumns) == len(srEwConflictPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	if err = srEwConflict.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSREwConflictsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(srEwConflictColumns) == len(srEwConflictPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	srEwConflict := &SREwConflict{}
	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, srEwConflict, srEwConflictDBTypes, true, srEwConflictPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(srEwConflictColumns, srEwConflictPrimaryKeyColumns) {
		fields = srEwConflictColumns
	} else {
		fields = strmangle.SetComplement(
			srEwConflictColumns,
			srEwConflictPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(srEwConflict))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SREwConflictSlice{srEwConflict}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSREwConflictsUpsert(t *testing.T) {
	t.Parallel()

	if len(srEwConflictColumns) == len(srEwConflictPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	srEwConflict := SREwConflict{}
	if err = randomize.Struct(seed, &srEwConflict, srEwConflictDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = srEwConflict.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SREwConflict: %s", err)
	}

	count, err := SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &srEwConflict, srEwConflictDBTypes, false, srEwConflictPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SREwConflict struct: %s", err)
	}

	if err = srEwConflict.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert SREwConflict: %s", err)
	}

	count, err = SREwConflicts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Schedule is an object representing the database table.
type Schedule struct {
	ID        uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Start     null.Time `boil:"start" json:"start,omitempty" toml:"start" yaml:"start,omitempty"`
	End       null.Time `boil:"end" json:"end,omitempty" toml:"end" yaml:"end,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *scheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScheduleColumns = struct {
	ID        string
	Name      string
	Start     string
	End       string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	Start:     "start",
	End:       "end",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// scheduleR is where relationships are stored.
type scheduleR struct {
	EventSchedules     EventScheduleSlice
	ScheduleVariations ScheduleVariationSlice
}

// scheduleL is where Load methods for each relationship are stored.
type scheduleL struct{}

var (
	scheduleColumns               = []string{"id", "name", "start", "end", "created_at", "updated_at", "deleted_at"}
	scheduleColumnsWithoutDefault = []string{"name", "start", "end", "created_at", "updated_at", "deleted_at"}
	scheduleColumnsWithDefault    = []string{"id"}
	schedulePrimaryKeyColumns     = []string{"id"}
)

type (
	// ScheduleSlice is an alias for a slice of pointers to Schedule.
	// This should generally be used opposed to []Schedule.
	ScheduleSlice []*Schedule
	// ScheduleHook is the signature for custom Schedule hook methods
	ScheduleHook func(boil.Executor, *Schedule) error

	scheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scheduleType                 = reflect.TypeOf(&Schedule{})
	scheduleMapping              = queries.MakeStructMapping(scheduleType)
	schedulePrimaryKeyMapping, _ = queries.BindMapping(scheduleType, scheduleMapping, schedulePrimaryKeyColumns)
	scheduleInsertCacheMut       sync.RWMutex
	scheduleInsertCache          = make(map[string]insertCache)
	scheduleUpdateCacheMut       sync.RWMutex
	scheduleUpdateCache          = make(map[string]updateCache)
	scheduleUpsertCacheMut       sync.RWMutex
	scheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var scheduleBeforeInsertHooks []ScheduleHook
var scheduleBeforeUpdateHooks []ScheduleHook
var scheduleBeforeDeleteHooks []ScheduleHook
var scheduleBeforeUpsertHooks []ScheduleHook

var scheduleAfterInsertHooks []ScheduleHook
var scheduleAfterSelectHooks []ScheduleHook
var scheduleAfterUpdateHooks []ScheduleHook
var scheduleAfterDeleteHooks []ScheduleHook
var scheduleAfterUpsertHooks []ScheduleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Schedule) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Schedule) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Schedule) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Schedule) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Schedule) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Schedule) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Schedule) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Schedule) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Schedule) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range scheduleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScheduleHook registers your hook function for all future operations.
func AddScheduleHook(hookPoint boil.HookPoint, scheduleHook ScheduleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		scheduleBeforeInsertHooks = append(scheduleBeforeInsertHooks, scheduleHook)
	case boil.BeforeUpdateHook:
		scheduleBeforeUpdateHooks = append(scheduleBeforeUpdateHooks, scheduleHook)
	case boil.BeforeDeleteHook:
		scheduleBeforeDeleteHooks = append(scheduleBeforeDeleteHooks, scheduleHook)
	case boil.BeforeUpsertHook:
		scheduleBeforeUpsertHooks = append(scheduleBeforeUpsertHooks, scheduleHook)
	case boil.AfterInsertHook:
		scheduleAfterInsertHooks = append(scheduleAfterInsertHooks, scheduleHook)
	case boil.AfterSelectHook:
		scheduleAfterSelectHooks = append(scheduleAfterSelectHooks, scheduleHook)
	case boil.AfterUpdateHook:
		scheduleAfterUpdateHooks = append(scheduleAfterUpdateHooks, scheduleHook)
	case boil.AfterDeleteHook:
		scheduleAfterDeleteHooks = append(scheduleAfterDeleteHooks, scheduleHook)
	case boil.AfterUpsertHook:
		scheduleAfterUpsertHooks = append(scheduleAfterUpsertHooks, scheduleHook)
	}
}

// OneP returns a single schedule record from the query, and panics on error.
func (q scheduleQuery) OneP() *Schedule {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single schedule record from the query.
func (q scheduleQuery) One() (*Schedule, error) {
	o := &Schedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for schedules")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Schedule records from the query, and panics on error.
func (q scheduleQuery) AllP() ScheduleSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Schedule records from the query.
func (q scheduleQuery) All() (ScheduleSlice, error) {
	var o []*Schedule

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Schedule slice")
	}

	if len(scheduleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Schedule records in the query, and panics on error.
func (q scheduleQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Schedule records in the query.
func (q scheduleQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count schedules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q scheduleQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q scheduleQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if schedules exists")
	}

	return count > 0, nil
}

// EventSchedulesG retrieves all the event_schedule's event schedules.
func (o *Schedule) EventSchedulesG(mods ...qm.QueryMod) eventScheduleQuery {
	return o.EventSchedules(boil.GetDB(), mods...)
}

// EventSchedules retrieves all the event_schedule's event schedules with an executor.
func (o *Schedule) EventSchedules(exec boil.Executor, mods ...qm.QueryMod) eventScheduleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`event_schedules`.`schedule_id`=?", o.ID),
	)

	query := EventSchedules(exec, queryMods...)
	queries.SetFrom(query.Query, "`event_schedules`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`event_schedules`.*"})
	}

	return query
}

// ScheduleVariationsG retrieves all the schedule_variation's schedule variations.
func (o *Schedule) ScheduleVariationsG(mods ...qm.QueryMod) scheduleVariationQuery {
	return o.ScheduleVariations(boil.GetDB(), mods...)
}

// ScheduleVariations retrieves all the schedule_variation's schedule variations with an executor.
func (o *Schedule) ScheduleVariations(exec boil.Executor, mods ...qm.QueryMod) scheduleVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`schedule_variations`.`schedule_id`=?", o.ID),
	)

	query := ScheduleVariations(exec, queryMods...)
	queries.SetFrom(query.Query, "`schedule_variations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`schedule_variations`.*"})
	}

	return query
}

// LoadEventSchedules allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (scheduleL) LoadEventSchedules(e boil.Executor, singular bool, maybeSchedule interface{}) error {
	var slice []*Schedule
	var object *Schedule

	count := 1
	if singular {
		object = maybeSchedule.(*Schedule)
	} else {
		slice = *maybeSchedule.(*[]*Schedule)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &scheduleR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `event_schedules` where `schedule_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load event_schedules")
	}
	defer results.Close()

	var resultSlice []*EventSchedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice event_schedules")
	}

	if len(eventScheduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EventSchedules = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ScheduleID {
				local.R.EventSchedules = append(local.R.EventSchedules, foreign)
				break
			}
		}
	}

	return nil
}

// LoadScheduleVariations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (scheduleL) LoadScheduleVariations(e boil.Executor, singular bool, maybeSchedule interface{}) error {
	var slice []*Schedule
	var object *Schedule

	count := 1
	if singular {
		object = maybeSchedule.(*Schedule)
	} else {
		slice = *maybeSchedule.(*[]*Schedule)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &scheduleR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `schedule_variations` where `schedule_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load schedule_variations")
	}
	defer results.Close()

	var resultSlice []*ScheduleVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice schedule_variations")
	}

	if len(scheduleVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScheduleVariations = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ScheduleID {
				local.R.ScheduleVariations = append(local.R.ScheduleVariations, foreign)
				break
			}
		}
	}

	return nil
}

// AddEventSchedulesG adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.EventSchedules.
// Sets related.R.Schedule appropriately.
// Uses the global database handle.
func (o *Schedule) AddEventSchedulesG(insert bool, related ...*EventSchedule) error {
	return o.AddEventSchedules(boil.GetDB(), insert, related...)
}

// AddEventSchedulesP adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.EventSchedules.
// Sets related.R.Schedule appropriately.
// Panics on error.
func (o *Schedule) AddEventSchedulesP(exec boil.Executor, insert bool, related ...*EventSchedule) {
	if err := o.AddEventSchedules(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEventSchedulesGP adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.EventSchedules.
// Sets related.R.Schedule appropriately.
// Uses the global database handle and panics on error.
func (o *Schedule) AddEventSchedulesGP(insert bool, related ...*EventSchedule) {
	if err := o.AddEventSchedules(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddEventSchedules adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.EventSchedules.
// Sets related.R.Schedule appropriately.
func (o *Schedule) AddEventSchedules(exec boil.Executor, insert bool, related ...*EventSchedule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ScheduleID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `event_schedules` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"schedule_id"}),
				strmangle.WhereClause("`", "`", 0, eventSchedulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ScheduleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &scheduleR{
			EventSchedules: related,
		}
	} else {
		o.R.EventSchedules = append(o.R.EventSchedules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventScheduleR{
				Schedule: o,
			}
		} else {
			rel.R.Schedule = o
		}
	}
	return nil
}

// AddScheduleVariationsG adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Schedule appropriately.
// Uses the global database handle.
func (o *Schedule) AddScheduleVariationsG(insert bool, related ...*ScheduleVariation) error {
	return o.AddScheduleVariations(boil.GetDB(), insert, related...)
}

// AddScheduleVariationsP adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Schedule appropriately.
// Panics on error.
func (o *Schedule) AddScheduleVariationsP(exec boil.Executor, insert bool, related ...*ScheduleVariation) {
	if err := o.AddScheduleVariations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddScheduleVariationsGP adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Schedule appropriately.
// Uses the global database handle and panics on error.
func (o *Schedule) AddScheduleVariationsGP(insert bool, related ...*ScheduleVariation) {
	if err := o.AddScheduleVariations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddScheduleVariations adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.ScheduleVariations.
// Sets related.R.Schedule appropriately.
func (o *Schedule) AddScheduleVariations(exec boil.Executor, insert bool, related ...*ScheduleVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ScheduleID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `schedule_variations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"schedule_id"}),
				strmangle.WhereClause("`", "`", 0, scheduleVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ScheduleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &scheduleR{
			ScheduleVariations: related,
		}
	} else {
		o.R.ScheduleVariations = append(o.R.ScheduleVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scheduleVariationR{
				Schedule: o,
			}
		} else {
			rel.R.Schedule = o
		}
	}
	return nil
}

// SchedulesG retrieves all records.
func SchedulesG(mods ...qm.QueryMod) scheduleQuery {
	return Schedules(boil.GetDB(), mods...)
}

// Schedules retrieves all the records using an executor.
func Schedules(exec boil.Executor, mods ...qm.QueryMod) scheduleQuery {
	mods = append(mods, qm.From("`schedules`"))
	return scheduleQuery{NewQuery(exec, mods...)}
}

// FindScheduleG retrieves a single record by ID.
func FindScheduleG(id uint64, selectCols ...string) (*Schedule, error) {
	return FindSchedule(boil.GetDB(), id, selectCols...)
}

// FindScheduleGP retrieves a single record by ID, and panics on error.
func FindScheduleGP(id uint64, selectCols ...string) *Schedule {
	retobj, err := FindSchedule(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchedule(exec boil.Executor, id uint64, selectCols ...string) (*Schedule, error) {
	scheduleObj := &Schedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `schedules` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(scheduleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from schedules")
	}

	return scheduleObj, nil
}

// FindScheduleP retrieves a single record by ID with an executor, and panics on error.
func FindScheduleP(exec boil.Executor, id uint64, selectCols ...string) *Schedule {
	retobj, err := FindSchedule(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Schedule) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Schedule) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Schedule) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Schedule) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no schedules provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	scheduleInsertCacheMut.RLock()
	cache, cached := scheduleInsertCache[key]
	scheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			scheduleColumns,
			scheduleColumnsWithDefault,
			scheduleColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scheduleType, scheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `schedules` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `schedules` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `schedules` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, schedulePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into schedules")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == scheduleMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for schedules")
	}

CacheNoHooks:
	if !cached {
		scheduleInsertCacheMut.Lock()
		scheduleInsertCache[key] = cache
		scheduleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Schedule record. See Update for
// whitelist behavior description.
func (o *Schedule) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Schedule record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Schedule) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Schedule, and panics on error.
// See Update for whitelist behavior description.
func (o *Schedule) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Schedule.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Schedule) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	scheduleUpdateCacheMut.RLock()
	cache, cached := scheduleUpdateCache[key]
	scheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			scheduleColumns,
			schedulePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update schedules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `schedules` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, schedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, append(wl, schedulePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update schedules row")
	}

	if !cached {
		scheduleUpdateCacheMut.Lock()
		scheduleUpdateCache[key] = cache
		scheduleUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q scheduleQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q scheduleQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for schedules")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ScheduleSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ScheduleSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ScheduleSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScheduleSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `schedules` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in schedule slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Schedule) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Schedule) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Schedule) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Schedule) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no schedules provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scheduleUpsertCacheMut.RLock()
	cache, cached := scheduleUpsertCache[key]
	scheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			scheduleColumns,
			scheduleColumnsWithDefault,
			scheduleColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			scheduleColumns,
			schedulePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert schedules, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "schedules", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `schedules` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scheduleType, scheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for schedules")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == scheduleMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for schedules")
	}

CacheNoHooks:
	if !cached {
		scheduleUpsertCacheMut.Lock()
		scheduleUpsertCache[key] = cache
		scheduleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Schedule record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Schedule) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Schedule record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Schedule) DeleteG() error {
	if o == nil {
		return errors.New("models: no Schedule provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Schedule record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Schedule) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Schedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Schedule) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Schedule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedulePrimaryKeyMapping)
	sql := "DELETE FROM `schedules` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from schedules")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q scheduleQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q scheduleQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no scheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from schedules")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ScheduleSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ScheduleSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Schedule slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ScheduleSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScheduleSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Schedule slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(scheduleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `schedules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from schedule slice")
	}

	if len(scheduleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Schedule) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Schedule) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Schedule) ReloadG() error {
	if o == nil {
		return errors.New("models: no Schedule provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Schedule) Reload(exec boil.Executor) error {
	ret, err := FindSchedule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ScheduleSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ScheduleSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduleSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ScheduleSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	schedules := ScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `schedules`.* FROM `schedules` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, schedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&schedules)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScheduleSlice")
	}

	*o = schedules

	return nil
}

// ScheduleExists checks if the Schedule row exists.
func ScheduleExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `schedules` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if schedules exists")
	}

	return exists, nil
}

// ScheduleExistsG checks if the Schedule row exists.
func ScheduleExistsG(id uint64) (bool, error) {
	return ScheduleExists(boil.GetDB(), id)
}

// ScheduleExistsGP checks if the Schedule row exists. Panics on error.
func ScheduleExistsGP(id uint64) bool {
	e, err := ScheduleExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ScheduleExistsP checks if the Schedule row exists. Panics on error.
func ScheduleExistsP(exec boil.Executor, id uint64) bool {
	e, err := ScheduleExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SRAddSongDatabaseVariation is an object representing the database table.
type SRAddSongDatabaseVariation struct {
	ID             uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	SRID           uint64 `boil:"sr_id" json:"sr_id" toml:"sr_id" yaml:"sr_id"`
	VariationID    uint64 `boil:"variation_id" json:"variation_id" toml:"variation_id" yaml:"variation_id"`
	SongDatabaseID uint64 `boil:"song_database_id" json:"song_database_id" toml:"song_database_id" yaml:"song_database_id"`

	R *srAddSongDatabaseVariationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L srAddSongDatabaseVariationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SRAddSongDatabaseVariationColumns = struct {
	ID             string
	SRID           string
	VariationID    string
	SongDatabaseID string
}{
	ID:             "id",
	SRID:           "sr_id",
	VariationID:    "variation_id",
	SongDatabaseID: "song_database_id",
}

// srAddSongDatabaseVariationR is where relationships are stored.
type srAddSongDatabaseVariationR struct {
	SR           *SynchronizationRaport
	Variation    *Variation
	SongDatabase *SongDatabase
}

// srAddSongDatabaseVariationL is where Load methods for each relationship are stored.
type srAddSongDatabaseVariationL struct{}

var (
	srAddSongDatabaseVariationColumns               = []string{"id", "sr_id", "variation_id", "song_database_id"}
	srAddSongDatabaseVariationColumnsWithoutDefault = []string{"sr_id", "variation_id", "song_database_id"}
	srAddSongDatabaseVariationColumnsWithDefault    = []string{"id"}
	srAddSongDatabaseVariationPrimaryKeyColumns     = []string{"id"}
)

type (
	// SRAddSongDatabaseVariationSlice is an alias for a slice of pointers to SRAddSongDatabaseVariation.
	// This should generally be used opposed to []SRAddSongDatabaseVariation.
	SRAddSongDatabaseVariationSlice []*SRAddSongDatabaseVariation
	// SRAddSongDatabaseVariationHook is the signature for custom SRAddSongDatabaseVariation hook methods
	SRAddSongDatabaseVariationHook func(boil.Executor, *SRAddSongDatabaseVariation) error

	srAddSongDatabaseVariationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	srAddSongDatabaseVariationType                 = reflect.TypeOf(&SRAddSongDatabaseVariation{})
	srAddSongDatabaseVariationMapping              = queries.MakeStructMapping(srAddSongDatabaseVariationType)
	srAddSongDatabaseVariationPrimaryKeyMapping, _ = queries.BindMapping(srAddSongDatabaseVariationType, srAddSongDatabaseVariationMapping, srAddSongDatabaseVariationPrimaryKeyColumns)
	srAddSongDatabaseVariationInsertCacheMut       sync.RWMutex
	srAddSongDatabaseVariationInsertCache          = make(map[string]insertCache)
	srAddSongDatabaseVariationUpdateCacheMut       sync.RWMutex
	srAddSongDatabaseVariationUpdateCache          = make(map[string]updateCache)
	srAddSongDatabaseVariationUpsertCacheMut       sync.RWMutex
	srAddSongDatabaseVariationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var srAddSongDatabaseVariationBeforeInsertHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationBeforeUpdateHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationBeforeDeleteHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationBeforeUpsertHooks []SRAddSongDatabaseVariationHook

var srAddSongDatabaseVariationAfterInsertHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationAfterSelectHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationAfterUpdateHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationAfterDeleteHooks []SRAddSongDatabaseVariationHook
var srAddSongDatabaseVariationAfterUpsertHooks []SRAddSongDatabaseVariationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SRAddSongDatabaseVariation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SRAddSongDatabaseVariation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SRAddSongDatabaseVariation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SRAddSongDatabaseVariation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SRAddSongDatabaseVariation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SRAddSongDatabaseVariation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SRAddSongDatabaseVariation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SRAddSongDatabaseVariation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SRAddSongDatabaseVariation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srAddSongDatabaseVariationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSRAddSongDatabaseVariationHook registers your hook function for all future operations.
func AddSRAddSongDatabaseVariationHook(hookPoint boil.HookPoint, srAddSongDatabaseVariationHook SRAddSongDatabaseVariationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		srAddSongDatabaseVariationBeforeInsertHooks = append(srAddSongDatabaseVariationBeforeInsertHooks, srAddSongDatabaseVariationHook)
	case boil.BeforeUpdateHook:
		srAddSongDatabaseVariationBeforeUpdateHooks = append(srAddSongDatabaseVariationBeforeUpdateHooks, srAddSongDatabaseVariationHook)
	case boil.BeforeDeleteHook:
		srAddSongDatabaseVariationBeforeDeleteHooks = append(srAddSongDatabaseVariationBeforeDeleteHooks, srAddSongDatabaseVariationHook)
	case boil.BeforeUpsertHook:
		srAddSongDatabaseVariationBeforeUpsertHooks = append(srAddSongDatabaseVariationBeforeUpsertHooks, srAddSongDatabaseVariationHook)
	case boil.AfterInsertHook:
		srAddSongDatabaseVariationAfterInsertHooks = append(srAddSongDatabaseVariationAfterInsertHooks, srAddSongDatabaseVariationHook)
	case boil.AfterSelectHook:
		srAddSongDatabaseVariationAfterSelectHooks = append(srAddSongDatabaseVariationAfterSelectHooks, srAddSongDatabaseVariationHook)
	case boil.AfterUpdateHook:
		srAddSongDatabaseVariationAfterUpdateHooks = append(srAddSongDatabaseVariationAfterUpdateHooks, srAddSongDatabaseVariationHook)
	case boil.AfterDeleteHook:
		srAddSongDatabaseVariationAfterDeleteHooks = append(srAddSongDatabaseVariationAfterDeleteHooks, srAddSongDatabaseVariationHook)
	case boil.AfterUpsertHook:
		srAddSongDatabaseVariationAfterUpsertHooks = append(srAddSongDatabaseVariationAfterUpsertHooks, srAddSongDatabaseVariationHook)
	}
}

// OneP returns a single srAddSongDatabaseVariation record from the query, and panics on error.
func (q srAddSongDatabaseVariationQuery) OneP() *SRAddSongDatabaseVariation {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single srAddSongDatabaseVariation record from the query.
func (q srAddSongDatabaseVariationQuery) One() (*SRAddSongDatabaseVariation, error) {
	o := &SRAddSongDatabaseVariation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sr_add_song_database_variations")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SRAddSongDatabaseVariation records from the query, and panics on error.
func (q srAddSongDatabaseVariationQuery) AllP() SRAddSongDatabaseVariationSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SRAddSongDatabaseVariation records from the query.
func (q srAddSongDatabaseVariationQuery) All() (SRAddSongDatabaseVariationSlice, error) {
	var o []*SRAddSongDatabaseVariation

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SRAddSongDatabaseVariation slice")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SRAddSongDatabaseVariation records in the query, and panics on error.
func (q srAddSongDatabaseVariationQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SRAddSongDatabaseVariation records in the query.
func (q srAddSongDatabaseVariationQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sr_add_song_database_variations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q srAddSongDatabaseVariationQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q srAddSongDatabaseVariationQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sr_add_song_database_variations exists")
	}

	return count > 0, nil
}

// SRG pointed to by the foreign key.
func (o *SRAddSongDatabaseVariation) SRG(mods ...qm.QueryMod) synchronizationRaportQuery {
	return o.SR(boil.GetDB(), mods...)
}

// SR pointed to by the foreign key.
func (o *SRAddSongDatabaseVariation) SR(exec boil.Executor, mods ...qm.QueryMod) synchronizationRaportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SRID),
	}

	queryMods = append(queryMods, mods...)

	query := SynchronizationRaports(exec, queryMods...)
	queries.SetFrom(query.Query, "`synchronization_raports`")

	return query
}

// VariationG pointed to by the foreign key.
func (o *SRAddSongDatabaseVariation) VariationG(mods ...qm.QueryMod) variationQuery {
	return o.Variation(boil.GetDB(), mods...)
}

// Variation pointed to by the foreign key.
func (o *SRAddSongDatabaseVariation) Variation(exec boil.Executor, mods ...qm.QueryMod) variationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationID),
	}

	queryMods = append(queryMods, mods...)

	query := Variations(exec, queryMods...)
	queries.SetFrom(query.Query, "`variations`")

	return query
}

// SongDatabaseG pointed to by the foreign key.
func (o *SRAddSongDatabaseVariation) SongDatabaseG(mods ...qm.QueryMod) songDatabaseQuery {
	return o.SongDatabase(boil.GetDB(), mods...)
}

// SongDatabase pointed to by the foreign key.
func (o *SRAddSongDatabaseVariation) SongDatabase(exec boil.Executor, mods ...qm.QueryMod) songDatabaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SongDatabaseID),
	}

	queryMods = append(queryMods, mods...)

	query := SongDatabases(exec, queryMods...)
	queries.SetFrom(query.Query, "`song_databases`")

	return query
} // LoadSR allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srAddSongDatabaseVariationL) LoadSR(e boil.Executor, singular bool, maybeSRAddSongDatabaseVariation interface{}) error {
	var slice []*SRAddSongDatabaseVariation
	var object *SRAddSongDatabaseVariation

	count := 1
	if singular {
		object = maybeSRAddSongDatabaseVariation.(*SRAddSongDatabaseVariation)
	} else {
		slice = *maybeSRAddSongDatabaseVariation.(*[]*SRAddSongDatabaseVariation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srAddSongDatabaseVariationR{}
		}
		args[0] = object.SRID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srAddSongDatabaseVariationR{}
			}
			args[i] = obj.SRID
		}
	}

	query := fmt.Sprintf(
		"select * from `synchronization_raports` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SynchronizationRaport")
	}
	defer results.Close()

	var resultSlice []*SynchronizationRaport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SynchronizationRaport")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SR = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRID == foreign.ID {
				local.R.SR = foreign
				break
			}
		}
	}

	return nil
}

// LoadVariation allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srAddSongDatabaseVariationL) LoadVariation(e boil.Executor, singular bool, maybeSRAddSongDatabaseVariation interface{}) error {
	var slice []*SRAddSongDatabaseVariation
	var object *SRAddSongDatabaseVariation

	count := 1
	if singular {
		object = maybeSRAddSongDatabaseVariation.(*SRAddSongDatabaseVariation)
	} else {
		slice = *maybeSRAddSongDatabaseVariation.(*[]*SRAddSongDatabaseVariation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srAddSongDatabaseVariationR{}
		}
		args[0] = object.VariationID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srAddSongDatabaseVariationR{}
			}
			args[i] = obj.VariationID
		}
	}

	query := fmt.Sprintf(
		"select * from `variations` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Variation")
	}
	defer results.Close()

	var resultSlice []*Variation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Variation")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Variation = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationID == foreign.ID {
				local.R.Variation = foreign
				break
			}
		}
	}

	return nil
}

// LoadSongDatabase allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srAddSongDatabaseVariationL) LoadSongDatabase(e boil.Executor, singular bool, maybeSRAddSongDatabaseVariation interface{}) error {
	var slice []*SRAddSongDatabaseVariation
	var object *SRAddSongDatabaseVariation

	count := 1
	if singular {
		object = maybeSRAddSongDatabaseVariation.(*SRAddSongDatabaseVariation)
	} else {
		slice = *maybeSRAddSongDatabaseVariation.(*[]*SRAddSongDatabaseVariation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srAddSongDatabaseVariationR{}
		}
		args[0] = object.SongDatabaseID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srAddSongDatabaseVariationR{}
			}
			args[i] = obj.SongDatabaseID
		}
	}

	query := fmt.Sprintf(
		"select * from `song_databases` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SongDatabase")
	}
	defer results.Close()

	var resultSlice []*SongDatabase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SongDatabase")
	}

	if len(srAddSongDatabaseVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SongDatabase = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SongDatabaseID == foreign.ID {
				local.R.SongDatabase = foreign
				break
			}
		}
	}

	return nil
}

// SetSRG of the sr_add_song_database_variation to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRAddSongDatabaseVariations.
// Uses the global database handle.
func (o *SRAddSongDatabaseVariation) SetSRG(insert bool, related *SynchronizationRaport) error {
	return o.SetSR(boil.GetDB(), insert, related)
}

// SetSRP of the sr_add_song_database_variation to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRAddSongDatabaseVariations.
// Panics on error.
func (o *SRAddSongDatabaseVariation) SetSRP(exec boil.Executor, insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSRGP of the sr_add_song_database_variation to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRAddSongDatabaseVariations.
// Uses the global database handle and panics on error.
func (o *SRAddSongDatabaseVariation) SetSRGP(insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSR of the sr_add_song_database_variation to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSRAddSongDatabaseVariations.
func (o *SRAddSongDatabaseVariation) SetSR(exec boil.Executor, insert bool, related *SynchronizationRaport) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
		strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRID = related.ID

	if o.R == nil {
		o.R = &srAddSongDatabaseVariationR{
			SR: related,
		}
	} else {
		o.R.SR = related
	}

	if related.R == nil {
		related.R = &synchronizationRaportR{
			SRSRAddSongDatabaseVariations: SRAddSongDatabaseVariationSlice{o},
		}
	} else {
		related.R.SRSRAddSongDatabaseVariations = append(related.R.SRSRAddSongDatabaseVariations, o)
	}

	return nil
}

// SetVariationG of the sr_add_song_database_variation to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
// Uses the global database handle.
func (o *SRAddSongDatabaseVariation) SetVariationG(insert bool, related *Variation) error {
	return o.SetVariation(boil.GetDB(), insert, related)
}

// SetVariationP of the sr_add_song_database_variation to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
// Panics on error.
func (o *SRAddSongDatabaseVariation) SetVariationP(exec boil.Executor, insert bool, related *Variation) {
	if err := o.SetVariation(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationGP of the sr_add_song_database_variation to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
// Uses the global database handle and panics on error.
func (o *SRAddSongDatabaseVariation) SetVariationGP(insert bool, related *Variation) {
	if err := o.SetVariation(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariation of the sr_add_song_database_variation to the related item.
// Sets o.R.Variation to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
func (o *SRAddSongDatabaseVariation) SetVariation(exec boil.Executor, insert bool, related *Variation) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_id"}),
		strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationID = related.ID

	if o.R == nil {
		o.R = &srAddSongDatabaseVariationR{
			Variation: related,
		}
	} else {
		o.R.Variation = related
	}

	if related.R == nil {
		related.R = &variationR{
			SRAddSongDatabaseVariations: SRAddSongDatabaseVariationSlice{o},
		}
	} else {
		related.R.SRAddSongDatabaseVariations = append(related.R.SRAddSongDatabaseVariations, o)
	}

	return nil
}

// SetSongDatabaseG of the sr_add_song_database_variation to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
// Uses the global database handle.
func (o *SRAddSongDatabaseVariation) SetSongDatabaseG(insert bool, related *SongDatabase) error {
	return o.SetSongDatabase(boil.GetDB(), insert, related)
}

// SetSongDatabaseP of the sr_add_song_database_variation to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
// Panics on error.
func (o *SRAddSongDatabaseVariation) SetSongDatabaseP(exec boil.Executor, insert bool, related *SongDatabase) {
	if err := o.SetSongDatabase(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongDatabaseGP of the sr_add_song_database_variation to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
// Uses the global database handle and panics on error.
func (o *SRAddSongDatabaseVariation) SetSongDatabaseGP(insert bool, related *SongDatabase) {
	if err := o.SetSongDatabase(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSongDatabase of the sr_add_song_database_variation to the related item.
// Sets o.R.SongDatabase to related.
// Adds o to related.R.SRAddSongDatabaseVariations.
func (o *SRAddSongDatabaseVariation) SetSongDatabase(exec boil.Executor, insert bool, related *SongDatabase) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"song_database_id"}),
		strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SongDatabaseID = related.ID

	if o.R == nil {
		o.R = &srAddSongDatabaseVariationR{
			SongDatabase: related,
		}
	} else {
		o.R.SongDatabase = related
	}

	if related.R == nil {
		related.R = &songDatabaseR{
			SRAddSongDatabaseVariations: SRAddSongDatabaseVariationSlice{o},
		}
	} else {
		related.R.SRAddSongDatabaseVariations = append(related.R.SRAddSongDatabaseVariations, o)
	}

	return nil
}

// SRAddSongDatabaseVariationsG retrieves all records.
func SRAddSongDatabaseVariationsG(mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	return SRAddSongDatabaseVariations(boil.GetDB(), mods...)
}

// SRAddSongDatabaseVariations retrieves all the records using an executor.
func SRAddSongDatabaseVariations(exec boil.Executor, mods ...qm.QueryMod) srAddSongDatabaseVariationQuery {
	mods = append(mods, qm.From("`sr_add_song_database_variations`"))
	return srAddSongDatabaseVariationQuery{NewQuery(exec, mods...)}
}

// FindSRAddSongDatabaseVariationG retrieves a single record by ID.
func FindSRAddSongDatabaseVariationG(id uint64, selectCols ...string) (*SRAddSongDatabaseVariation, error) {
	return FindSRAddSongDatabaseVariation(boil.GetDB(), id, selectCols...)
}

// FindSRAddSongDatabaseVariationGP retrieves a single record by ID, and panics on error.
func FindSRAddSongDatabaseVariationGP(id uint64, selectCols ...string) *SRAddSongDatabaseVariation {
	retobj, err := FindSRAddSongDatabaseVariation(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSRAddSongDatabaseVariation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSRAddSongDatabaseVariation(exec boil.Executor, id uint64, selectCols ...string) (*SRAddSongDatabaseVariation, error) {
	srAddSongDatabaseVariationObj := &SRAddSongDatabaseVariation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sr_add_song_database_variations` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(srAddSongDatabaseVariationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sr_add_song_database_variations")
	}

	return srAddSongDatabaseVariationObj, nil
}

// FindSRAddSongDatabaseVariationP retrieves a single record by ID with an executor, and panics on error.
func FindSRAddSongDatabaseVariationP(exec boil.Executor, id uint64, selectCols ...string) *SRAddSongDatabaseVariation {
	retobj, err := FindSRAddSongDatabaseVariation(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SRAddSongDatabaseVariation) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SRAddSongDatabaseVariation) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SRAddSongDatabaseVariation) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SRAddSongDatabaseVariation) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_add_song_database_variations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srAddSongDatabaseVariationColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	srAddSongDatabaseVariationInsertCacheMut.RLock()
	cache, cached := srAddSongDatabaseVariationInsertCache[key]
	srAddSongDatabaseVariationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			srAddSongDatabaseVariationColumns,
			srAddSongDatabaseVariationColumnsWithDefault,
			srAddSongDatabaseVariationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(srAddSongDatabaseVariationType, srAddSongDatabaseVariationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(srAddSongDatabaseVariationType, srAddSongDatabaseVariationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sr_add_song_database_variations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sr_add_song_database_variations` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sr_add_song_database_variations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sr_add_song_database_variations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srAddSongDatabaseVariationMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_add_song_database_variations")
	}

CacheNoHooks:
	if !cached {
		srAddSongDatabaseVariationInsertCacheMut.Lock()
		srAddSongDatabaseVariationInsertCache[key] = cache
		srAddSongDatabaseVariationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SRAddSongDatabaseVariation record. See Update for
// whitelist behavior description.
func (o *SRAddSongDatabaseVariation) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SRAddSongDatabaseVariation record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SRAddSongDatabaseVariation) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SRAddSongDatabaseVariation, and panics on error.
// See Update for whitelist behavior description.
func (o *SRAddSongDatabaseVariation) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SRAddSongDatabaseVariation.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SRAddSongDatabaseVariation) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	srAddSongDatabaseVariationUpdateCacheMut.RLock()
	cache, cached := srAddSongDatabaseVariationUpdateCache[key]
	srAddSongDatabaseVariationUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			srAddSongDatabaseVariationColumns,
			srAddSongDatabaseVariationPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sr_add_song_database_variations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, srAddSongDatabaseVariationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(srAddSongDatabaseVariationType, srAddSongDatabaseVariationMapping, append(wl, srAddSongDatabaseVariationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sr_add_song_database_variations row")
	}

	if !cached {
		srAddSongDatabaseVariationUpdateCacheMut.Lock()
		srAddSongDatabaseVariationUpdateCache[key] = cache
		srAddSongDatabaseVariationUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q srAddSongDatabaseVariationQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q srAddSongDatabaseVariationQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sr_add_song_database_variations")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SRAddSongDatabaseVariationSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SRAddSongDatabaseVariationSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SRAddSongDatabaseVariationSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SRAddSongDatabaseVariationSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srAddSongDatabaseVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sr_add_song_database_variations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srAddSongDatabaseVariationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in srAddSongDatabaseVariation slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SRAddSongDatabaseVariation) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SRAddSongDatabaseVariation) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SRAddSongDatabaseVariation) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SRAddSongDatabaseVariation) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_add_song_database_variations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srAddSongDatabaseVariationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	srAddSongDatabaseVariationUpsertCacheMut.RLock()
	cache, cached := srAddSongDatabaseVariationUpsertCache[key]
	srAddSongDatabaseVariationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			srAddSongDatabaseVariationColumns,
			srAddSongDatabaseVariationColumnsWithDefault,
			srAddSongDatabaseVariationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			srAddSongDatabaseVariationColumns,
			srAddSongDatabaseVariationPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sr_add_song_database_variations, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "sr_add_song_database_variations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sr_add_song_database_variations` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(srAddSongDatabaseVariationType, srAddSongDatabaseVariationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(srAddSongDatabaseVariationType, srAddSongDatabaseVariationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sr_add_song_database_variations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srAddSongDatabaseVariationMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_add_song_database_variations")
	}

CacheNoHooks:
	if !cached {
		srAddSongDatabaseVariationUpsertCacheMut.Lock()
		srAddSongDatabaseVariationUpsertCache[key] = cache
		srAddSongDatabaseVariationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SRAddSongDatabaseVariation record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SRAddSongDatabaseVariation) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SRAddSongDatabaseVariation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SRAddSongDatabaseVariation) DeleteG() error {
	if o == nil {
		return errors.New("models: no SRAddSongDatabaseVariation provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SRAddSongDatabaseVariation record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SRAddSongDatabaseVariation) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SRAddSongDatabaseVariation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SRAddSongDatabaseVariation) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SRAddSongDatabaseVariation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), srAddSongDatabaseVariationPrimaryKeyMapping)
	sql := "DELETE FROM `sr_add_song_database_variations` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sr_add_song_database_variations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q srAddSongDatabaseVariationQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q srAddSongDatabaseVariationQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no srAddSongDatabaseVariationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sr_add_song_database_variations")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SRAddSongDatabaseVariationSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SRAddSongDatabaseVariationSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SRAddSongDatabaseVariation slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SRAddSongDatabaseVariationSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SRAddSongDatabaseVariationSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SRAddSongDatabaseVariation slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(srAddSongDatabaseVariationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srAddSongDatabaseVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sr_add_song_database_variations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srAddSongDatabaseVariationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from srAddSongDatabaseVariation slice")
	}

	if len(srAddSongDatabaseVariationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SRAddSongDatabaseVariation) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SRAddSongDatabaseVariation) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SRAddSongDatabaseVariation) ReloadG() error {
	if o == nil {
		return errors.New("models: no SRAddSongDatabaseVariation provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SRAddSongDatabaseVariation) Reload(exec boil.Executor) error {
	ret, err := FindSRAddSongDatabaseVariation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SRAddSongDatabaseVariationSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SRAddSongDatabaseVariationSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SRAddSongDatabaseVariationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SRAddSongDatabaseVariationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SRAddSongDatabaseVariationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	srAddSongDatabaseVariations := SRAddSongDatabaseVariationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srAddSongDatabaseVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sr_add_song_database_variations`.* FROM `sr_add_song_database_variations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srAddSongDatabaseVariationPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&srAddSongDatabaseVariations)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SRAddSongDatabaseVariationSlice")
	}

	*o = srAddSongDatabaseVariations

	return nil
}

// SRAddSongDatabaseVariationExists checks if the SRAddSongDatabaseVariation row exists.
func SRAddSongDatabaseVariationExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sr_add_song_database_variations` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sr_add_song_database_variations exists")
	}

	return exists, nil
}

// SRAddSongDatabaseVariationExistsG checks if the SRAddSongDatabaseVariation row exists.
func SRAddSongDatabaseVariationExistsG(id uint64) (bool, error) {
	return SRAddSongDatabaseVariationExists(boil.GetDB(), id)
}

// SRAddSongDatabaseVariationExistsGP checks if the SRAddSongDatabaseVariation row exists. Panics on error.
func SRAddSongDatabaseVariationExistsGP(id uint64) bool {
	e, err := SRAddSongDatabaseVariationExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SRAddSongDatabaseVariationExistsP checks if the SRAddSongDatabaseVariation row exists. Panics on error.
func SRAddSongDatabaseVariationExistsP(exec boil.Executor, id uint64) bool {
	e, err := SRAddSongDatabaseVariationExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

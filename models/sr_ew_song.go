// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// SREwSong is an object representing the database table.
type SREwSong struct {
	ID                 uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	SRID               uint64    `boil:"sr_id" json:"sr_id" toml:"sr_id" yaml:"sr_id"`
	VariationVersionID uint64    `boil:"variation_version_id" json:"variation_version_id" toml:"variation_version_id" yaml:"variation_version_id"`
	Operation          null.Int8 `boil:"operation" json:"operation,omitempty" toml:"operation" yaml:"operation,omitempty"`

	R *srEwSongR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L srEwSongL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SREwSongColumns = struct {
	ID                 string
	SRID               string
	VariationVersionID string
	Operation          string
}{
	ID:                 "id",
	SRID:               "sr_id",
	VariationVersionID: "variation_version_id",
	Operation:          "operation",
}

// srEwSongR is where relationships are stored.
type srEwSongR struct {
	SR               *SynchronizationRaport
	VariationVersion *VariationVersion
}

// srEwSongL is where Load methods for each relationship are stored.
type srEwSongL struct{}

var (
	srEwSongColumns               = []string{"id", "sr_id", "variation_version_id", "operation"}
	srEwSongColumnsWithoutDefault = []string{"sr_id", "variation_version_id", "operation"}
	srEwSongColumnsWithDefault    = []string{"id"}
	srEwSongPrimaryKeyColumns     = []string{"id"}
)

type (
	// SREwSongSlice is an alias for a slice of pointers to SREwSong.
	// This should generally be used opposed to []SREwSong.
	SREwSongSlice []*SREwSong
	// SREwSongHook is the signature for custom SREwSong hook methods
	SREwSongHook func(boil.Executor, *SREwSong) error

	srEwSongQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	srEwSongType                 = reflect.TypeOf(&SREwSong{})
	srEwSongMapping              = queries.MakeStructMapping(srEwSongType)
	srEwSongPrimaryKeyMapping, _ = queries.BindMapping(srEwSongType, srEwSongMapping, srEwSongPrimaryKeyColumns)
	srEwSongInsertCacheMut       sync.RWMutex
	srEwSongInsertCache          = make(map[string]insertCache)
	srEwSongUpdateCacheMut       sync.RWMutex
	srEwSongUpdateCache          = make(map[string]updateCache)
	srEwSongUpsertCacheMut       sync.RWMutex
	srEwSongUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var srEwSongBeforeInsertHooks []SREwSongHook
var srEwSongBeforeUpdateHooks []SREwSongHook
var srEwSongBeforeDeleteHooks []SREwSongHook
var srEwSongBeforeUpsertHooks []SREwSongHook

var srEwSongAfterInsertHooks []SREwSongHook
var srEwSongAfterSelectHooks []SREwSongHook
var srEwSongAfterUpdateHooks []SREwSongHook
var srEwSongAfterDeleteHooks []SREwSongHook
var srEwSongAfterUpsertHooks []SREwSongHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SREwSong) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SREwSong) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SREwSong) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SREwSong) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SREwSong) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SREwSong) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SREwSong) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SREwSong) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SREwSong) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range srEwSongAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSREwSongHook registers your hook function for all future operations.
func AddSREwSongHook(hookPoint boil.HookPoint, srEwSongHook SREwSongHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		srEwSongBeforeInsertHooks = append(srEwSongBeforeInsertHooks, srEwSongHook)
	case boil.BeforeUpdateHook:
		srEwSongBeforeUpdateHooks = append(srEwSongBeforeUpdateHooks, srEwSongHook)
	case boil.BeforeDeleteHook:
		srEwSongBeforeDeleteHooks = append(srEwSongBeforeDeleteHooks, srEwSongHook)
	case boil.BeforeUpsertHook:
		srEwSongBeforeUpsertHooks = append(srEwSongBeforeUpsertHooks, srEwSongHook)
	case boil.AfterInsertHook:
		srEwSongAfterInsertHooks = append(srEwSongAfterInsertHooks, srEwSongHook)
	case boil.AfterSelectHook:
		srEwSongAfterSelectHooks = append(srEwSongAfterSelectHooks, srEwSongHook)
	case boil.AfterUpdateHook:
		srEwSongAfterUpdateHooks = append(srEwSongAfterUpdateHooks, srEwSongHook)
	case boil.AfterDeleteHook:
		srEwSongAfterDeleteHooks = append(srEwSongAfterDeleteHooks, srEwSongHook)
	case boil.AfterUpsertHook:
		srEwSongAfterUpsertHooks = append(srEwSongAfterUpsertHooks, srEwSongHook)
	}
}

// OneP returns a single srEwSong record from the query, and panics on error.
func (q srEwSongQuery) OneP() *SREwSong {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single srEwSong record from the query.
func (q srEwSongQuery) One() (*SREwSong, error) {
	o := &SREwSong{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sr_ew_song")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SREwSong records from the query, and panics on error.
func (q srEwSongQuery) AllP() SREwSongSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SREwSong records from the query.
func (q srEwSongQuery) All() (SREwSongSlice, error) {
	var o []*SREwSong

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SREwSong slice")
	}

	if len(srEwSongAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SREwSong records in the query, and panics on error.
func (q srEwSongQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SREwSong records in the query.
func (q srEwSongQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sr_ew_song rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q srEwSongQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q srEwSongQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sr_ew_song exists")
	}

	return count > 0, nil
}

// SRG pointed to by the foreign key.
func (o *SREwSong) SRG(mods ...qm.QueryMod) synchronizationRaportQuery {
	return o.SR(boil.GetDB(), mods...)
}

// SR pointed to by the foreign key.
func (o *SREwSong) SR(exec boil.Executor, mods ...qm.QueryMod) synchronizationRaportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.SRID),
	}

	queryMods = append(queryMods, mods...)

	query := SynchronizationRaports(exec, queryMods...)
	queries.SetFrom(query.Query, "`synchronization_raports`")

	return query
}

// VariationVersionG pointed to by the foreign key.
func (o *SREwSong) VariationVersionG(mods ...qm.QueryMod) variationVersionQuery {
	return o.VariationVersion(boil.GetDB(), mods...)
}

// VariationVersion pointed to by the foreign key.
func (o *SREwSong) VariationVersion(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationVersionID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
} // LoadSR allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwSongL) LoadSR(e boil.Executor, singular bool, maybeSREwSong interface{}) error {
	var slice []*SREwSong
	var object *SREwSong

	count := 1
	if singular {
		object = maybeSREwSong.(*SREwSong)
	} else {
		slice = *maybeSREwSong.(*[]*SREwSong)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwSongR{}
		}
		args[0] = object.SRID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwSongR{}
			}
			args[i] = obj.SRID
		}
	}

	query := fmt.Sprintf(
		"select * from `synchronization_raports` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SynchronizationRaport")
	}
	defer results.Close()

	var resultSlice []*SynchronizationRaport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SynchronizationRaport")
	}

	if len(srEwSongAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SR = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SRID == foreign.ID {
				local.R.SR = foreign
				break
			}
		}
	}

	return nil
}

// LoadVariationVersion allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (srEwSongL) LoadVariationVersion(e boil.Executor, singular bool, maybeSREwSong interface{}) error {
	var slice []*SREwSong
	var object *SREwSong

	count := 1
	if singular {
		object = maybeSREwSong.(*SREwSong)
	} else {
		slice = *maybeSREwSong.(*[]*SREwSong)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &srEwSongR{}
		}
		args[0] = object.VariationVersionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &srEwSongR{}
			}
			args[i] = obj.VariationVersionID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(srEwSongAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.VariationVersion = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationVersionID == foreign.ID {
				local.R.VariationVersion = foreign
				break
			}
		}
	}

	return nil
}

// SetSRG of the sr_ew_song to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwSongs.
// Uses the global database handle.
func (o *SREwSong) SetSRG(insert bool, related *SynchronizationRaport) error {
	return o.SetSR(boil.GetDB(), insert, related)
}

// SetSRP of the sr_ew_song to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwSongs.
// Panics on error.
func (o *SREwSong) SetSRP(exec boil.Executor, insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSRGP of the sr_ew_song to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwSongs.
// Uses the global database handle and panics on error.
func (o *SREwSong) SetSRGP(insert bool, related *SynchronizationRaport) {
	if err := o.SetSR(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSR of the sr_ew_song to the related item.
// Sets o.R.SR to related.
// Adds o to related.R.SRSREwSongs.
func (o *SREwSong) SetSR(exec boil.Executor, insert bool, related *SynchronizationRaport) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"sr_id"}),
		strmangle.WhereClause("`", "`", 0, srEwSongPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SRID = related.ID

	if o.R == nil {
		o.R = &srEwSongR{
			SR: related,
		}
	} else {
		o.R.SR = related
	}

	if related.R == nil {
		related.R = &synchronizationRaportR{
			SRSREwSongs: SREwSongSlice{o},
		}
	} else {
		related.R.SRSREwSongs = append(related.R.SRSREwSongs, o)
	}

	return nil
}

// SetVariationVersionG of the sr_ew_song to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwSongs.
// Uses the global database handle.
func (o *SREwSong) SetVariationVersionG(insert bool, related *VariationVersion) error {
	return o.SetVariationVersion(boil.GetDB(), insert, related)
}

// SetVariationVersionP of the sr_ew_song to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwSongs.
// Panics on error.
func (o *SREwSong) SetVariationVersionP(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersionGP of the sr_ew_song to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwSongs.
// Uses the global database handle and panics on error.
func (o *SREwSong) SetVariationVersionGP(insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersion of the sr_ew_song to the related item.
// Sets o.R.VariationVersion to related.
// Adds o to related.R.SREwSongs.
func (o *SREwSong) SetVariationVersion(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `sr_ew_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_version_id"}),
		strmangle.WhereClause("`", "`", 0, srEwSongPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationVersionID = related.ID

	if o.R == nil {
		o.R = &srEwSongR{
			VariationVersion: related,
		}
	} else {
		o.R.VariationVersion = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			SREwSongs: SREwSongSlice{o},
		}
	} else {
		related.R.SREwSongs = append(related.R.SREwSongs, o)
	}

	return nil
}

// SREwSongsG retrieves all records.
func SREwSongsG(mods ...qm.QueryMod) srEwSongQuery {
	return SREwSongs(boil.GetDB(), mods...)
}

// SREwSongs retrieves all the records using an executor.
func SREwSongs(exec boil.Executor, mods ...qm.QueryMod) srEwSongQuery {
	mods = append(mods, qm.From("`sr_ew_song`"))
	return srEwSongQuery{NewQuery(exec, mods...)}
}

// FindSREwSongG retrieves a single record by ID.
func FindSREwSongG(id uint64, selectCols ...string) (*SREwSong, error) {
	return FindSREwSong(boil.GetDB(), id, selectCols...)
}

// FindSREwSongGP retrieves a single record by ID, and panics on error.
func FindSREwSongGP(id uint64, selectCols ...string) *SREwSong {
	retobj, err := FindSREwSong(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSREwSong retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSREwSong(exec boil.Executor, id uint64, selectCols ...string) (*SREwSong, error) {
	srEwSongObj := &SREwSong{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sr_ew_song` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(srEwSongObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sr_ew_song")
	}

	return srEwSongObj, nil
}

// FindSREwSongP retrieves a single record by ID with an executor, and panics on error.
func FindSREwSongP(exec boil.Executor, id uint64, selectCols ...string) *SREwSong {
	retobj, err := FindSREwSong(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SREwSong) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SREwSong) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SREwSong) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SREwSong) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_ew_song provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srEwSongColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	srEwSongInsertCacheMut.RLock()
	cache, cached := srEwSongInsertCache[key]
	srEwSongInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			srEwSongColumns,
			srEwSongColumnsWithDefault,
			srEwSongColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(srEwSongType, srEwSongMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(srEwSongType, srEwSongMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sr_ew_song` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sr_ew_song` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sr_ew_song` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, srEwSongPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sr_ew_song")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srEwSongMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_ew_song")
	}

CacheNoHooks:
	if !cached {
		srEwSongInsertCacheMut.Lock()
		srEwSongInsertCache[key] = cache
		srEwSongInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SREwSong record. See Update for
// whitelist behavior description.
func (o *SREwSong) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SREwSong record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SREwSong) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SREwSong, and panics on error.
// See Update for whitelist behavior description.
func (o *SREwSong) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SREwSong.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SREwSong) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	srEwSongUpdateCacheMut.RLock()
	cache, cached := srEwSongUpdateCache[key]
	srEwSongUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			srEwSongColumns,
			srEwSongPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sr_ew_song, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sr_ew_song` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, srEwSongPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(srEwSongType, srEwSongMapping, append(wl, srEwSongPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sr_ew_song row")
	}

	if !cached {
		srEwSongUpdateCacheMut.Lock()
		srEwSongUpdateCache[key] = cache
		srEwSongUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q srEwSongQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q srEwSongQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sr_ew_song")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SREwSongSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SREwSongSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SREwSongSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SREwSongSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sr_ew_song` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwSongPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in srEwSong slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SREwSong) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SREwSong) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SREwSong) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SREwSong) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sr_ew_song provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(srEwSongColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	srEwSongUpsertCacheMut.RLock()
	cache, cached := srEwSongUpsertCache[key]
	srEwSongUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			srEwSongColumns,
			srEwSongColumnsWithDefault,
			srEwSongColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			srEwSongColumns,
			srEwSongPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sr_ew_song, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "sr_ew_song", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sr_ew_song` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(srEwSongType, srEwSongMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(srEwSongType, srEwSongMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sr_ew_song")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == srEwSongMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sr_ew_song")
	}

CacheNoHooks:
	if !cached {
		srEwSongUpsertCacheMut.Lock()
		srEwSongUpsertCache[key] = cache
		srEwSongUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SREwSong record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SREwSong) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SREwSong record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SREwSong) DeleteG() error {
	if o == nil {
		return errors.New("models: no SREwSong provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SREwSong record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SREwSong) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SREwSong record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SREwSong) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SREwSong provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), srEwSongPrimaryKeyMapping)
	sql := "DELETE FROM `sr_ew_song` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sr_ew_song")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q srEwSongQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q srEwSongQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no srEwSongQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sr_ew_song")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SREwSongSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SREwSongSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no SREwSong slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SREwSongSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SREwSongSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no SREwSong slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(srEwSongBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sr_ew_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwSongPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from srEwSong slice")
	}

	if len(srEwSongAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SREwSong) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SREwSong) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SREwSong) ReloadG() error {
	if o == nil {
		return errors.New("models: no SREwSong provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SREwSong) Reload(exec boil.Executor) error {
	ret, err := FindSREwSong(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SREwSongSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SREwSongSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SREwSongSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SREwSongSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SREwSongSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	srEwSongs := SREwSongSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), srEwSongPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sr_ew_song`.* FROM `sr_ew_song` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, srEwSongPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&srEwSongs)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SREwSongSlice")
	}

	*o = srEwSongs

	return nil
}

// SREwSongExists checks if the SREwSong row exists.
func SREwSongExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sr_ew_song` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sr_ew_song exists")
	}

	return exists, nil
}

// SREwSongExistsG checks if the SREwSong row exists.
func SREwSongExistsG(id uint64) (bool, error) {
	return SREwSongExists(boil.GetDB(), id)
}

// SREwSongExistsGP checks if the SREwSong row exists. Panics on error.
func SREwSongExistsGP(id uint64) bool {
	e, err := SREwSongExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SREwSongExistsP checks if the SREwSong row exists. Panics on error.
func SREwSongExistsP(exec boil.Executor, id uint64) bool {
	e, err := SREwSongExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

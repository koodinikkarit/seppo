// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Merge is an object representing the database table.
type Merge struct {
	ID                            uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	VariationVersion1ID           uint64    `boil:"variation_version1_id" json:"variation_version1_id" toml:"variation_version1_id" yaml:"variation_version1_id"`
	VariationVersion2ID           uint64    `boil:"variation_version2_id" json:"variation_version2_id" toml:"variation_version2_id" yaml:"variation_version2_id"`
	DestinationVariationVersionID uint64    `boil:"destination_variation_version_id" json:"destination_variation_version_id" toml:"destination_variation_version_id" yaml:"destination_variation_version_id"`
	CreatedAt                     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *mergeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mergeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MergeColumns = struct {
	ID                            string
	VariationVersion1ID           string
	VariationVersion2ID           string
	DestinationVariationVersionID string
	CreatedAt                     string
}{
	ID:                            "id",
	VariationVersion1ID:           "variation_version1_id",
	VariationVersion2ID:           "variation_version2_id",
	DestinationVariationVersionID: "destination_variation_version_id",
	CreatedAt:                     "created_at",
}

// mergeR is where relationships are stored.
type mergeR struct {
	VariationVersion1           *VariationVersion
	VariationVersion2           *VariationVersion
	DestinationVariationVersion *VariationVersion
}

// mergeL is where Load methods for each relationship are stored.
type mergeL struct{}

var (
	mergeColumns               = []string{"id", "variation_version1_id", "variation_version2_id", "destination_variation_version_id", "created_at"}
	mergeColumnsWithoutDefault = []string{"variation_version1_id", "variation_version2_id", "destination_variation_version_id", "created_at"}
	mergeColumnsWithDefault    = []string{"id"}
	mergePrimaryKeyColumns     = []string{"id"}
)

type (
	// MergeSlice is an alias for a slice of pointers to Merge.
	// This should generally be used opposed to []Merge.
	MergeSlice []*Merge
	// MergeHook is the signature for custom Merge hook methods
	MergeHook func(boil.Executor, *Merge) error

	mergeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mergeType                 = reflect.TypeOf(&Merge{})
	mergeMapping              = queries.MakeStructMapping(mergeType)
	mergePrimaryKeyMapping, _ = queries.BindMapping(mergeType, mergeMapping, mergePrimaryKeyColumns)
	mergeInsertCacheMut       sync.RWMutex
	mergeInsertCache          = make(map[string]insertCache)
	mergeUpdateCacheMut       sync.RWMutex
	mergeUpdateCache          = make(map[string]updateCache)
	mergeUpsertCacheMut       sync.RWMutex
	mergeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var mergeBeforeInsertHooks []MergeHook
var mergeBeforeUpdateHooks []MergeHook
var mergeBeforeDeleteHooks []MergeHook
var mergeBeforeUpsertHooks []MergeHook

var mergeAfterInsertHooks []MergeHook
var mergeAfterSelectHooks []MergeHook
var mergeAfterUpdateHooks []MergeHook
var mergeAfterDeleteHooks []MergeHook
var mergeAfterUpsertHooks []MergeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Merge) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Merge) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Merge) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Merge) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Merge) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Merge) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Merge) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Merge) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Merge) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mergeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMergeHook registers your hook function for all future operations.
func AddMergeHook(hookPoint boil.HookPoint, mergeHook MergeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mergeBeforeInsertHooks = append(mergeBeforeInsertHooks, mergeHook)
	case boil.BeforeUpdateHook:
		mergeBeforeUpdateHooks = append(mergeBeforeUpdateHooks, mergeHook)
	case boil.BeforeDeleteHook:
		mergeBeforeDeleteHooks = append(mergeBeforeDeleteHooks, mergeHook)
	case boil.BeforeUpsertHook:
		mergeBeforeUpsertHooks = append(mergeBeforeUpsertHooks, mergeHook)
	case boil.AfterInsertHook:
		mergeAfterInsertHooks = append(mergeAfterInsertHooks, mergeHook)
	case boil.AfterSelectHook:
		mergeAfterSelectHooks = append(mergeAfterSelectHooks, mergeHook)
	case boil.AfterUpdateHook:
		mergeAfterUpdateHooks = append(mergeAfterUpdateHooks, mergeHook)
	case boil.AfterDeleteHook:
		mergeAfterDeleteHooks = append(mergeAfterDeleteHooks, mergeHook)
	case boil.AfterUpsertHook:
		mergeAfterUpsertHooks = append(mergeAfterUpsertHooks, mergeHook)
	}
}

// OneP returns a single merge record from the query, and panics on error.
func (q mergeQuery) OneP() *Merge {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single merge record from the query.
func (q mergeQuery) One() (*Merge, error) {
	o := &Merge{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for merges")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Merge records from the query, and panics on error.
func (q mergeQuery) AllP() MergeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Merge records from the query.
func (q mergeQuery) All() (MergeSlice, error) {
	var o []*Merge

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Merge slice")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Merge records in the query, and panics on error.
func (q mergeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Merge records in the query.
func (q mergeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count merges rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q mergeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q mergeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if merges exists")
	}

	return count > 0, nil
}

// VariationVersion1G pointed to by the foreign key.
func (o *Merge) VariationVersion1G(mods ...qm.QueryMod) variationVersionQuery {
	return o.VariationVersion1(boil.GetDB(), mods...)
}

// VariationVersion1 pointed to by the foreign key.
func (o *Merge) VariationVersion1(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationVersion1ID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
}

// VariationVersion2G pointed to by the foreign key.
func (o *Merge) VariationVersion2G(mods ...qm.QueryMod) variationVersionQuery {
	return o.VariationVersion2(boil.GetDB(), mods...)
}

// VariationVersion2 pointed to by the foreign key.
func (o *Merge) VariationVersion2(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.VariationVersion2ID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
}

// DestinationVariationVersionG pointed to by the foreign key.
func (o *Merge) DestinationVariationVersionG(mods ...qm.QueryMod) variationVersionQuery {
	return o.DestinationVariationVersion(boil.GetDB(), mods...)
}

// DestinationVariationVersion pointed to by the foreign key.
func (o *Merge) DestinationVariationVersion(exec boil.Executor, mods ...qm.QueryMod) variationVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.DestinationVariationVersionID),
	}

	queryMods = append(queryMods, mods...)

	query := VariationVersions(exec, queryMods...)
	queries.SetFrom(query.Query, "`variation_versions`")

	return query
} // LoadVariationVersion1 allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (mergeL) LoadVariationVersion1(e boil.Executor, singular bool, maybeMerge interface{}) error {
	var slice []*Merge
	var object *Merge

	count := 1
	if singular {
		object = maybeMerge.(*Merge)
	} else {
		slice = *maybeMerge.(*[]*Merge)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &mergeR{}
		}
		args[0] = object.VariationVersion1ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &mergeR{}
			}
			args[i] = obj.VariationVersion1ID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.VariationVersion1 = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationVersion1ID == foreign.ID {
				local.R.VariationVersion1 = foreign
				break
			}
		}
	}

	return nil
}

// LoadVariationVersion2 allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (mergeL) LoadVariationVersion2(e boil.Executor, singular bool, maybeMerge interface{}) error {
	var slice []*Merge
	var object *Merge

	count := 1
	if singular {
		object = maybeMerge.(*Merge)
	} else {
		slice = *maybeMerge.(*[]*Merge)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &mergeR{}
		}
		args[0] = object.VariationVersion2ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &mergeR{}
			}
			args[i] = obj.VariationVersion2ID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.VariationVersion2 = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariationVersion2ID == foreign.ID {
				local.R.VariationVersion2 = foreign
				break
			}
		}
	}

	return nil
}

// LoadDestinationVariationVersion allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (mergeL) LoadDestinationVariationVersion(e boil.Executor, singular bool, maybeMerge interface{}) error {
	var slice []*Merge
	var object *Merge

	count := 1
	if singular {
		object = maybeMerge.(*Merge)
	} else {
		slice = *maybeMerge.(*[]*Merge)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &mergeR{}
		}
		args[0] = object.DestinationVariationVersionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &mergeR{}
			}
			args[i] = obj.DestinationVariationVersionID
		}
	}

	query := fmt.Sprintf(
		"select * from `variation_versions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VariationVersion")
	}
	defer results.Close()

	var resultSlice []*VariationVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VariationVersion")
	}

	if len(mergeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.DestinationVariationVersion = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationVariationVersionID == foreign.ID {
				local.R.DestinationVariationVersion = foreign
				break
			}
		}
	}

	return nil
}

// SetVariationVersion1G of the merge to the related item.
// Sets o.R.VariationVersion1 to related.
// Adds o to related.R.VariationVersion1Merges.
// Uses the global database handle.
func (o *Merge) SetVariationVersion1G(insert bool, related *VariationVersion) error {
	return o.SetVariationVersion1(boil.GetDB(), insert, related)
}

// SetVariationVersion1P of the merge to the related item.
// Sets o.R.VariationVersion1 to related.
// Adds o to related.R.VariationVersion1Merges.
// Panics on error.
func (o *Merge) SetVariationVersion1P(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion1(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersion1GP of the merge to the related item.
// Sets o.R.VariationVersion1 to related.
// Adds o to related.R.VariationVersion1Merges.
// Uses the global database handle and panics on error.
func (o *Merge) SetVariationVersion1GP(insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion1(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersion1 of the merge to the related item.
// Sets o.R.VariationVersion1 to related.
// Adds o to related.R.VariationVersion1Merges.
func (o *Merge) SetVariationVersion1(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `merges` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_version1_id"}),
		strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationVersion1ID = related.ID

	if o.R == nil {
		o.R = &mergeR{
			VariationVersion1: related,
		}
	} else {
		o.R.VariationVersion1 = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			VariationVersion1Merges: MergeSlice{o},
		}
	} else {
		related.R.VariationVersion1Merges = append(related.R.VariationVersion1Merges, o)
	}

	return nil
}

// SetVariationVersion2G of the merge to the related item.
// Sets o.R.VariationVersion2 to related.
// Adds o to related.R.VariationVersion2Merges.
// Uses the global database handle.
func (o *Merge) SetVariationVersion2G(insert bool, related *VariationVersion) error {
	return o.SetVariationVersion2(boil.GetDB(), insert, related)
}

// SetVariationVersion2P of the merge to the related item.
// Sets o.R.VariationVersion2 to related.
// Adds o to related.R.VariationVersion2Merges.
// Panics on error.
func (o *Merge) SetVariationVersion2P(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion2(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersion2GP of the merge to the related item.
// Sets o.R.VariationVersion2 to related.
// Adds o to related.R.VariationVersion2Merges.
// Uses the global database handle and panics on error.
func (o *Merge) SetVariationVersion2GP(insert bool, related *VariationVersion) {
	if err := o.SetVariationVersion2(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVariationVersion2 of the merge to the related item.
// Sets o.R.VariationVersion2 to related.
// Adds o to related.R.VariationVersion2Merges.
func (o *Merge) SetVariationVersion2(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `merges` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"variation_version2_id"}),
		strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariationVersion2ID = related.ID

	if o.R == nil {
		o.R = &mergeR{
			VariationVersion2: related,
		}
	} else {
		o.R.VariationVersion2 = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			VariationVersion2Merges: MergeSlice{o},
		}
	} else {
		related.R.VariationVersion2Merges = append(related.R.VariationVersion2Merges, o)
	}

	return nil
}

// SetDestinationVariationVersionG of the merge to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionMerges.
// Uses the global database handle.
func (o *Merge) SetDestinationVariationVersionG(insert bool, related *VariationVersion) error {
	return o.SetDestinationVariationVersion(boil.GetDB(), insert, related)
}

// SetDestinationVariationVersionP of the merge to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionMerges.
// Panics on error.
func (o *Merge) SetDestinationVariationVersionP(exec boil.Executor, insert bool, related *VariationVersion) {
	if err := o.SetDestinationVariationVersion(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDestinationVariationVersionGP of the merge to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionMerges.
// Uses the global database handle and panics on error.
func (o *Merge) SetDestinationVariationVersionGP(insert bool, related *VariationVersion) {
	if err := o.SetDestinationVariationVersion(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetDestinationVariationVersion of the merge to the related item.
// Sets o.R.DestinationVariationVersion to related.
// Adds o to related.R.DestinationVariationVersionMerges.
func (o *Merge) SetDestinationVariationVersion(exec boil.Executor, insert bool, related *VariationVersion) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `merges` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"destination_variation_version_id"}),
		strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationVariationVersionID = related.ID

	if o.R == nil {
		o.R = &mergeR{
			DestinationVariationVersion: related,
		}
	} else {
		o.R.DestinationVariationVersion = related
	}

	if related.R == nil {
		related.R = &variationVersionR{
			DestinationVariationVersionMerges: MergeSlice{o},
		}
	} else {
		related.R.DestinationVariationVersionMerges = append(related.R.DestinationVariationVersionMerges, o)
	}

	return nil
}

// MergesG retrieves all records.
func MergesG(mods ...qm.QueryMod) mergeQuery {
	return Merges(boil.GetDB(), mods...)
}

// Merges retrieves all the records using an executor.
func Merges(exec boil.Executor, mods ...qm.QueryMod) mergeQuery {
	mods = append(mods, qm.From("`merges`"))
	return mergeQuery{NewQuery(exec, mods...)}
}

// FindMergeG retrieves a single record by ID.
func FindMergeG(id uint64, selectCols ...string) (*Merge, error) {
	return FindMerge(boil.GetDB(), id, selectCols...)
}

// FindMergeGP retrieves a single record by ID, and panics on error.
func FindMergeGP(id uint64, selectCols ...string) *Merge {
	retobj, err := FindMerge(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMerge retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMerge(exec boil.Executor, id uint64, selectCols ...string) (*Merge, error) {
	mergeObj := &Merge{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `merges` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(mergeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from merges")
	}

	return mergeObj, nil
}

// FindMergeP retrieves a single record by ID with an executor, and panics on error.
func FindMergeP(exec boil.Executor, id uint64, selectCols ...string) *Merge {
	retobj, err := FindMerge(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Merge) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Merge) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Merge) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Merge) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no merges provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mergeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	mergeInsertCacheMut.RLock()
	cache, cached := mergeInsertCache[key]
	mergeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			mergeColumns,
			mergeColumnsWithDefault,
			mergeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(mergeType, mergeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mergeType, mergeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `merges` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `merges` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `merges` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into merges")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mergeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for merges")
	}

CacheNoHooks:
	if !cached {
		mergeInsertCacheMut.Lock()
		mergeInsertCache[key] = cache
		mergeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Merge record. See Update for
// whitelist behavior description.
func (o *Merge) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Merge record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Merge) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Merge, and panics on error.
// See Update for whitelist behavior description.
func (o *Merge) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Merge.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Merge) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	mergeUpdateCacheMut.RLock()
	cache, cached := mergeUpdateCache[key]
	mergeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			mergeColumns,
			mergePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update merges, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `merges` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, mergePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mergeType, mergeMapping, append(wl, mergePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update merges row")
	}

	if !cached {
		mergeUpdateCacheMut.Lock()
		mergeUpdateCache[key] = cache
		mergeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q mergeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q mergeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for merges")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MergeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MergeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MergeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MergeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mergePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `merges` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mergePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in merge slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Merge) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Merge) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Merge) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Merge) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no merges provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mergeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mergeUpsertCacheMut.RLock()
	cache, cached := mergeUpsertCache[key]
	mergeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			mergeColumns,
			mergeColumnsWithDefault,
			mergeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			mergeColumns,
			mergePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert merges, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "merges", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `merges` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(mergeType, mergeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mergeType, mergeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for merges")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == mergeMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for merges")
	}

CacheNoHooks:
	if !cached {
		mergeUpsertCacheMut.Lock()
		mergeUpsertCache[key] = cache
		mergeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Merge record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Merge) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Merge record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Merge) DeleteG() error {
	if o == nil {
		return errors.New("models: no Merge provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Merge record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Merge) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Merge record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Merge) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Merge provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mergePrimaryKeyMapping)
	sql := "DELETE FROM `merges` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from merges")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q mergeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q mergeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no mergeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from merges")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MergeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MergeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Merge slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MergeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MergeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Merge slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(mergeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mergePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `merges` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mergePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from merge slice")
	}

	if len(mergeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Merge) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Merge) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Merge) ReloadG() error {
	if o == nil {
		return errors.New("models: no Merge provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Merge) Reload(exec boil.Executor) error {
	ret, err := FindMerge(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MergeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MergeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MergeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MergeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MergeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	merges := MergeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mergePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `merges`.* FROM `merges` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, mergePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&merges)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MergeSlice")
	}

	*o = merges

	return nil
}

// MergeExists checks if the Merge row exists.
func MergeExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `merges` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if merges exists")
	}

	return exists, nil
}

// MergeExistsG checks if the Merge row exists.
func MergeExistsG(id uint64) (bool, error) {
	return MergeExists(boil.GetDB(), id)
}

// MergeExistsGP checks if the Merge row exists. Panics on error.
func MergeExistsGP(id uint64) bool {
	e, err := MergeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MergeExistsP checks if the Merge row exists. Panics on error.
func MergeExistsP(exec boil.Executor, id uint64) bool {
	e, err := MergeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

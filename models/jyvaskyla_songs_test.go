// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testJyvaskylaSongs(t *testing.T) {
	t.Parallel()

	query := JyvaskylaSongs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testJyvaskylaSongsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = jyvaskylaSong.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJyvaskylaSongsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = JyvaskylaSongs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJyvaskylaSongsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JyvaskylaSongSlice{jyvaskylaSong}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testJyvaskylaSongsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := JyvaskylaSongExists(tx, jyvaskylaSong.ID)
	if err != nil {
		t.Errorf("Unable to check if JyvaskylaSong exists: %s", err)
	}
	if !e {
		t.Errorf("Expected JyvaskylaSongExistsG to return true, but got false.")
	}
}
func testJyvaskylaSongsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	jyvaskylaSongFound, err := FindJyvaskylaSong(tx, jyvaskylaSong.ID)
	if err != nil {
		t.Error(err)
	}

	if jyvaskylaSongFound == nil {
		t.Error("want a record, got nil")
	}
}
func testJyvaskylaSongsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = JyvaskylaSongs(tx).Bind(jyvaskylaSong); err != nil {
		t.Error(err)
	}
}

func testJyvaskylaSongsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := JyvaskylaSongs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testJyvaskylaSongsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSongOne := &JyvaskylaSong{}
	jyvaskylaSongTwo := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSongOne, jyvaskylaSongDBTypes, false, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}
	if err = randomize.Struct(seed, jyvaskylaSongTwo, jyvaskylaSongDBTypes, false, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSongOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jyvaskylaSongTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := JyvaskylaSongs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testJyvaskylaSongsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	jyvaskylaSongOne := &JyvaskylaSong{}
	jyvaskylaSongTwo := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSongOne, jyvaskylaSongDBTypes, false, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}
	if err = randomize.Struct(seed, jyvaskylaSongTwo, jyvaskylaSongDBTypes, false, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSongOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jyvaskylaSongTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func jyvaskylaSongBeforeInsertHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongAfterInsertHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongAfterSelectHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongBeforeUpdateHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongAfterUpdateHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongBeforeDeleteHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongAfterDeleteHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongBeforeUpsertHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func jyvaskylaSongAfterUpsertHook(e boil.Executor, o *JyvaskylaSong) error {
	*o = JyvaskylaSong{}
	return nil
}

func testJyvaskylaSongsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &JyvaskylaSong{}
	o := &JyvaskylaSong{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, jyvaskylaSongDBTypes, false); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong object: %s", err)
	}

	AddJyvaskylaSongHook(boil.BeforeInsertHook, jyvaskylaSongBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongBeforeInsertHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.AfterInsertHook, jyvaskylaSongAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongAfterInsertHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.AfterSelectHook, jyvaskylaSongAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongAfterSelectHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.BeforeUpdateHook, jyvaskylaSongBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongBeforeUpdateHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.AfterUpdateHook, jyvaskylaSongAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongAfterUpdateHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.BeforeDeleteHook, jyvaskylaSongBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongBeforeDeleteHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.AfterDeleteHook, jyvaskylaSongAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongAfterDeleteHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.BeforeUpsertHook, jyvaskylaSongBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongBeforeUpsertHooks = []JyvaskylaSongHook{}

	AddJyvaskylaSongHook(boil.AfterUpsertHook, jyvaskylaSongAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	jyvaskylaSongAfterUpsertHooks = []JyvaskylaSongHook{}
}
func testJyvaskylaSongsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJyvaskylaSongsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx, jyvaskylaSongColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJyvaskylaSongsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = jyvaskylaSong.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testJyvaskylaSongsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JyvaskylaSongSlice{jyvaskylaSong}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testJyvaskylaSongsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := JyvaskylaSongs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	jyvaskylaSongDBTypes = map[string]string{`AddedAt`: `bigint`, `AddedBy`: `varchar`, `AdditionalInfo`: `varchar`, `ArrangementBy`: `varchar`, `ComposedBy`: `varchar`, `Copyright`: `varchar`, `Deleted`: `tinyint`, `GlobalID`: `bigint`, `ID`: `bigint`, `LyricsBy`: `varchar`, `Modified`: `datetime`, `Name`: `varchar`, `OrigName`: `varchar`, `Song`: `text`, `SongbookID`: `bigint`, `TranslatedBy`: `varchar`, `Year`: `varchar`}
	_                    = bytes.MinRead
)

func testJyvaskylaSongsUpdate(t *testing.T) {
	t.Parallel()

	if len(jyvaskylaSongColumns) == len(jyvaskylaSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	if err = jyvaskylaSong.Update(tx); err != nil {
		t.Error(err)
	}
}

func testJyvaskylaSongsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(jyvaskylaSongColumns) == len(jyvaskylaSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	jyvaskylaSong := &JyvaskylaSong{}
	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, jyvaskylaSong, jyvaskylaSongDBTypes, true, jyvaskylaSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(jyvaskylaSongColumns, jyvaskylaSongPrimaryKeyColumns) {
		fields = jyvaskylaSongColumns
	} else {
		fields = strmangle.SetComplement(
			jyvaskylaSongColumns,
			jyvaskylaSongPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(jyvaskylaSong))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := JyvaskylaSongSlice{jyvaskylaSong}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testJyvaskylaSongsUpsert(t *testing.T) {
	t.Parallel()

	if len(jyvaskylaSongColumns) == len(jyvaskylaSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	jyvaskylaSong := JyvaskylaSong{}
	if err = randomize.Struct(seed, &jyvaskylaSong, jyvaskylaSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jyvaskylaSong.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert JyvaskylaSong: %s", err)
	}

	count, err := JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &jyvaskylaSong, jyvaskylaSongDBTypes, false, jyvaskylaSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize JyvaskylaSong struct: %s", err)
	}

	if err = jyvaskylaSong.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert JyvaskylaSong: %s", err)
	}

	count, err = JyvaskylaSongs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

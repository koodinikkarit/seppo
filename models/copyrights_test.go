// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testCopyrights(t *testing.T) {
	t.Parallel()

	query := Copyrights(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCopyrightsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = copyright.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCopyrightsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Copyrights(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCopyrightsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CopyrightSlice{copyright}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCopyrightsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CopyrightExists(tx, copyright.ID)
	if err != nil {
		t.Errorf("Unable to check if Copyright exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CopyrightExistsG to return true, but got false.")
	}
}
func testCopyrightsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	copyrightFound, err := FindCopyright(tx, copyright.ID)
	if err != nil {
		t.Error(err)
	}

	if copyrightFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCopyrightsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Copyrights(tx).Bind(copyright); err != nil {
		t.Error(err)
	}
}

func testCopyrightsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Copyrights(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCopyrightsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyrightOne := &Copyright{}
	copyrightTwo := &Copyright{}
	if err = randomize.Struct(seed, copyrightOne, copyrightDBTypes, false, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}
	if err = randomize.Struct(seed, copyrightTwo, copyrightDBTypes, false, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyrightOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = copyrightTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Copyrights(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCopyrightsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	copyrightOne := &Copyright{}
	copyrightTwo := &Copyright{}
	if err = randomize.Struct(seed, copyrightOne, copyrightDBTypes, false, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}
	if err = randomize.Struct(seed, copyrightTwo, copyrightDBTypes, false, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyrightOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = copyrightTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func copyrightBeforeInsertHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightAfterInsertHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightAfterSelectHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightBeforeUpdateHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightAfterUpdateHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightBeforeDeleteHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightAfterDeleteHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightBeforeUpsertHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func copyrightAfterUpsertHook(e boil.Executor, o *Copyright) error {
	*o = Copyright{}
	return nil
}

func testCopyrightsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Copyright{}
	o := &Copyright{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, copyrightDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Copyright object: %s", err)
	}

	AddCopyrightHook(boil.BeforeInsertHook, copyrightBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	copyrightBeforeInsertHooks = []CopyrightHook{}

	AddCopyrightHook(boil.AfterInsertHook, copyrightAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	copyrightAfterInsertHooks = []CopyrightHook{}

	AddCopyrightHook(boil.AfterSelectHook, copyrightAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	copyrightAfterSelectHooks = []CopyrightHook{}

	AddCopyrightHook(boil.BeforeUpdateHook, copyrightBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	copyrightBeforeUpdateHooks = []CopyrightHook{}

	AddCopyrightHook(boil.AfterUpdateHook, copyrightAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	copyrightAfterUpdateHooks = []CopyrightHook{}

	AddCopyrightHook(boil.BeforeDeleteHook, copyrightBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	copyrightBeforeDeleteHooks = []CopyrightHook{}

	AddCopyrightHook(boil.AfterDeleteHook, copyrightAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	copyrightAfterDeleteHooks = []CopyrightHook{}

	AddCopyrightHook(boil.BeforeUpsertHook, copyrightBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	copyrightBeforeUpsertHooks = []CopyrightHook{}

	AddCopyrightHook(boil.AfterUpsertHook, copyrightAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	copyrightAfterUpsertHooks = []CopyrightHook{}
}
func testCopyrightsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCopyrightsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx, copyrightColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCopyrightToManySRNewCopyrights(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Copyright
	var b, c SRNewCopyright

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, srNewCopyrightDBTypes, false, srNewCopyrightColumnsWithDefault...)
	randomize.Struct(seed, &c, srNewCopyrightDBTypes, false, srNewCopyrightColumnsWithDefault...)

	b.CopyrightID = a.ID
	c.CopyrightID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	srNewCopyright, err := a.SRNewCopyrights(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range srNewCopyright {
		if v.CopyrightID == b.CopyrightID {
			bFound = true
		}
		if v.CopyrightID == c.CopyrightID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CopyrightSlice{&a}
	if err = a.L.LoadSRNewCopyrights(tx, false, (*[]*Copyright)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRNewCopyrights); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SRNewCopyrights = nil
	if err = a.L.LoadSRNewCopyrights(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SRNewCopyrights); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", srNewCopyright)
	}
}

func testCopyrightToManyVariations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Copyright
	var b, c Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, variationDBTypes, false, variationColumnsWithDefault...)
	randomize.Struct(seed, &c, variationDBTypes, false, variationColumnsWithDefault...)

	b.CopyrightID.Valid = true
	c.CopyrightID.Valid = true
	b.CopyrightID.Uint64 = a.ID
	c.CopyrightID.Uint64 = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	variation, err := a.Variations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range variation {
		if v.CopyrightID.Uint64 == b.CopyrightID.Uint64 {
			bFound = true
		}
		if v.CopyrightID.Uint64 == c.CopyrightID.Uint64 {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CopyrightSlice{&a}
	if err = a.L.LoadVariations(tx, false, (*[]*Copyright)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Variations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Variations = nil
	if err = a.L.LoadVariations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Variations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", variation)
	}
}

func testCopyrightToManyAddOpSRNewCopyrights(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Copyright
	var b, c, d, e SRNewCopyright

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, copyrightDBTypes, false, strmangle.SetComplement(copyrightPrimaryKeyColumns, copyrightColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SRNewCopyright{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, srNewCopyrightDBTypes, false, strmangle.SetComplement(srNewCopyrightPrimaryKeyColumns, srNewCopyrightColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SRNewCopyright{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSRNewCopyrights(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CopyrightID {
			t.Error("foreign key was wrong value", a.ID, first.CopyrightID)
		}
		if a.ID != second.CopyrightID {
			t.Error("foreign key was wrong value", a.ID, second.CopyrightID)
		}

		if first.R.Copyright != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Copyright != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SRNewCopyrights[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SRNewCopyrights[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SRNewCopyrights(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCopyrightToManyAddOpVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Copyright
	var b, c, d, e Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, copyrightDBTypes, false, strmangle.SetComplement(copyrightPrimaryKeyColumns, copyrightColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Variation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Variation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CopyrightID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, first.CopyrightID.Uint64)
		}
		if a.ID != second.CopyrightID.Uint64 {
			t.Error("foreign key was wrong value", a.ID, second.CopyrightID.Uint64)
		}

		if first.R.Copyright != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Copyright != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Variations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Variations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Variations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCopyrightToManySetOpVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Copyright
	var b, c, d, e Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, copyrightDBTypes, false, strmangle.SetComplement(copyrightPrimaryKeyColumns, copyrightColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Variation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariations(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariations(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CopyrightID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CopyrightID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.CopyrightID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, d.CopyrightID.Uint64)
	}
	if a.ID != e.CopyrightID.Uint64 {
		t.Error("foreign key was wrong value", a.ID, e.CopyrightID.Uint64)
	}

	if b.R.Copyright != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Copyright != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Copyright != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Copyright != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Variations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Variations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCopyrightToManyRemoveOpVariations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Copyright
	var b, c, d, e Variation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, copyrightDBTypes, false, strmangle.SetComplement(copyrightPrimaryKeyColumns, copyrightColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Variation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variationDBTypes, false, strmangle.SetComplement(variationPrimaryKeyColumns, variationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariations(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariations(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Variations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.CopyrightID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.CopyrightID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Copyright != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Copyright != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Copyright != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Copyright != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Variations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Variations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Variations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCopyrightsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = copyright.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCopyrightsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CopyrightSlice{copyright}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCopyrightsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Copyrights(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	copyrightDBTypes = map[string]string{`CreatedAt`: `datetime`, `DeletedAt`: `datetime`, `ID`: `bigint`, `Name`: `varchar`, `UpdatedAt`: `datetime`}
	_                = bytes.MinRead
)

func testCopyrightsUpdate(t *testing.T) {
	t.Parallel()

	if len(copyrightColumns) == len(copyrightPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	if err = copyright.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCopyrightsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(copyrightColumns) == len(copyrightPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	copyright := &Copyright{}
	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, copyright, copyrightDBTypes, true, copyrightPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(copyrightColumns, copyrightPrimaryKeyColumns) {
		fields = copyrightColumns
	} else {
		fields = strmangle.SetComplement(
			copyrightColumns,
			copyrightPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(copyright))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CopyrightSlice{copyright}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCopyrightsUpsert(t *testing.T) {
	t.Parallel()

	if len(copyrightColumns) == len(copyrightPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	copyright := Copyright{}
	if err = randomize.Struct(seed, &copyright, copyrightDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = copyright.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Copyright: %s", err)
	}

	count, err := Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &copyright, copyrightDBTypes, false, copyrightPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Copyright struct: %s", err)
	}

	if err = copyright.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Copyright: %s", err)
	}

	count, err = Copyrights(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

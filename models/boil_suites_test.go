// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Authors", testAuthors)
	t.Run("Branches", testBranches)
	t.Run("Copyrights", testCopyrights)
	t.Run("EventSchedules", testEventSchedules)
	t.Run("Events", testEvents)
	t.Run("EwDatabaseLinks", testEwDatabaseLinks)
	t.Run("EwDatabases", testEwDatabases)
	t.Run("EwSongs", testEwSongs)
	t.Run("JyvaskylaSongs", testJyvaskylaSongs)
	t.Run("Languages", testLanguages)
	t.Run("Logs", testLogs)
	t.Run("MatiasClients", testMatiasClients)
	t.Run("Merges", testMerges)
	t.Run("ScheduleVariations", testScheduleVariations)
	t.Run("Schedules", testSchedules)
	t.Run("SongDatabaseTags", testSongDatabaseTags)
	t.Run("SongDatabaseVariations", testSongDatabaseVariations)
	t.Run("SongDatabases", testSongDatabases)
	t.Run("Songs", testSongs)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariations)
	t.Run("SREwConflicts", testSREwConflicts)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinks)
	t.Run("SREwSongs", testSREwSongs)
	t.Run("SRNewAuthors", testSRNewAuthors)
	t.Run("SRNewBranches", testSRNewBranches)
	t.Run("SRNewCopyrights", testSRNewCopyrights)
	t.Run("SRNewVariationVersions", testSRNewVariationVersions)
	t.Run("SRNewVariations", testSRNewVariations)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersions)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariations)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersions)
	t.Run("SynchronizationRaports", testSynchronizationRaports)
	t.Run("TagVariations", testTagVariations)
	t.Run("Tags", testTags)
	t.Run("VariationVersions", testVariationVersions)
	t.Run("Variations", testVariations)
}

func TestDelete(t *testing.T) {
	t.Run("Authors", testAuthorsDelete)
	t.Run("Branches", testBranchesDelete)
	t.Run("Copyrights", testCopyrightsDelete)
	t.Run("EventSchedules", testEventSchedulesDelete)
	t.Run("Events", testEventsDelete)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksDelete)
	t.Run("EwDatabases", testEwDatabasesDelete)
	t.Run("EwSongs", testEwSongsDelete)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsDelete)
	t.Run("Languages", testLanguagesDelete)
	t.Run("Logs", testLogsDelete)
	t.Run("MatiasClients", testMatiasClientsDelete)
	t.Run("Merges", testMergesDelete)
	t.Run("ScheduleVariations", testScheduleVariationsDelete)
	t.Run("Schedules", testSchedulesDelete)
	t.Run("SongDatabaseTags", testSongDatabaseTagsDelete)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsDelete)
	t.Run("SongDatabases", testSongDatabasesDelete)
	t.Run("Songs", testSongsDelete)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsDelete)
	t.Run("SREwConflicts", testSREwConflictsDelete)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksDelete)
	t.Run("SREwSongs", testSREwSongsDelete)
	t.Run("SRNewAuthors", testSRNewAuthorsDelete)
	t.Run("SRNewBranches", testSRNewBranchesDelete)
	t.Run("SRNewCopyrights", testSRNewCopyrightsDelete)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsDelete)
	t.Run("SRNewVariations", testSRNewVariationsDelete)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsDelete)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsDelete)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsDelete)
	t.Run("SynchronizationRaports", testSynchronizationRaportsDelete)
	t.Run("TagVariations", testTagVariationsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("VariationVersions", testVariationVersionsDelete)
	t.Run("Variations", testVariationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsQueryDeleteAll)
	t.Run("Branches", testBranchesQueryDeleteAll)
	t.Run("Copyrights", testCopyrightsQueryDeleteAll)
	t.Run("EventSchedules", testEventSchedulesQueryDeleteAll)
	t.Run("Events", testEventsQueryDeleteAll)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksQueryDeleteAll)
	t.Run("EwDatabases", testEwDatabasesQueryDeleteAll)
	t.Run("EwSongs", testEwSongsQueryDeleteAll)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsQueryDeleteAll)
	t.Run("Languages", testLanguagesQueryDeleteAll)
	t.Run("Logs", testLogsQueryDeleteAll)
	t.Run("MatiasClients", testMatiasClientsQueryDeleteAll)
	t.Run("Merges", testMergesQueryDeleteAll)
	t.Run("ScheduleVariations", testScheduleVariationsQueryDeleteAll)
	t.Run("Schedules", testSchedulesQueryDeleteAll)
	t.Run("SongDatabaseTags", testSongDatabaseTagsQueryDeleteAll)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsQueryDeleteAll)
	t.Run("SongDatabases", testSongDatabasesQueryDeleteAll)
	t.Run("Songs", testSongsQueryDeleteAll)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsQueryDeleteAll)
	t.Run("SREwConflicts", testSREwConflictsQueryDeleteAll)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksQueryDeleteAll)
	t.Run("SREwSongs", testSREwSongsQueryDeleteAll)
	t.Run("SRNewAuthors", testSRNewAuthorsQueryDeleteAll)
	t.Run("SRNewBranches", testSRNewBranchesQueryDeleteAll)
	t.Run("SRNewCopyrights", testSRNewCopyrightsQueryDeleteAll)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsQueryDeleteAll)
	t.Run("SRNewVariations", testSRNewVariationsQueryDeleteAll)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsQueryDeleteAll)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsQueryDeleteAll)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsQueryDeleteAll)
	t.Run("SynchronizationRaports", testSynchronizationRaportsQueryDeleteAll)
	t.Run("TagVariations", testTagVariationsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("VariationVersions", testVariationVersionsQueryDeleteAll)
	t.Run("Variations", testVariationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceDeleteAll)
	t.Run("Branches", testBranchesSliceDeleteAll)
	t.Run("Copyrights", testCopyrightsSliceDeleteAll)
	t.Run("EventSchedules", testEventSchedulesSliceDeleteAll)
	t.Run("Events", testEventsSliceDeleteAll)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksSliceDeleteAll)
	t.Run("EwDatabases", testEwDatabasesSliceDeleteAll)
	t.Run("EwSongs", testEwSongsSliceDeleteAll)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsSliceDeleteAll)
	t.Run("Languages", testLanguagesSliceDeleteAll)
	t.Run("Logs", testLogsSliceDeleteAll)
	t.Run("MatiasClients", testMatiasClientsSliceDeleteAll)
	t.Run("Merges", testMergesSliceDeleteAll)
	t.Run("ScheduleVariations", testScheduleVariationsSliceDeleteAll)
	t.Run("Schedules", testSchedulesSliceDeleteAll)
	t.Run("SongDatabaseTags", testSongDatabaseTagsSliceDeleteAll)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsSliceDeleteAll)
	t.Run("SongDatabases", testSongDatabasesSliceDeleteAll)
	t.Run("Songs", testSongsSliceDeleteAll)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsSliceDeleteAll)
	t.Run("SREwConflicts", testSREwConflictsSliceDeleteAll)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksSliceDeleteAll)
	t.Run("SREwSongs", testSREwSongsSliceDeleteAll)
	t.Run("SRNewAuthors", testSRNewAuthorsSliceDeleteAll)
	t.Run("SRNewBranches", testSRNewBranchesSliceDeleteAll)
	t.Run("SRNewCopyrights", testSRNewCopyrightsSliceDeleteAll)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsSliceDeleteAll)
	t.Run("SRNewVariations", testSRNewVariationsSliceDeleteAll)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsSliceDeleteAll)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsSliceDeleteAll)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsSliceDeleteAll)
	t.Run("SynchronizationRaports", testSynchronizationRaportsSliceDeleteAll)
	t.Run("TagVariations", testTagVariationsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("VariationVersions", testVariationVersionsSliceDeleteAll)
	t.Run("Variations", testVariationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Authors", testAuthorsExists)
	t.Run("Branches", testBranchesExists)
	t.Run("Copyrights", testCopyrightsExists)
	t.Run("EventSchedules", testEventSchedulesExists)
	t.Run("Events", testEventsExists)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksExists)
	t.Run("EwDatabases", testEwDatabasesExists)
	t.Run("EwSongs", testEwSongsExists)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsExists)
	t.Run("Languages", testLanguagesExists)
	t.Run("Logs", testLogsExists)
	t.Run("MatiasClients", testMatiasClientsExists)
	t.Run("Merges", testMergesExists)
	t.Run("ScheduleVariations", testScheduleVariationsExists)
	t.Run("Schedules", testSchedulesExists)
	t.Run("SongDatabaseTags", testSongDatabaseTagsExists)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsExists)
	t.Run("SongDatabases", testSongDatabasesExists)
	t.Run("Songs", testSongsExists)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsExists)
	t.Run("SREwConflicts", testSREwConflictsExists)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksExists)
	t.Run("SREwSongs", testSREwSongsExists)
	t.Run("SRNewAuthors", testSRNewAuthorsExists)
	t.Run("SRNewBranches", testSRNewBranchesExists)
	t.Run("SRNewCopyrights", testSRNewCopyrightsExists)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsExists)
	t.Run("SRNewVariations", testSRNewVariationsExists)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsExists)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsExists)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsExists)
	t.Run("SynchronizationRaports", testSynchronizationRaportsExists)
	t.Run("TagVariations", testTagVariationsExists)
	t.Run("Tags", testTagsExists)
	t.Run("VariationVersions", testVariationVersionsExists)
	t.Run("Variations", testVariationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Authors", testAuthorsFind)
	t.Run("Branches", testBranchesFind)
	t.Run("Copyrights", testCopyrightsFind)
	t.Run("EventSchedules", testEventSchedulesFind)
	t.Run("Events", testEventsFind)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksFind)
	t.Run("EwDatabases", testEwDatabasesFind)
	t.Run("EwSongs", testEwSongsFind)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsFind)
	t.Run("Languages", testLanguagesFind)
	t.Run("Logs", testLogsFind)
	t.Run("MatiasClients", testMatiasClientsFind)
	t.Run("Merges", testMergesFind)
	t.Run("ScheduleVariations", testScheduleVariationsFind)
	t.Run("Schedules", testSchedulesFind)
	t.Run("SongDatabaseTags", testSongDatabaseTagsFind)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsFind)
	t.Run("SongDatabases", testSongDatabasesFind)
	t.Run("Songs", testSongsFind)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsFind)
	t.Run("SREwConflicts", testSREwConflictsFind)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksFind)
	t.Run("SREwSongs", testSREwSongsFind)
	t.Run("SRNewAuthors", testSRNewAuthorsFind)
	t.Run("SRNewBranches", testSRNewBranchesFind)
	t.Run("SRNewCopyrights", testSRNewCopyrightsFind)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsFind)
	t.Run("SRNewVariations", testSRNewVariationsFind)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsFind)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsFind)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsFind)
	t.Run("SynchronizationRaports", testSynchronizationRaportsFind)
	t.Run("TagVariations", testTagVariationsFind)
	t.Run("Tags", testTagsFind)
	t.Run("VariationVersions", testVariationVersionsFind)
	t.Run("Variations", testVariationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Authors", testAuthorsBind)
	t.Run("Branches", testBranchesBind)
	t.Run("Copyrights", testCopyrightsBind)
	t.Run("EventSchedules", testEventSchedulesBind)
	t.Run("Events", testEventsBind)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksBind)
	t.Run("EwDatabases", testEwDatabasesBind)
	t.Run("EwSongs", testEwSongsBind)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsBind)
	t.Run("Languages", testLanguagesBind)
	t.Run("Logs", testLogsBind)
	t.Run("MatiasClients", testMatiasClientsBind)
	t.Run("Merges", testMergesBind)
	t.Run("ScheduleVariations", testScheduleVariationsBind)
	t.Run("Schedules", testSchedulesBind)
	t.Run("SongDatabaseTags", testSongDatabaseTagsBind)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsBind)
	t.Run("SongDatabases", testSongDatabasesBind)
	t.Run("Songs", testSongsBind)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsBind)
	t.Run("SREwConflicts", testSREwConflictsBind)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksBind)
	t.Run("SREwSongs", testSREwSongsBind)
	t.Run("SRNewAuthors", testSRNewAuthorsBind)
	t.Run("SRNewBranches", testSRNewBranchesBind)
	t.Run("SRNewCopyrights", testSRNewCopyrightsBind)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsBind)
	t.Run("SRNewVariations", testSRNewVariationsBind)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsBind)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsBind)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsBind)
	t.Run("SynchronizationRaports", testSynchronizationRaportsBind)
	t.Run("TagVariations", testTagVariationsBind)
	t.Run("Tags", testTagsBind)
	t.Run("VariationVersions", testVariationVersionsBind)
	t.Run("Variations", testVariationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Authors", testAuthorsOne)
	t.Run("Branches", testBranchesOne)
	t.Run("Copyrights", testCopyrightsOne)
	t.Run("EventSchedules", testEventSchedulesOne)
	t.Run("Events", testEventsOne)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksOne)
	t.Run("EwDatabases", testEwDatabasesOne)
	t.Run("EwSongs", testEwSongsOne)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsOne)
	t.Run("Languages", testLanguagesOne)
	t.Run("Logs", testLogsOne)
	t.Run("MatiasClients", testMatiasClientsOne)
	t.Run("Merges", testMergesOne)
	t.Run("ScheduleVariations", testScheduleVariationsOne)
	t.Run("Schedules", testSchedulesOne)
	t.Run("SongDatabaseTags", testSongDatabaseTagsOne)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsOne)
	t.Run("SongDatabases", testSongDatabasesOne)
	t.Run("Songs", testSongsOne)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsOne)
	t.Run("SREwConflicts", testSREwConflictsOne)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksOne)
	t.Run("SREwSongs", testSREwSongsOne)
	t.Run("SRNewAuthors", testSRNewAuthorsOne)
	t.Run("SRNewBranches", testSRNewBranchesOne)
	t.Run("SRNewCopyrights", testSRNewCopyrightsOne)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsOne)
	t.Run("SRNewVariations", testSRNewVariationsOne)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsOne)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsOne)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsOne)
	t.Run("SynchronizationRaports", testSynchronizationRaportsOne)
	t.Run("TagVariations", testTagVariationsOne)
	t.Run("Tags", testTagsOne)
	t.Run("VariationVersions", testVariationVersionsOne)
	t.Run("Variations", testVariationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Authors", testAuthorsAll)
	t.Run("Branches", testBranchesAll)
	t.Run("Copyrights", testCopyrightsAll)
	t.Run("EventSchedules", testEventSchedulesAll)
	t.Run("Events", testEventsAll)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksAll)
	t.Run("EwDatabases", testEwDatabasesAll)
	t.Run("EwSongs", testEwSongsAll)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsAll)
	t.Run("Languages", testLanguagesAll)
	t.Run("Logs", testLogsAll)
	t.Run("MatiasClients", testMatiasClientsAll)
	t.Run("Merges", testMergesAll)
	t.Run("ScheduleVariations", testScheduleVariationsAll)
	t.Run("Schedules", testSchedulesAll)
	t.Run("SongDatabaseTags", testSongDatabaseTagsAll)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsAll)
	t.Run("SongDatabases", testSongDatabasesAll)
	t.Run("Songs", testSongsAll)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsAll)
	t.Run("SREwConflicts", testSREwConflictsAll)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksAll)
	t.Run("SREwSongs", testSREwSongsAll)
	t.Run("SRNewAuthors", testSRNewAuthorsAll)
	t.Run("SRNewBranches", testSRNewBranchesAll)
	t.Run("SRNewCopyrights", testSRNewCopyrightsAll)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsAll)
	t.Run("SRNewVariations", testSRNewVariationsAll)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsAll)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsAll)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsAll)
	t.Run("SynchronizationRaports", testSynchronizationRaportsAll)
	t.Run("TagVariations", testTagVariationsAll)
	t.Run("Tags", testTagsAll)
	t.Run("VariationVersions", testVariationVersionsAll)
	t.Run("Variations", testVariationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Authors", testAuthorsCount)
	t.Run("Branches", testBranchesCount)
	t.Run("Copyrights", testCopyrightsCount)
	t.Run("EventSchedules", testEventSchedulesCount)
	t.Run("Events", testEventsCount)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksCount)
	t.Run("EwDatabases", testEwDatabasesCount)
	t.Run("EwSongs", testEwSongsCount)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsCount)
	t.Run("Languages", testLanguagesCount)
	t.Run("Logs", testLogsCount)
	t.Run("MatiasClients", testMatiasClientsCount)
	t.Run("Merges", testMergesCount)
	t.Run("ScheduleVariations", testScheduleVariationsCount)
	t.Run("Schedules", testSchedulesCount)
	t.Run("SongDatabaseTags", testSongDatabaseTagsCount)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsCount)
	t.Run("SongDatabases", testSongDatabasesCount)
	t.Run("Songs", testSongsCount)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsCount)
	t.Run("SREwConflicts", testSREwConflictsCount)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksCount)
	t.Run("SREwSongs", testSREwSongsCount)
	t.Run("SRNewAuthors", testSRNewAuthorsCount)
	t.Run("SRNewBranches", testSRNewBranchesCount)
	t.Run("SRNewCopyrights", testSRNewCopyrightsCount)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsCount)
	t.Run("SRNewVariations", testSRNewVariationsCount)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsCount)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsCount)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsCount)
	t.Run("SynchronizationRaports", testSynchronizationRaportsCount)
	t.Run("TagVariations", testTagVariationsCount)
	t.Run("Tags", testTagsCount)
	t.Run("VariationVersions", testVariationVersionsCount)
	t.Run("Variations", testVariationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Authors", testAuthorsHooks)
	t.Run("Branches", testBranchesHooks)
	t.Run("Copyrights", testCopyrightsHooks)
	t.Run("EventSchedules", testEventSchedulesHooks)
	t.Run("Events", testEventsHooks)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksHooks)
	t.Run("EwDatabases", testEwDatabasesHooks)
	t.Run("EwSongs", testEwSongsHooks)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsHooks)
	t.Run("Languages", testLanguagesHooks)
	t.Run("Logs", testLogsHooks)
	t.Run("MatiasClients", testMatiasClientsHooks)
	t.Run("Merges", testMergesHooks)
	t.Run("ScheduleVariations", testScheduleVariationsHooks)
	t.Run("Schedules", testSchedulesHooks)
	t.Run("SongDatabaseTags", testSongDatabaseTagsHooks)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsHooks)
	t.Run("SongDatabases", testSongDatabasesHooks)
	t.Run("Songs", testSongsHooks)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsHooks)
	t.Run("SREwConflicts", testSREwConflictsHooks)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksHooks)
	t.Run("SREwSongs", testSREwSongsHooks)
	t.Run("SRNewAuthors", testSRNewAuthorsHooks)
	t.Run("SRNewBranches", testSRNewBranchesHooks)
	t.Run("SRNewCopyrights", testSRNewCopyrightsHooks)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsHooks)
	t.Run("SRNewVariations", testSRNewVariationsHooks)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsHooks)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsHooks)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsHooks)
	t.Run("SynchronizationRaports", testSynchronizationRaportsHooks)
	t.Run("TagVariations", testTagVariationsHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("VariationVersions", testVariationVersionsHooks)
	t.Run("Variations", testVariationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Authors", testAuthorsInsert)
	t.Run("Authors", testAuthorsInsertWhitelist)
	t.Run("Branches", testBranchesInsert)
	t.Run("Branches", testBranchesInsertWhitelist)
	t.Run("Copyrights", testCopyrightsInsert)
	t.Run("Copyrights", testCopyrightsInsertWhitelist)
	t.Run("EventSchedules", testEventSchedulesInsert)
	t.Run("EventSchedules", testEventSchedulesInsertWhitelist)
	t.Run("Events", testEventsInsert)
	t.Run("Events", testEventsInsertWhitelist)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksInsert)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksInsertWhitelist)
	t.Run("EwDatabases", testEwDatabasesInsert)
	t.Run("EwDatabases", testEwDatabasesInsertWhitelist)
	t.Run("EwSongs", testEwSongsInsert)
	t.Run("EwSongs", testEwSongsInsertWhitelist)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsInsert)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsInsertWhitelist)
	t.Run("Languages", testLanguagesInsert)
	t.Run("Languages", testLanguagesInsertWhitelist)
	t.Run("Logs", testLogsInsert)
	t.Run("Logs", testLogsInsertWhitelist)
	t.Run("MatiasClients", testMatiasClientsInsert)
	t.Run("MatiasClients", testMatiasClientsInsertWhitelist)
	t.Run("Merges", testMergesInsert)
	t.Run("Merges", testMergesInsertWhitelist)
	t.Run("ScheduleVariations", testScheduleVariationsInsert)
	t.Run("ScheduleVariations", testScheduleVariationsInsertWhitelist)
	t.Run("Schedules", testSchedulesInsert)
	t.Run("Schedules", testSchedulesInsertWhitelist)
	t.Run("SongDatabaseTags", testSongDatabaseTagsInsert)
	t.Run("SongDatabaseTags", testSongDatabaseTagsInsertWhitelist)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsInsert)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsInsertWhitelist)
	t.Run("SongDatabases", testSongDatabasesInsert)
	t.Run("SongDatabases", testSongDatabasesInsertWhitelist)
	t.Run("Songs", testSongsInsert)
	t.Run("Songs", testSongsInsertWhitelist)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsInsert)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsInsertWhitelist)
	t.Run("SREwConflicts", testSREwConflictsInsert)
	t.Run("SREwConflicts", testSREwConflictsInsertWhitelist)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksInsert)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksInsertWhitelist)
	t.Run("SREwSongs", testSREwSongsInsert)
	t.Run("SREwSongs", testSREwSongsInsertWhitelist)
	t.Run("SRNewAuthors", testSRNewAuthorsInsert)
	t.Run("SRNewAuthors", testSRNewAuthorsInsertWhitelist)
	t.Run("SRNewBranches", testSRNewBranchesInsert)
	t.Run("SRNewBranches", testSRNewBranchesInsertWhitelist)
	t.Run("SRNewCopyrights", testSRNewCopyrightsInsert)
	t.Run("SRNewCopyrights", testSRNewCopyrightsInsertWhitelist)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsInsert)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsInsertWhitelist)
	t.Run("SRNewVariations", testSRNewVariationsInsert)
	t.Run("SRNewVariations", testSRNewVariationsInsertWhitelist)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsInsert)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsInsertWhitelist)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsInsert)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsInsertWhitelist)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsInsert)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsInsertWhitelist)
	t.Run("SynchronizationRaports", testSynchronizationRaportsInsert)
	t.Run("SynchronizationRaports", testSynchronizationRaportsInsertWhitelist)
	t.Run("TagVariations", testTagVariationsInsert)
	t.Run("TagVariations", testTagVariationsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("VariationVersions", testVariationVersionsInsert)
	t.Run("VariationVersions", testVariationVersionsInsertWhitelist)
	t.Run("Variations", testVariationsInsert)
	t.Run("Variations", testVariationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BranchToVariationVersionUsingSourceVariationVersion", testBranchToOneVariationVersionUsingSourceVariationVersion)
	t.Run("BranchToVariationVersionUsingDestinationVariationVersion", testBranchToOneVariationVersionUsingDestinationVariationVersion)
	t.Run("EventScheduleToScheduleUsingSchedule", testEventScheduleToOneScheduleUsingSchedule)
	t.Run("EventScheduleToEventUsingEvent", testEventScheduleToOneEventUsingEvent)
	t.Run("EwDatabaseLinkToEwDatabaseUsingEwDatabase", testEwDatabaseLinkToOneEwDatabaseUsingEwDatabase)
	t.Run("EwDatabaseLinkToVariationUsingVariation", testEwDatabaseLinkToOneVariationUsingVariation)
	t.Run("EwDatabaseToSongDatabaseUsingSongDatabase", testEwDatabaseToOneSongDatabaseUsingSongDatabase)
	t.Run("EwDatabaseToMatiasClientUsingMatiasClient", testEwDatabaseToOneMatiasClientUsingMatiasClient)
	t.Run("MergeToVariationVersionUsingVariationVersion1", testMergeToOneVariationVersionUsingVariationVersion1)
	t.Run("MergeToVariationVersionUsingVariationVersion2", testMergeToOneVariationVersionUsingVariationVersion2)
	t.Run("MergeToVariationVersionUsingDestinationVariationVersion", testMergeToOneVariationVersionUsingDestinationVariationVersion)
	t.Run("ScheduleVariationToScheduleUsingSchedule", testScheduleVariationToOneScheduleUsingSchedule)
	t.Run("ScheduleVariationToVariationUsingVariation", testScheduleVariationToOneVariationUsingVariation)
	t.Run("SongDatabaseTagToTagUsingTag", testSongDatabaseTagToOneTagUsingTag)
	t.Run("SongDatabaseTagToSongDatabaseUsingSongDatabase", testSongDatabaseTagToOneSongDatabaseUsingSongDatabase)
	t.Run("SongDatabaseVariationToSongDatabaseUsingSongDatabase", testSongDatabaseVariationToOneSongDatabaseUsingSongDatabase)
	t.Run("SongDatabaseVariationToVariationUsingVariation", testSongDatabaseVariationToOneVariationUsingVariation)
	t.Run("SRAddSongDatabaseVariationToSynchronizationRaportUsingSR", testSRAddSongDatabaseVariationToOneSynchronizationRaportUsingSR)
	t.Run("SRAddSongDatabaseVariationToVariationUsingVariation", testSRAddSongDatabaseVariationToOneVariationUsingVariation)
	t.Run("SRAddSongDatabaseVariationToSongDatabaseUsingSongDatabase", testSRAddSongDatabaseVariationToOneSongDatabaseUsingSongDatabase)
	t.Run("SREwConflictToSynchronizationRaportUsingSR", testSREwConflictToOneSynchronizationRaportUsingSR)
	t.Run("SREwConflictToVariationVersionUsingVariationVersion", testSREwConflictToOneVariationVersionUsingVariationVersion)
	t.Run("SREwConflictToEwDatabaseUsingEwDatabase", testSREwConflictToOneEwDatabaseUsingEwDatabase)
	t.Run("SREwDatabaseLinkToSynchronizationRaportUsingSR", testSREwDatabaseLinkToOneSynchronizationRaportUsingSR)
	t.Run("SREwDatabaseLinkToEwDatabaseUsingEwDatabase", testSREwDatabaseLinkToOneEwDatabaseUsingEwDatabase)
	t.Run("SREwDatabaseLinkToVariationUsingVariation", testSREwDatabaseLinkToOneVariationUsingVariation)
	t.Run("SREwSongToSynchronizationRaportUsingSR", testSREwSongToOneSynchronizationRaportUsingSR)
	t.Run("SREwSongToVariationVersionUsingVariationVersion", testSREwSongToOneVariationVersionUsingVariationVersion)
	t.Run("SRNewAuthorToSynchronizationRaportUsingSR", testSRNewAuthorToOneSynchronizationRaportUsingSR)
	t.Run("SRNewAuthorToAuthorUsingAuthor", testSRNewAuthorToOneAuthorUsingAuthor)
	t.Run("SRNewBranchToSynchronizationRaportUsingSR", testSRNewBranchToOneSynchronizationRaportUsingSR)
	t.Run("SRNewBranchToBranchUsingBranch", testSRNewBranchToOneBranchUsingBranch)
	t.Run("SRNewCopyrightToSynchronizationRaportUsingSR", testSRNewCopyrightToOneSynchronizationRaportUsingSR)
	t.Run("SRNewCopyrightToCopyrightUsingCopyright", testSRNewCopyrightToOneCopyrightUsingCopyright)
	t.Run("SRNewVariationVersionToSynchronizationRaportUsingSR", testSRNewVariationVersionToOneSynchronizationRaportUsingSR)
	t.Run("SRNewVariationVersionToVariationVersionUsingVariationVersion", testSRNewVariationVersionToOneVariationVersionUsingVariationVersion)
	t.Run("SRNewVariationToSynchronizationRaportUsingSR", testSRNewVariationToOneSynchronizationRaportUsingSR)
	t.Run("SRNewVariationToVariationUsingVariation", testSRNewVariationToOneVariationUsingVariation)
	t.Run("SRPassivatedVariationVersionToSynchronizationRaportUsingSR", testSRPassivatedVariationVersionToOneSynchronizationRaportUsingSR)
	t.Run("SRPassivatedVariationVersionToVariationVersionUsingVariationVersion", testSRPassivatedVariationVersionToOneVariationVersionUsingVariationVersion)
	t.Run("SRRemoveSongDatabaseVariationToSynchronizationRaportUsingSR", testSRRemoveSongDatabaseVariationToOneSynchronizationRaportUsingSR)
	t.Run("SRRemoveSongDatabaseVariationToVariationUsingVariation", testSRRemoveSongDatabaseVariationToOneVariationUsingVariation)
	t.Run("SRRemoveSongDatabaseVariationToSongDatabaseUsingSongDatabase", testSRRemoveSongDatabaseVariationToOneSongDatabaseUsingSongDatabase)
	t.Run("SRUpdatedEwDatabaseLinkVersionToSynchronizationRaportUsingSR", testSRUpdatedEwDatabaseLinkVersionToOneSynchronizationRaportUsingSR)
	t.Run("SRUpdatedEwDatabaseLinkVersionToVariationUsingVariation", testSRUpdatedEwDatabaseLinkVersionToOneVariationUsingVariation)
	t.Run("TagVariationToTagUsingTag", testTagVariationToOneTagUsingTag)
	t.Run("TagVariationToVariationUsingVariation", testTagVariationToOneVariationUsingVariation)
	t.Run("VariationVersionToVariationUsingVariation", testVariationVersionToOneVariationUsingVariation)
	t.Run("VariationToSongUsingSong", testVariationToOneSongUsingSong)
	t.Run("VariationToLanguageUsingLanguage", testVariationToOneLanguageUsingLanguage)
	t.Run("VariationToAuthorUsingAuthor", testVariationToOneAuthorUsingAuthor)
	t.Run("VariationToCopyrightUsingCopyright", testVariationToOneCopyrightUsingCopyright)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthorToSRNewAuthors", testAuthorToManySRNewAuthors)
	t.Run("AuthorToVariations", testAuthorToManyVariations)
	t.Run("BranchToSRNewBranches", testBranchToManySRNewBranches)
	t.Run("CopyrightToSRNewCopyrights", testCopyrightToManySRNewCopyrights)
	t.Run("CopyrightToVariations", testCopyrightToManyVariations)
	t.Run("EventToEventSchedules", testEventToManyEventSchedules)
	t.Run("EwDatabaseToEwDatabaseLinks", testEwDatabaseToManyEwDatabaseLinks)
	t.Run("EwDatabaseToSREwConflicts", testEwDatabaseToManySREwConflicts)
	t.Run("EwDatabaseToSREwDatabaseLinks", testEwDatabaseToManySREwDatabaseLinks)
	t.Run("LanguageToVariations", testLanguageToManyVariations)
	t.Run("MatiasClientToEwDatabases", testMatiasClientToManyEwDatabases)
	t.Run("ScheduleToEventSchedules", testScheduleToManyEventSchedules)
	t.Run("ScheduleToScheduleVariations", testScheduleToManyScheduleVariations)
	t.Run("SongDatabaseToEwDatabases", testSongDatabaseToManyEwDatabases)
	t.Run("SongDatabaseToSongDatabaseTags", testSongDatabaseToManySongDatabaseTags)
	t.Run("SongDatabaseToSongDatabaseVariations", testSongDatabaseToManySongDatabaseVariations)
	t.Run("SongDatabaseToSRAddSongDatabaseVariations", testSongDatabaseToManySRAddSongDatabaseVariations)
	t.Run("SongDatabaseToSRRemoveSongDatabaseVariations", testSongDatabaseToManySRRemoveSongDatabaseVariations)
	t.Run("SongToVariations", testSongToManyVariations)
	t.Run("SynchronizationRaportToSRSRAddSongDatabaseVariations", testSynchronizationRaportToManySRSRAddSongDatabaseVariations)
	t.Run("SynchronizationRaportToSRSREwConflicts", testSynchronizationRaportToManySRSREwConflicts)
	t.Run("SynchronizationRaportToSRSREwDatabaseLinks", testSynchronizationRaportToManySRSREwDatabaseLinks)
	t.Run("SynchronizationRaportToSRSREwSongs", testSynchronizationRaportToManySRSREwSongs)
	t.Run("SynchronizationRaportToSRSRNewAuthors", testSynchronizationRaportToManySRSRNewAuthors)
	t.Run("SynchronizationRaportToSRSRNewBranches", testSynchronizationRaportToManySRSRNewBranches)
	t.Run("SynchronizationRaportToSRSRNewCopyrights", testSynchronizationRaportToManySRSRNewCopyrights)
	t.Run("SynchronizationRaportToSRSRNewVariationVersions", testSynchronizationRaportToManySRSRNewVariationVersions)
	t.Run("SynchronizationRaportToSRSRNewVariations", testSynchronizationRaportToManySRSRNewVariations)
	t.Run("SynchronizationRaportToSRSRPassivatedVariationVersions", testSynchronizationRaportToManySRSRPassivatedVariationVersions)
	t.Run("SynchronizationRaportToSRSRRemoveSongDatabaseVariations", testSynchronizationRaportToManySRSRRemoveSongDatabaseVariations)
	t.Run("SynchronizationRaportToSRSRUpdatedEwDatabaseLinkVersions", testSynchronizationRaportToManySRSRUpdatedEwDatabaseLinkVersions)
	t.Run("TagToSongDatabaseTags", testTagToManySongDatabaseTags)
	t.Run("TagToTagVariations", testTagToManyTagVariations)
	t.Run("VariationVersionToSourceVariationVersionBranches", testVariationVersionToManySourceVariationVersionBranches)
	t.Run("VariationVersionToDestinationVariationVersionBranches", testVariationVersionToManyDestinationVariationVersionBranches)
	t.Run("VariationVersionToVariationVersion1Merges", testVariationVersionToManyVariationVersion1Merges)
	t.Run("VariationVersionToVariationVersion2Merges", testVariationVersionToManyVariationVersion2Merges)
	t.Run("VariationVersionToDestinationVariationVersionMerges", testVariationVersionToManyDestinationVariationVersionMerges)
	t.Run("VariationVersionToSREwConflicts", testVariationVersionToManySREwConflicts)
	t.Run("VariationVersionToSREwSongs", testVariationVersionToManySREwSongs)
	t.Run("VariationVersionToSRNewVariationVersions", testVariationVersionToManySRNewVariationVersions)
	t.Run("VariationVersionToSRPassivatedVariationVersions", testVariationVersionToManySRPassivatedVariationVersions)
	t.Run("VariationToEwDatabaseLinks", testVariationToManyEwDatabaseLinks)
	t.Run("VariationToScheduleVariations", testVariationToManyScheduleVariations)
	t.Run("VariationToSongDatabaseVariations", testVariationToManySongDatabaseVariations)
	t.Run("VariationToSRAddSongDatabaseVariations", testVariationToManySRAddSongDatabaseVariations)
	t.Run("VariationToSREwDatabaseLinks", testVariationToManySREwDatabaseLinks)
	t.Run("VariationToSRNewVariations", testVariationToManySRNewVariations)
	t.Run("VariationToSRRemoveSongDatabaseVariations", testVariationToManySRRemoveSongDatabaseVariations)
	t.Run("VariationToSRUpdatedEwDatabaseLinkVersions", testVariationToManySRUpdatedEwDatabaseLinkVersions)
	t.Run("VariationToTagVariations", testVariationToManyTagVariations)
	t.Run("VariationToVariationVersions", testVariationToManyVariationVersions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BranchToVariationVersionUsingSourceVariationVersion", testBranchToOneSetOpVariationVersionUsingSourceVariationVersion)
	t.Run("BranchToVariationVersionUsingDestinationVariationVersion", testBranchToOneSetOpVariationVersionUsingDestinationVariationVersion)
	t.Run("EventScheduleToScheduleUsingSchedule", testEventScheduleToOneSetOpScheduleUsingSchedule)
	t.Run("EventScheduleToEventUsingEvent", testEventScheduleToOneSetOpEventUsingEvent)
	t.Run("EwDatabaseLinkToEwDatabaseUsingEwDatabase", testEwDatabaseLinkToOneSetOpEwDatabaseUsingEwDatabase)
	t.Run("EwDatabaseLinkToVariationUsingVariation", testEwDatabaseLinkToOneSetOpVariationUsingVariation)
	t.Run("EwDatabaseToSongDatabaseUsingSongDatabase", testEwDatabaseToOneSetOpSongDatabaseUsingSongDatabase)
	t.Run("EwDatabaseToMatiasClientUsingMatiasClient", testEwDatabaseToOneSetOpMatiasClientUsingMatiasClient)
	t.Run("MergeToVariationVersionUsingVariationVersion1", testMergeToOneSetOpVariationVersionUsingVariationVersion1)
	t.Run("MergeToVariationVersionUsingVariationVersion2", testMergeToOneSetOpVariationVersionUsingVariationVersion2)
	t.Run("MergeToVariationVersionUsingDestinationVariationVersion", testMergeToOneSetOpVariationVersionUsingDestinationVariationVersion)
	t.Run("ScheduleVariationToScheduleUsingSchedule", testScheduleVariationToOneSetOpScheduleUsingSchedule)
	t.Run("ScheduleVariationToVariationUsingVariation", testScheduleVariationToOneSetOpVariationUsingVariation)
	t.Run("SongDatabaseTagToTagUsingTag", testSongDatabaseTagToOneSetOpTagUsingTag)
	t.Run("SongDatabaseTagToSongDatabaseUsingSongDatabase", testSongDatabaseTagToOneSetOpSongDatabaseUsingSongDatabase)
	t.Run("SongDatabaseVariationToSongDatabaseUsingSongDatabase", testSongDatabaseVariationToOneSetOpSongDatabaseUsingSongDatabase)
	t.Run("SongDatabaseVariationToVariationUsingVariation", testSongDatabaseVariationToOneSetOpVariationUsingVariation)
	t.Run("SRAddSongDatabaseVariationToSynchronizationRaportUsingSR", testSRAddSongDatabaseVariationToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRAddSongDatabaseVariationToVariationUsingVariation", testSRAddSongDatabaseVariationToOneSetOpVariationUsingVariation)
	t.Run("SRAddSongDatabaseVariationToSongDatabaseUsingSongDatabase", testSRAddSongDatabaseVariationToOneSetOpSongDatabaseUsingSongDatabase)
	t.Run("SREwConflictToSynchronizationRaportUsingSR", testSREwConflictToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SREwConflictToVariationVersionUsingVariationVersion", testSREwConflictToOneSetOpVariationVersionUsingVariationVersion)
	t.Run("SREwConflictToEwDatabaseUsingEwDatabase", testSREwConflictToOneSetOpEwDatabaseUsingEwDatabase)
	t.Run("SREwDatabaseLinkToSynchronizationRaportUsingSR", testSREwDatabaseLinkToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SREwDatabaseLinkToEwDatabaseUsingEwDatabase", testSREwDatabaseLinkToOneSetOpEwDatabaseUsingEwDatabase)
	t.Run("SREwDatabaseLinkToVariationUsingVariation", testSREwDatabaseLinkToOneSetOpVariationUsingVariation)
	t.Run("SREwSongToSynchronizationRaportUsingSR", testSREwSongToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SREwSongToVariationVersionUsingVariationVersion", testSREwSongToOneSetOpVariationVersionUsingVariationVersion)
	t.Run("SRNewAuthorToSynchronizationRaportUsingSR", testSRNewAuthorToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRNewAuthorToAuthorUsingAuthor", testSRNewAuthorToOneSetOpAuthorUsingAuthor)
	t.Run("SRNewBranchToSynchronizationRaportUsingSR", testSRNewBranchToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRNewBranchToBranchUsingBranch", testSRNewBranchToOneSetOpBranchUsingBranch)
	t.Run("SRNewCopyrightToSynchronizationRaportUsingSR", testSRNewCopyrightToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRNewCopyrightToCopyrightUsingCopyright", testSRNewCopyrightToOneSetOpCopyrightUsingCopyright)
	t.Run("SRNewVariationVersionToSynchronizationRaportUsingSR", testSRNewVariationVersionToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRNewVariationVersionToVariationVersionUsingVariationVersion", testSRNewVariationVersionToOneSetOpVariationVersionUsingVariationVersion)
	t.Run("SRNewVariationToSynchronizationRaportUsingSR", testSRNewVariationToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRNewVariationToVariationUsingVariation", testSRNewVariationToOneSetOpVariationUsingVariation)
	t.Run("SRPassivatedVariationVersionToSynchronizationRaportUsingSR", testSRPassivatedVariationVersionToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRPassivatedVariationVersionToVariationVersionUsingVariationVersion", testSRPassivatedVariationVersionToOneSetOpVariationVersionUsingVariationVersion)
	t.Run("SRRemoveSongDatabaseVariationToSynchronizationRaportUsingSR", testSRRemoveSongDatabaseVariationToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRRemoveSongDatabaseVariationToVariationUsingVariation", testSRRemoveSongDatabaseVariationToOneSetOpVariationUsingVariation)
	t.Run("SRRemoveSongDatabaseVariationToSongDatabaseUsingSongDatabase", testSRRemoveSongDatabaseVariationToOneSetOpSongDatabaseUsingSongDatabase)
	t.Run("SRUpdatedEwDatabaseLinkVersionToSynchronizationRaportUsingSR", testSRUpdatedEwDatabaseLinkVersionToOneSetOpSynchronizationRaportUsingSR)
	t.Run("SRUpdatedEwDatabaseLinkVersionToVariationUsingVariation", testSRUpdatedEwDatabaseLinkVersionToOneSetOpVariationUsingVariation)
	t.Run("TagVariationToTagUsingTag", testTagVariationToOneSetOpTagUsingTag)
	t.Run("TagVariationToVariationUsingVariation", testTagVariationToOneSetOpVariationUsingVariation)
	t.Run("VariationVersionToVariationUsingVariation", testVariationVersionToOneSetOpVariationUsingVariation)
	t.Run("VariationToSongUsingSong", testVariationToOneSetOpSongUsingSong)
	t.Run("VariationToLanguageUsingLanguage", testVariationToOneSetOpLanguageUsingLanguage)
	t.Run("VariationToAuthorUsingAuthor", testVariationToOneSetOpAuthorUsingAuthor)
	t.Run("VariationToCopyrightUsingCopyright", testVariationToOneSetOpCopyrightUsingCopyright)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("EwDatabaseToMatiasClientUsingMatiasClient", testEwDatabaseToOneRemoveOpMatiasClientUsingMatiasClient)
	t.Run("VariationToSongUsingSong", testVariationToOneRemoveOpSongUsingSong)
	t.Run("VariationToLanguageUsingLanguage", testVariationToOneRemoveOpLanguageUsingLanguage)
	t.Run("VariationToAuthorUsingAuthor", testVariationToOneRemoveOpAuthorUsingAuthor)
	t.Run("VariationToCopyrightUsingCopyright", testVariationToOneRemoveOpCopyrightUsingCopyright)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthorToSRNewAuthors", testAuthorToManyAddOpSRNewAuthors)
	t.Run("AuthorToVariations", testAuthorToManyAddOpVariations)
	t.Run("BranchToSRNewBranches", testBranchToManyAddOpSRNewBranches)
	t.Run("CopyrightToSRNewCopyrights", testCopyrightToManyAddOpSRNewCopyrights)
	t.Run("CopyrightToVariations", testCopyrightToManyAddOpVariations)
	t.Run("EventToEventSchedules", testEventToManyAddOpEventSchedules)
	t.Run("EwDatabaseToEwDatabaseLinks", testEwDatabaseToManyAddOpEwDatabaseLinks)
	t.Run("EwDatabaseToSREwConflicts", testEwDatabaseToManyAddOpSREwConflicts)
	t.Run("EwDatabaseToSREwDatabaseLinks", testEwDatabaseToManyAddOpSREwDatabaseLinks)
	t.Run("LanguageToVariations", testLanguageToManyAddOpVariations)
	t.Run("MatiasClientToEwDatabases", testMatiasClientToManyAddOpEwDatabases)
	t.Run("ScheduleToEventSchedules", testScheduleToManyAddOpEventSchedules)
	t.Run("ScheduleToScheduleVariations", testScheduleToManyAddOpScheduleVariations)
	t.Run("SongDatabaseToEwDatabases", testSongDatabaseToManyAddOpEwDatabases)
	t.Run("SongDatabaseToSongDatabaseTags", testSongDatabaseToManyAddOpSongDatabaseTags)
	t.Run("SongDatabaseToSongDatabaseVariations", testSongDatabaseToManyAddOpSongDatabaseVariations)
	t.Run("SongDatabaseToSRAddSongDatabaseVariations", testSongDatabaseToManyAddOpSRAddSongDatabaseVariations)
	t.Run("SongDatabaseToSRRemoveSongDatabaseVariations", testSongDatabaseToManyAddOpSRRemoveSongDatabaseVariations)
	t.Run("SongToVariations", testSongToManyAddOpVariations)
	t.Run("SynchronizationRaportToSRSRAddSongDatabaseVariations", testSynchronizationRaportToManyAddOpSRSRAddSongDatabaseVariations)
	t.Run("SynchronizationRaportToSRSREwConflicts", testSynchronizationRaportToManyAddOpSRSREwConflicts)
	t.Run("SynchronizationRaportToSRSREwDatabaseLinks", testSynchronizationRaportToManyAddOpSRSREwDatabaseLinks)
	t.Run("SynchronizationRaportToSRSREwSongs", testSynchronizationRaportToManyAddOpSRSREwSongs)
	t.Run("SynchronizationRaportToSRSRNewAuthors", testSynchronizationRaportToManyAddOpSRSRNewAuthors)
	t.Run("SynchronizationRaportToSRSRNewBranches", testSynchronizationRaportToManyAddOpSRSRNewBranches)
	t.Run("SynchronizationRaportToSRSRNewCopyrights", testSynchronizationRaportToManyAddOpSRSRNewCopyrights)
	t.Run("SynchronizationRaportToSRSRNewVariationVersions", testSynchronizationRaportToManyAddOpSRSRNewVariationVersions)
	t.Run("SynchronizationRaportToSRSRNewVariations", testSynchronizationRaportToManyAddOpSRSRNewVariations)
	t.Run("SynchronizationRaportToSRSRPassivatedVariationVersions", testSynchronizationRaportToManyAddOpSRSRPassivatedVariationVersions)
	t.Run("SynchronizationRaportToSRSRRemoveSongDatabaseVariations", testSynchronizationRaportToManyAddOpSRSRRemoveSongDatabaseVariations)
	t.Run("SynchronizationRaportToSRSRUpdatedEwDatabaseLinkVersions", testSynchronizationRaportToManyAddOpSRSRUpdatedEwDatabaseLinkVersions)
	t.Run("TagToSongDatabaseTags", testTagToManyAddOpSongDatabaseTags)
	t.Run("TagToTagVariations", testTagToManyAddOpTagVariations)
	t.Run("VariationVersionToSourceVariationVersionBranches", testVariationVersionToManyAddOpSourceVariationVersionBranches)
	t.Run("VariationVersionToDestinationVariationVersionBranches", testVariationVersionToManyAddOpDestinationVariationVersionBranches)
	t.Run("VariationVersionToVariationVersion1Merges", testVariationVersionToManyAddOpVariationVersion1Merges)
	t.Run("VariationVersionToVariationVersion2Merges", testVariationVersionToManyAddOpVariationVersion2Merges)
	t.Run("VariationVersionToDestinationVariationVersionMerges", testVariationVersionToManyAddOpDestinationVariationVersionMerges)
	t.Run("VariationVersionToSREwConflicts", testVariationVersionToManyAddOpSREwConflicts)
	t.Run("VariationVersionToSREwSongs", testVariationVersionToManyAddOpSREwSongs)
	t.Run("VariationVersionToSRNewVariationVersions", testVariationVersionToManyAddOpSRNewVariationVersions)
	t.Run("VariationVersionToSRPassivatedVariationVersions", testVariationVersionToManyAddOpSRPassivatedVariationVersions)
	t.Run("VariationToEwDatabaseLinks", testVariationToManyAddOpEwDatabaseLinks)
	t.Run("VariationToScheduleVariations", testVariationToManyAddOpScheduleVariations)
	t.Run("VariationToSongDatabaseVariations", testVariationToManyAddOpSongDatabaseVariations)
	t.Run("VariationToSRAddSongDatabaseVariations", testVariationToManyAddOpSRAddSongDatabaseVariations)
	t.Run("VariationToSREwDatabaseLinks", testVariationToManyAddOpSREwDatabaseLinks)
	t.Run("VariationToSRNewVariations", testVariationToManyAddOpSRNewVariations)
	t.Run("VariationToSRRemoveSongDatabaseVariations", testVariationToManyAddOpSRRemoveSongDatabaseVariations)
	t.Run("VariationToSRUpdatedEwDatabaseLinkVersions", testVariationToManyAddOpSRUpdatedEwDatabaseLinkVersions)
	t.Run("VariationToTagVariations", testVariationToManyAddOpTagVariations)
	t.Run("VariationToVariationVersions", testVariationToManyAddOpVariationVersions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AuthorToVariations", testAuthorToManySetOpVariations)
	t.Run("CopyrightToVariations", testCopyrightToManySetOpVariations)
	t.Run("LanguageToVariations", testLanguageToManySetOpVariations)
	t.Run("MatiasClientToEwDatabases", testMatiasClientToManySetOpEwDatabases)
	t.Run("SongToVariations", testSongToManySetOpVariations)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AuthorToVariations", testAuthorToManyRemoveOpVariations)
	t.Run("CopyrightToVariations", testCopyrightToManyRemoveOpVariations)
	t.Run("LanguageToVariations", testLanguageToManyRemoveOpVariations)
	t.Run("MatiasClientToEwDatabases", testMatiasClientToManyRemoveOpEwDatabases)
	t.Run("SongToVariations", testSongToManyRemoveOpVariations)
}

func TestReload(t *testing.T) {
	t.Run("Authors", testAuthorsReload)
	t.Run("Branches", testBranchesReload)
	t.Run("Copyrights", testCopyrightsReload)
	t.Run("EventSchedules", testEventSchedulesReload)
	t.Run("Events", testEventsReload)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksReload)
	t.Run("EwDatabases", testEwDatabasesReload)
	t.Run("EwSongs", testEwSongsReload)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsReload)
	t.Run("Languages", testLanguagesReload)
	t.Run("Logs", testLogsReload)
	t.Run("MatiasClients", testMatiasClientsReload)
	t.Run("Merges", testMergesReload)
	t.Run("ScheduleVariations", testScheduleVariationsReload)
	t.Run("Schedules", testSchedulesReload)
	t.Run("SongDatabaseTags", testSongDatabaseTagsReload)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsReload)
	t.Run("SongDatabases", testSongDatabasesReload)
	t.Run("Songs", testSongsReload)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsReload)
	t.Run("SREwConflicts", testSREwConflictsReload)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksReload)
	t.Run("SREwSongs", testSREwSongsReload)
	t.Run("SRNewAuthors", testSRNewAuthorsReload)
	t.Run("SRNewBranches", testSRNewBranchesReload)
	t.Run("SRNewCopyrights", testSRNewCopyrightsReload)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsReload)
	t.Run("SRNewVariations", testSRNewVariationsReload)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsReload)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsReload)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsReload)
	t.Run("SynchronizationRaports", testSynchronizationRaportsReload)
	t.Run("TagVariations", testTagVariationsReload)
	t.Run("Tags", testTagsReload)
	t.Run("VariationVersions", testVariationVersionsReload)
	t.Run("Variations", testVariationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Authors", testAuthorsReloadAll)
	t.Run("Branches", testBranchesReloadAll)
	t.Run("Copyrights", testCopyrightsReloadAll)
	t.Run("EventSchedules", testEventSchedulesReloadAll)
	t.Run("Events", testEventsReloadAll)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksReloadAll)
	t.Run("EwDatabases", testEwDatabasesReloadAll)
	t.Run("EwSongs", testEwSongsReloadAll)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsReloadAll)
	t.Run("Languages", testLanguagesReloadAll)
	t.Run("Logs", testLogsReloadAll)
	t.Run("MatiasClients", testMatiasClientsReloadAll)
	t.Run("Merges", testMergesReloadAll)
	t.Run("ScheduleVariations", testScheduleVariationsReloadAll)
	t.Run("Schedules", testSchedulesReloadAll)
	t.Run("SongDatabaseTags", testSongDatabaseTagsReloadAll)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsReloadAll)
	t.Run("SongDatabases", testSongDatabasesReloadAll)
	t.Run("Songs", testSongsReloadAll)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsReloadAll)
	t.Run("SREwConflicts", testSREwConflictsReloadAll)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksReloadAll)
	t.Run("SREwSongs", testSREwSongsReloadAll)
	t.Run("SRNewAuthors", testSRNewAuthorsReloadAll)
	t.Run("SRNewBranches", testSRNewBranchesReloadAll)
	t.Run("SRNewCopyrights", testSRNewCopyrightsReloadAll)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsReloadAll)
	t.Run("SRNewVariations", testSRNewVariationsReloadAll)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsReloadAll)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsReloadAll)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsReloadAll)
	t.Run("SynchronizationRaports", testSynchronizationRaportsReloadAll)
	t.Run("TagVariations", testTagVariationsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("VariationVersions", testVariationVersionsReloadAll)
	t.Run("Variations", testVariationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Authors", testAuthorsSelect)
	t.Run("Branches", testBranchesSelect)
	t.Run("Copyrights", testCopyrightsSelect)
	t.Run("EventSchedules", testEventSchedulesSelect)
	t.Run("Events", testEventsSelect)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksSelect)
	t.Run("EwDatabases", testEwDatabasesSelect)
	t.Run("EwSongs", testEwSongsSelect)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsSelect)
	t.Run("Languages", testLanguagesSelect)
	t.Run("Logs", testLogsSelect)
	t.Run("MatiasClients", testMatiasClientsSelect)
	t.Run("Merges", testMergesSelect)
	t.Run("ScheduleVariations", testScheduleVariationsSelect)
	t.Run("Schedules", testSchedulesSelect)
	t.Run("SongDatabaseTags", testSongDatabaseTagsSelect)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsSelect)
	t.Run("SongDatabases", testSongDatabasesSelect)
	t.Run("Songs", testSongsSelect)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsSelect)
	t.Run("SREwConflicts", testSREwConflictsSelect)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksSelect)
	t.Run("SREwSongs", testSREwSongsSelect)
	t.Run("SRNewAuthors", testSRNewAuthorsSelect)
	t.Run("SRNewBranches", testSRNewBranchesSelect)
	t.Run("SRNewCopyrights", testSRNewCopyrightsSelect)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsSelect)
	t.Run("SRNewVariations", testSRNewVariationsSelect)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsSelect)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsSelect)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsSelect)
	t.Run("SynchronizationRaports", testSynchronizationRaportsSelect)
	t.Run("TagVariations", testTagVariationsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("VariationVersions", testVariationVersionsSelect)
	t.Run("Variations", testVariationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Authors", testAuthorsUpdate)
	t.Run("Branches", testBranchesUpdate)
	t.Run("Copyrights", testCopyrightsUpdate)
	t.Run("EventSchedules", testEventSchedulesUpdate)
	t.Run("Events", testEventsUpdate)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksUpdate)
	t.Run("EwDatabases", testEwDatabasesUpdate)
	t.Run("EwSongs", testEwSongsUpdate)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsUpdate)
	t.Run("Languages", testLanguagesUpdate)
	t.Run("Logs", testLogsUpdate)
	t.Run("MatiasClients", testMatiasClientsUpdate)
	t.Run("Merges", testMergesUpdate)
	t.Run("ScheduleVariations", testScheduleVariationsUpdate)
	t.Run("Schedules", testSchedulesUpdate)
	t.Run("SongDatabaseTags", testSongDatabaseTagsUpdate)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsUpdate)
	t.Run("SongDatabases", testSongDatabasesUpdate)
	t.Run("Songs", testSongsUpdate)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsUpdate)
	t.Run("SREwConflicts", testSREwConflictsUpdate)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksUpdate)
	t.Run("SREwSongs", testSREwSongsUpdate)
	t.Run("SRNewAuthors", testSRNewAuthorsUpdate)
	t.Run("SRNewBranches", testSRNewBranchesUpdate)
	t.Run("SRNewCopyrights", testSRNewCopyrightsUpdate)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsUpdate)
	t.Run("SRNewVariations", testSRNewVariationsUpdate)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsUpdate)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsUpdate)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsUpdate)
	t.Run("SynchronizationRaports", testSynchronizationRaportsUpdate)
	t.Run("TagVariations", testTagVariationsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("VariationVersions", testVariationVersionsUpdate)
	t.Run("Variations", testVariationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Authors", testAuthorsSliceUpdateAll)
	t.Run("Branches", testBranchesSliceUpdateAll)
	t.Run("Copyrights", testCopyrightsSliceUpdateAll)
	t.Run("EventSchedules", testEventSchedulesSliceUpdateAll)
	t.Run("Events", testEventsSliceUpdateAll)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksSliceUpdateAll)
	t.Run("EwDatabases", testEwDatabasesSliceUpdateAll)
	t.Run("EwSongs", testEwSongsSliceUpdateAll)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsSliceUpdateAll)
	t.Run("Languages", testLanguagesSliceUpdateAll)
	t.Run("Logs", testLogsSliceUpdateAll)
	t.Run("MatiasClients", testMatiasClientsSliceUpdateAll)
	t.Run("Merges", testMergesSliceUpdateAll)
	t.Run("ScheduleVariations", testScheduleVariationsSliceUpdateAll)
	t.Run("Schedules", testSchedulesSliceUpdateAll)
	t.Run("SongDatabaseTags", testSongDatabaseTagsSliceUpdateAll)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsSliceUpdateAll)
	t.Run("SongDatabases", testSongDatabasesSliceUpdateAll)
	t.Run("Songs", testSongsSliceUpdateAll)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsSliceUpdateAll)
	t.Run("SREwConflicts", testSREwConflictsSliceUpdateAll)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksSliceUpdateAll)
	t.Run("SREwSongs", testSREwSongsSliceUpdateAll)
	t.Run("SRNewAuthors", testSRNewAuthorsSliceUpdateAll)
	t.Run("SRNewBranches", testSRNewBranchesSliceUpdateAll)
	t.Run("SRNewCopyrights", testSRNewCopyrightsSliceUpdateAll)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsSliceUpdateAll)
	t.Run("SRNewVariations", testSRNewVariationsSliceUpdateAll)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsSliceUpdateAll)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsSliceUpdateAll)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsSliceUpdateAll)
	t.Run("SynchronizationRaports", testSynchronizationRaportsSliceUpdateAll)
	t.Run("TagVariations", testTagVariationsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("VariationVersions", testVariationVersionsSliceUpdateAll)
	t.Run("Variations", testVariationsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Authors", testAuthorsUpsert)
	t.Run("Branches", testBranchesUpsert)
	t.Run("Copyrights", testCopyrightsUpsert)
	t.Run("EventSchedules", testEventSchedulesUpsert)
	t.Run("Events", testEventsUpsert)
	t.Run("EwDatabaseLinks", testEwDatabaseLinksUpsert)
	t.Run("EwDatabases", testEwDatabasesUpsert)
	t.Run("EwSongs", testEwSongsUpsert)
	t.Run("JyvaskylaSongs", testJyvaskylaSongsUpsert)
	t.Run("Languages", testLanguagesUpsert)
	t.Run("Logs", testLogsUpsert)
	t.Run("MatiasClients", testMatiasClientsUpsert)
	t.Run("Merges", testMergesUpsert)
	t.Run("ScheduleVariations", testScheduleVariationsUpsert)
	t.Run("Schedules", testSchedulesUpsert)
	t.Run("SongDatabaseTags", testSongDatabaseTagsUpsert)
	t.Run("SongDatabaseVariations", testSongDatabaseVariationsUpsert)
	t.Run("SongDatabases", testSongDatabasesUpsert)
	t.Run("Songs", testSongsUpsert)
	t.Run("SRAddSongDatabaseVariations", testSRAddSongDatabaseVariationsUpsert)
	t.Run("SREwConflicts", testSREwConflictsUpsert)
	t.Run("SREwDatabaseLinks", testSREwDatabaseLinksUpsert)
	t.Run("SREwSongs", testSREwSongsUpsert)
	t.Run("SRNewAuthors", testSRNewAuthorsUpsert)
	t.Run("SRNewBranches", testSRNewBranchesUpsert)
	t.Run("SRNewCopyrights", testSRNewCopyrightsUpsert)
	t.Run("SRNewVariationVersions", testSRNewVariationVersionsUpsert)
	t.Run("SRNewVariations", testSRNewVariationsUpsert)
	t.Run("SRPassivatedVariationVersions", testSRPassivatedVariationVersionsUpsert)
	t.Run("SRRemoveSongDatabaseVariations", testSRRemoveSongDatabaseVariationsUpsert)
	t.Run("SRUpdatedEwDatabaseLinkVersions", testSRUpdatedEwDatabaseLinkVersionsUpsert)
	t.Run("SynchronizationRaports", testSynchronizationRaportsUpsert)
	t.Run("TagVariations", testTagVariationsUpsert)
	t.Run("Tags", testTagsUpsert)
	t.Run("VariationVersions", testVariationVersionsUpsert)
	t.Run("Variations", testVariationsUpsert)
}

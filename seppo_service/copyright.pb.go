// Code generated by protoc-gen-go.
// source: copyright.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Copyright struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Copyright) Reset()                    { *m = Copyright{} }
func (m *Copyright) String() string            { return proto.CompactTextString(m) }
func (*Copyright) ProtoMessage()               {}
func (*Copyright) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Copyright) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Copyright) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FetchCopyrightByIdRequest struct {
	CopyrightIds []uint64 `protobuf:"varint,1,rep,packed,name=copyrightIds" json:"copyrightIds,omitempty"`
}

func (m *FetchCopyrightByIdRequest) Reset()                    { *m = FetchCopyrightByIdRequest{} }
func (m *FetchCopyrightByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchCopyrightByIdRequest) ProtoMessage()               {}
func (*FetchCopyrightByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FetchCopyrightByIdRequest) GetCopyrightIds() []uint64 {
	if m != nil {
		return m.CopyrightIds
	}
	return nil
}

type FetchCopyrightByIdResponse struct {
	Copyrights []*Copyright `protobuf:"bytes,1,rep,name=copyrights" json:"copyrights,omitempty"`
}

func (m *FetchCopyrightByIdResponse) Reset()                    { *m = FetchCopyrightByIdResponse{} }
func (m *FetchCopyrightByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchCopyrightByIdResponse) ProtoMessage()               {}
func (*FetchCopyrightByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *FetchCopyrightByIdResponse) GetCopyrights() []*Copyright {
	if m != nil {
		return m.Copyrights
	}
	return nil
}

type SearchCopyrightsRequest struct {
	Offset uint32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *SearchCopyrightsRequest) Reset()                    { *m = SearchCopyrightsRequest{} }
func (m *SearchCopyrightsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchCopyrightsRequest) ProtoMessage()               {}
func (*SearchCopyrightsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SearchCopyrightsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchCopyrightsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchCopyrightsResponse struct {
	Copyrights []*Copyright `protobuf:"bytes,1,rep,name=copyrights" json:"copyrights,omitempty"`
}

func (m *SearchCopyrightsResponse) Reset()                    { *m = SearchCopyrightsResponse{} }
func (m *SearchCopyrightsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchCopyrightsResponse) ProtoMessage()               {}
func (*SearchCopyrightsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SearchCopyrightsResponse) GetCopyrights() []*Copyright {
	if m != nil {
		return m.Copyrights
	}
	return nil
}

type CreateCopyrightRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateCopyrightRequest) Reset()                    { *m = CreateCopyrightRequest{} }
func (m *CreateCopyrightRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCopyrightRequest) ProtoMessage()               {}
func (*CreateCopyrightRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CreateCopyrightRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateCopyrightResponse struct {
	Copyright *Copyright `protobuf:"bytes,1,opt,name=copyright" json:"copyright,omitempty"`
}

func (m *CreateCopyrightResponse) Reset()                    { *m = CreateCopyrightResponse{} }
func (m *CreateCopyrightResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCopyrightResponse) ProtoMessage()               {}
func (*CreateCopyrightResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CreateCopyrightResponse) GetCopyright() *Copyright {
	if m != nil {
		return m.Copyright
	}
	return nil
}

type UpdateCopyrightRequest struct {
	CopyrightId uint64 `protobuf:"varint,1,opt,name=copyrightId" json:"copyrightId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UpdateCopyrightRequest) Reset()                    { *m = UpdateCopyrightRequest{} }
func (m *UpdateCopyrightRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCopyrightRequest) ProtoMessage()               {}
func (*UpdateCopyrightRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *UpdateCopyrightRequest) GetCopyrightId() uint64 {
	if m != nil {
		return m.CopyrightId
	}
	return 0
}

func (m *UpdateCopyrightRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateCopyrightResponse struct {
	Copyright *Copyright `protobuf:"bytes,1,opt,name=copyright" json:"copyright,omitempty"`
	Success   bool       `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *UpdateCopyrightResponse) Reset()                    { *m = UpdateCopyrightResponse{} }
func (m *UpdateCopyrightResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateCopyrightResponse) ProtoMessage()               {}
func (*UpdateCopyrightResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *UpdateCopyrightResponse) GetCopyright() *Copyright {
	if m != nil {
		return m.Copyright
	}
	return nil
}

func (m *UpdateCopyrightResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RemoveCopyrightRequest struct {
	CopyrightId uint64 `protobuf:"varint,1,opt,name=copyrightId" json:"copyrightId,omitempty"`
}

func (m *RemoveCopyrightRequest) Reset()                    { *m = RemoveCopyrightRequest{} }
func (m *RemoveCopyrightRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveCopyrightRequest) ProtoMessage()               {}
func (*RemoveCopyrightRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *RemoveCopyrightRequest) GetCopyrightId() uint64 {
	if m != nil {
		return m.CopyrightId
	}
	return 0
}

type RemoveCopyrightResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RemoveCopyrightResponse) Reset()                    { *m = RemoveCopyrightResponse{} }
func (m *RemoveCopyrightResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveCopyrightResponse) ProtoMessage()               {}
func (*RemoveCopyrightResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *RemoveCopyrightResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Copyright)(nil), "SeppoService.Copyright")
	proto.RegisterType((*FetchCopyrightByIdRequest)(nil), "SeppoService.FetchCopyrightByIdRequest")
	proto.RegisterType((*FetchCopyrightByIdResponse)(nil), "SeppoService.FetchCopyrightByIdResponse")
	proto.RegisterType((*SearchCopyrightsRequest)(nil), "SeppoService.SearchCopyrightsRequest")
	proto.RegisterType((*SearchCopyrightsResponse)(nil), "SeppoService.SearchCopyrightsResponse")
	proto.RegisterType((*CreateCopyrightRequest)(nil), "SeppoService.CreateCopyrightRequest")
	proto.RegisterType((*CreateCopyrightResponse)(nil), "SeppoService.CreateCopyrightResponse")
	proto.RegisterType((*UpdateCopyrightRequest)(nil), "SeppoService.UpdateCopyrightRequest")
	proto.RegisterType((*UpdateCopyrightResponse)(nil), "SeppoService.UpdateCopyrightResponse")
	proto.RegisterType((*RemoveCopyrightRequest)(nil), "SeppoService.RemoveCopyrightRequest")
	proto.RegisterType((*RemoveCopyrightResponse)(nil), "SeppoService.RemoveCopyrightResponse")
}

func init() { proto.RegisterFile("copyright.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0xc7, 0xc9, 0x7e, 0xfb, 0x4d, 0xf7, 0x6c, 0x53, 0x08, 0xd2, 0x56, 0x4f, 0x25, 0xa7, 0x1d,
	0xa4, 0x82, 0x43, 0x04, 0x2f, 0x82, 0x03, 0x65, 0x17, 0x91, 0x94, 0xbd, 0x80, 0xda, 0x3e, 0x73,
	0x11, 0xbb, 0xc4, 0x26, 0x1b, 0xec, 0xdd, 0x0b, 0x59, 0xdb, 0x65, 0xb4, 0x78, 0x70, 0xb7, 0x3e,
	0xe9, 0xf7, 0xcf, 0x27, 0x49, 0x0b, 0xe7, 0xa9, 0x54, 0xdb, 0x42, 0x7c, 0x2c, 0x4d, 0xa4, 0x0a,
	0x69, 0x24, 0x1d, 0xc6, 0xa8, 0x94, 0x8c, 0xb1, 0xd8, 0x88, 0x14, 0xd9, 0x0d, 0xf4, 0xa7, 0x95,
	0x80, 0x9e, 0x41, 0x47, 0x64, 0x01, 0x09, 0xc9, 0xb8, 0xcb, 0x3b, 0x22, 0xa3, 0x14, 0xba, 0xab,
	0x24, 0xc7, 0xa0, 0x13, 0x92, 0x71, 0x9f, 0xdb, 0x67, 0xf6, 0x08, 0x97, 0xcf, 0x68, 0xd2, 0x65,
	0xed, 0x7a, 0xda, 0xce, 0x32, 0x8e, 0xdf, 0x6b, 0xd4, 0x86, 0x32, 0x18, 0xd6, 0x75, 0xb3, 0x4c,
	0x07, 0x24, 0xfc, 0x37, 0xee, 0xf2, 0x83, 0x35, 0x36, 0x87, 0xab, 0xb6, 0x00, 0xad, 0xe4, 0x4a,
	0x23, 0xbd, 0x07, 0xa8, 0xd5, 0x3b, 0xff, 0xe0, 0xd6, 0x8f, 0x5c, 0xe4, 0xa8, 0x36, 0x72, 0x47,
	0xca, 0x5e, 0xc0, 0x8f, 0x31, 0x29, 0x9c, 0x5c, 0x5d, 0x51, 0x79, 0xd0, 0x93, 0x8b, 0x85, 0x46,
	0x63, 0xb7, 0x36, 0xe2, 0xe5, 0x44, 0x2f, 0xe0, 0xff, 0x97, 0xc8, 0x85, 0xb1, 0xfb, 0x1b, 0xf1,
	0xdd, 0xc0, 0x62, 0x08, 0x9a, 0x41, 0xc7, 0xd2, 0x5d, 0x83, 0x37, 0x2d, 0x30, 0x31, 0xb8, 0x7f,
	0x5d, 0xc2, 0x55, 0x67, 0x4c, 0x9c, 0x33, 0x7e, 0x03, 0xbf, 0xa1, 0x2e, 0x09, 0xee, 0xa0, 0x5f,
	0xc7, 0x5a, 0xcf, 0x2f, 0x00, 0x7b, 0x25, 0x7b, 0x05, 0x6f, 0xae, 0xb2, 0xb6, 0xfe, 0x10, 0x06,
	0xce, 0xf5, 0x94, 0x97, 0xef, 0x2e, 0xb5, 0x7e, 0x05, 0x9f, 0xe0, 0x37, 0xf2, 0x8e, 0x22, 0xa4,
	0x01, 0x9c, 0xe8, 0x75, 0x9a, 0xa2, 0xd6, 0xb6, 0xe8, 0x94, 0x57, 0x23, 0x7b, 0x00, 0x8f, 0x63,
	0x2e, 0x37, 0x7f, 0x60, 0x67, 0x13, 0xf0, 0x1b, 0xde, 0x92, 0xd3, 0x29, 0x24, 0x07, 0x85, 0xef,
	0x3d, 0xfb, 0xa3, 0x4c, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x25, 0x23, 0xb2, 0x3b, 0x03,
	0x00, 0x00,
}

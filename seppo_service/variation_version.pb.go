// Code generated by protoc-gen-go.
// source: variation_version.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VariationVersion struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	VariationId uint32 `protobuf:"varint,2,opt,name=variationId" json:"variationId,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Text        string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Version     uint32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	CreatedAt   int64  `protobuf:"varint,6,opt,name=createdAt" json:"createdAt,omitempty"`
	DisabledAt  int64  `protobuf:"varint,7,opt,name=disabledAt" json:"disabledAt,omitempty"`
}

func (m *VariationVersion) Reset()                    { *m = VariationVersion{} }
func (m *VariationVersion) String() string            { return proto.CompactTextString(m) }
func (*VariationVersion) ProtoMessage()               {}
func (*VariationVersion) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *VariationVersion) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VariationVersion) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

func (m *VariationVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VariationVersion) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *VariationVersion) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VariationVersion) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *VariationVersion) GetDisabledAt() int64 {
	if m != nil {
		return m.DisabledAt
	}
	return 0
}

type FetchNewestVariationVersionByVariationIdRequest struct {
	VariationIds []uint32 `protobuf:"varint,1,rep,packed,name=variationIds" json:"variationIds,omitempty"`
}

func (m *FetchNewestVariationVersionByVariationIdRequest) Reset() {
	*m = FetchNewestVariationVersionByVariationIdRequest{}
}
func (m *FetchNewestVariationVersionByVariationIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*FetchNewestVariationVersionByVariationIdRequest) ProtoMessage() {}
func (*FetchNewestVariationVersionByVariationIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{1}
}

func (m *FetchNewestVariationVersionByVariationIdRequest) GetVariationIds() []uint32 {
	if m != nil {
		return m.VariationIds
	}
	return nil
}

type FetchNewestVariationVersionByVariationIdResponse struct {
	VariationVersions []*VariationVersion `protobuf:"bytes,1,rep,name=variationVersions" json:"variationVersions,omitempty"`
}

func (m *FetchNewestVariationVersionByVariationIdResponse) Reset() {
	*m = FetchNewestVariationVersionByVariationIdResponse{}
}
func (m *FetchNewestVariationVersionByVariationIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*FetchNewestVariationVersionByVariationIdResponse) ProtoMessage() {}
func (*FetchNewestVariationVersionByVariationIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{2}
}

func (m *FetchNewestVariationVersionByVariationIdResponse) GetVariationVersions() []*VariationVersion {
	if m != nil {
		return m.VariationVersions
	}
	return nil
}

type FetchVariationVersionByIdRequest struct {
	VariationVersionIds []uint32 `protobuf:"varint,1,rep,packed,name=variationVersionIds" json:"variationVersionIds,omitempty"`
}

func (m *FetchVariationVersionByIdRequest) Reset()         { *m = FetchVariationVersionByIdRequest{} }
func (m *FetchVariationVersionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*FetchVariationVersionByIdRequest) ProtoMessage()    {}
func (*FetchVariationVersionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{3}
}

func (m *FetchVariationVersionByIdRequest) GetVariationVersionIds() []uint32 {
	if m != nil {
		return m.VariationVersionIds
	}
	return nil
}

type FetchVariationVersionByIdResponse struct {
	VariationVersions []*VariationVersion `protobuf:"bytes,1,rep,name=variationVersions" json:"variationVersions,omitempty"`
}

func (m *FetchVariationVersionByIdResponse) Reset()         { *m = FetchVariationVersionByIdResponse{} }
func (m *FetchVariationVersionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*FetchVariationVersionByIdResponse) ProtoMessage()    {}
func (*FetchVariationVersionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{4}
}

func (m *FetchVariationVersionByIdResponse) GetVariationVersions() []*VariationVersion {
	if m != nil {
		return m.VariationVersions
	}
	return nil
}

func init() {
	proto.RegisterType((*VariationVersion)(nil), "SeppoService.VariationVersion")
	proto.RegisterType((*FetchNewestVariationVersionByVariationIdRequest)(nil), "SeppoService.FetchNewestVariationVersionByVariationIdRequest")
	proto.RegisterType((*FetchNewestVariationVersionByVariationIdResponse)(nil), "SeppoService.FetchNewestVariationVersionByVariationIdResponse")
	proto.RegisterType((*FetchVariationVersionByIdRequest)(nil), "SeppoService.FetchVariationVersionByIdRequest")
	proto.RegisterType((*FetchVariationVersionByIdResponse)(nil), "SeppoService.FetchVariationVersionByIdResponse")
}

func init() { proto.RegisterFile("variation_version.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe5, 0xa4, 0xb4, 0xea, 0xb5, 0x45, 0x60, 0x06, 0x3c, 0xa0, 0xca, 0x78, 0xca, 0x14,
	0x2a, 0x78, 0x02, 0x18, 0x90, 0x90, 0x10, 0x83, 0x0b, 0x59, 0x51, 0x9a, 0x9c, 0x84, 0x25, 0x88,
	0x53, 0xdb, 0x04, 0xd8, 0x78, 0x38, 0x1e, 0x0c, 0xd5, 0xa1, 0x24, 0xa4, 0x08, 0xb1, 0x74, 0x3b,
	0xff, 0xff, 0xdd, 0xe7, 0xfb, 0x2d, 0xc3, 0x61, 0x95, 0x1a, 0x95, 0x3a, 0xa5, 0x8b, 0xfb, 0x0a,
	0x8d, 0x55, 0xba, 0x88, 0x4b, 0xa3, 0x9d, 0xa6, 0xe3, 0x39, 0x96, 0xa5, 0x9e, 0xa3, 0xa9, 0x54,
	0x86, 0xe2, 0x83, 0xc0, 0x5e, 0xb2, 0xee, 0x4c, 0xea, 0x46, 0xba, 0x0b, 0x81, 0xca, 0x19, 0xe1,
	0x24, 0x9a, 0xc8, 0x40, 0xe5, 0x94, 0xc3, 0xe8, 0x9b, 0x76, 0x95, 0xb3, 0xc0, 0x1b, 0x6d, 0x89,
	0x52, 0xe8, 0x15, 0xe9, 0x13, 0xb2, 0x90, 0x93, 0x68, 0x28, 0x7d, 0xbd, 0xd2, 0x1c, 0xbe, 0x3a,
	0xd6, 0xab, 0xb5, 0x55, 0x4d, 0x19, 0x0c, 0xbe, 0xb6, 0x61, 0x3b, 0x9e, 0xb2, 0x3e, 0xd2, 0x23,
	0x18, 0x66, 0x06, 0x53, 0x87, 0xf9, 0xb9, 0x63, 0x7d, 0x4e, 0xa2, 0x50, 0x36, 0x02, 0x9d, 0x02,
	0xe4, 0xca, 0xa6, 0x8b, 0x47, 0x6f, 0x0f, 0xbc, 0xdd, 0x52, 0xc4, 0x1d, 0x9c, 0x5c, 0xa2, 0xcb,
	0x1e, 0x6e, 0xf0, 0x05, 0xad, 0xeb, 0x06, 0xba, 0x78, 0x4b, 0x9a, 0x5d, 0x25, 0x2e, 0x9f, 0xd1,
	0x3a, 0x2a, 0x60, 0xdc, 0x4a, 0x60, 0x19, 0xe1, 0x61, 0x34, 0x91, 0x3f, 0x34, 0xf1, 0x4e, 0x60,
	0xf6, 0x7f, 0xae, 0x2d, 0x75, 0x61, 0x91, 0x5e, 0xc3, 0x7e, 0xd5, 0x69, 0xac, 0xe9, 0xa3, 0xd3,
	0x69, 0xdc, 0x7e, 0xfc, 0xb8, 0xcb, 0x93, 0x9b, 0x83, 0xe2, 0x16, 0xb8, 0xdf, 0x60, 0xf3, 0xee,
	0x26, 0xca, 0x0c, 0x0e, 0xba, 0x83, 0x4d, 0xa2, 0xdf, 0x2c, 0xb1, 0x84, 0xe3, 0x3f, 0xa8, 0xdb,
	0x08, 0xb2, 0xe8, 0xfb, 0xef, 0x77, 0xf6, 0x19, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x40, 0x16, 0xd3,
	0x99, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: seppo_service.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Seppo service

type SeppoClient interface {
	FetchVariationById(ctx context.Context, in *FetchVariationByIdRequest, opts ...grpc.CallOption) (*FetchVariationByIdResponse, error)
	SearchVariations(ctx context.Context, in *SearchVariationsRequest, opts ...grpc.CallOption) (*SearchVariationsResponse, error)
	FetchNewestVariationVersionByVariationId(ctx context.Context, in *FetchNewestVariationVersionByVariationIdRequest, opts ...grpc.CallOption) (*FetchNewestVariationVersionByVariationIdResponse, error)
	FetchVariationVersionById(ctx context.Context, in *FetchVariationVersionByIdRequest, opts ...grpc.CallOption) (*FetchVariationVersionByIdResponse, error)
	SearchSongDatabases(ctx context.Context, in *SearchSongDatabasesRequest, opts ...grpc.CallOption) (*SearchSongDatabasesResponse, error)
	FetchSongDatabaseById(ctx context.Context, in *FetchSongDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchSongDatabaseByIdResponse, error)
	SearchEwDatabases(ctx context.Context, in *SearchEwDatabasesRequest, opts ...grpc.CallOption) (*SearchEwDatabasesResponse, error)
	FetchEwDatabaseById(ctx context.Context, in *FetchEwDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchEwDatabaseByIdResponse, error)
	SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...grpc.CallOption) (*SearchTagsResponse, error)
	FetchTagById(ctx context.Context, in *FetchTagByIdRequest, opts ...grpc.CallOption) (*FetchTagByIdResponse, error)
	SearchLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...grpc.CallOption) (*SearchLanguagesResponse, error)
	FetchLanguageById(ctx context.Context, in *FetchLanguageByIdRequest, opts ...grpc.CallOption) (*FetchLanguageByIdResponse, error)
	SearchSchedules(ctx context.Context, in *SearchSchedulesRequest, opts ...grpc.CallOption) (*SearchSchedulesResponse, error)
	FetchScheduleById(ctx context.Context, in *FetchScheduleByIdRequest, opts ...grpc.CallOption) (*FetchScheduleByIdResponse, error)
	SearchLogs(ctx context.Context, in *SearchLogsRequest, opts ...grpc.CallOption) (*SearchLogsResponse, error)
	CreateVariation(ctx context.Context, in *CreateVariationRequest, opts ...grpc.CallOption) (*CreateVariationResponse, error)
	UpdateVariation(ctx context.Context, in *UpdateVariationRequest, opts ...grpc.CallOption) (*UpdateVariationResponse, error)
	RemoveVariation(ctx context.Context, in *RemoveVariationRequest, opts ...grpc.CallOption) (*RemoveVariationResponse, error)
	CreateSongDatabase(ctx context.Context, in *CreateSongDatabaseRequest, opts ...grpc.CallOption) (*CreateSongDatabaseResponse, error)
	UpdateSongDatabase(ctx context.Context, in *UpdateSongDatabaseRequest, opts ...grpc.CallOption) (*UpdateSongDatabaseResponse, error)
	RemoveSongDatabase(ctx context.Context, in *RemoveSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveSongDatabaseResponse, error)
	CreateEwDatabase(ctx context.Context, in *CreateEwDatabaseRequest, opts ...grpc.CallOption) (*CreateEwDatabaseResponse, error)
	UpdateEwDatabase(ctx context.Context, in *UpdateEwDatabaseRequest, opts ...grpc.CallOption) (*UpdateEwDatabaseResponse, error)
	RemoveEwDatabase(ctx context.Context, in *RemoveEwDatabaseRequest, opts ...grpc.CallOption) (*RemoveEwDatabaseResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error)
	CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*CreateLanguageResponse, error)
	UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*UpdateLanguageResponse, error)
	RemoveLanguage(ctx context.Context, in *RemoveLanguageRequest, opts ...grpc.CallOption) (*RemoveLanguageResponse, error)
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error)
	UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*UpdateScheduleResponse, error)
	RemoveSchedule(ctx context.Context, in *RemoveScheduleRequest, opts ...grpc.CallOption) (*RemoveScheduleResponse, error)
}

type seppoClient struct {
	cc *grpc.ClientConn
}

func NewSeppoClient(cc *grpc.ClientConn) SeppoClient {
	return &seppoClient{cc}
}

func (c *seppoClient) FetchVariationById(ctx context.Context, in *FetchVariationByIdRequest, opts ...grpc.CallOption) (*FetchVariationByIdResponse, error) {
	out := new(FetchVariationByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchVariationById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchVariations(ctx context.Context, in *SearchVariationsRequest, opts ...grpc.CallOption) (*SearchVariationsResponse, error) {
	out := new(SearchVariationsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchVariations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchNewestVariationVersionByVariationId(ctx context.Context, in *FetchNewestVariationVersionByVariationIdRequest, opts ...grpc.CallOption) (*FetchNewestVariationVersionByVariationIdResponse, error) {
	out := new(FetchNewestVariationVersionByVariationIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchNewestVariationVersionByVariationId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchVariationVersionById(ctx context.Context, in *FetchVariationVersionByIdRequest, opts ...grpc.CallOption) (*FetchVariationVersionByIdResponse, error) {
	out := new(FetchVariationVersionByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchVariationVersionById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchSongDatabases(ctx context.Context, in *SearchSongDatabasesRequest, opts ...grpc.CallOption) (*SearchSongDatabasesResponse, error) {
	out := new(SearchSongDatabasesResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchSongDatabases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchSongDatabaseById(ctx context.Context, in *FetchSongDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchSongDatabaseByIdResponse, error) {
	out := new(FetchSongDatabaseByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchSongDatabaseById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchEwDatabases(ctx context.Context, in *SearchEwDatabasesRequest, opts ...grpc.CallOption) (*SearchEwDatabasesResponse, error) {
	out := new(SearchEwDatabasesResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchEwDatabases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchEwDatabaseById(ctx context.Context, in *FetchEwDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchEwDatabaseByIdResponse, error) {
	out := new(FetchEwDatabaseByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchEwDatabaseById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...grpc.CallOption) (*SearchTagsResponse, error) {
	out := new(SearchTagsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchTagById(ctx context.Context, in *FetchTagByIdRequest, opts ...grpc.CallOption) (*FetchTagByIdResponse, error) {
	out := new(FetchTagByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchTagById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...grpc.CallOption) (*SearchLanguagesResponse, error) {
	out := new(SearchLanguagesResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchLanguageById(ctx context.Context, in *FetchLanguageByIdRequest, opts ...grpc.CallOption) (*FetchLanguageByIdResponse, error) {
	out := new(FetchLanguageByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchLanguageById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchSchedules(ctx context.Context, in *SearchSchedulesRequest, opts ...grpc.CallOption) (*SearchSchedulesResponse, error) {
	out := new(SearchSchedulesResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchSchedules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchScheduleById(ctx context.Context, in *FetchScheduleByIdRequest, opts ...grpc.CallOption) (*FetchScheduleByIdResponse, error) {
	out := new(FetchScheduleByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchScheduleById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchLogs(ctx context.Context, in *SearchLogsRequest, opts ...grpc.CallOption) (*SearchLogsResponse, error) {
	out := new(SearchLogsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateVariation(ctx context.Context, in *CreateVariationRequest, opts ...grpc.CallOption) (*CreateVariationResponse, error) {
	out := new(CreateVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateVariation(ctx context.Context, in *UpdateVariationRequest, opts ...grpc.CallOption) (*UpdateVariationResponse, error) {
	out := new(UpdateVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveVariation(ctx context.Context, in *RemoveVariationRequest, opts ...grpc.CallOption) (*RemoveVariationResponse, error) {
	out := new(RemoveVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateSongDatabase(ctx context.Context, in *CreateSongDatabaseRequest, opts ...grpc.CallOption) (*CreateSongDatabaseResponse, error) {
	out := new(CreateSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateSongDatabase(ctx context.Context, in *UpdateSongDatabaseRequest, opts ...grpc.CallOption) (*UpdateSongDatabaseResponse, error) {
	out := new(UpdateSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveSongDatabase(ctx context.Context, in *RemoveSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveSongDatabaseResponse, error) {
	out := new(RemoveSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateEwDatabase(ctx context.Context, in *CreateEwDatabaseRequest, opts ...grpc.CallOption) (*CreateEwDatabaseResponse, error) {
	out := new(CreateEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateEwDatabase(ctx context.Context, in *UpdateEwDatabaseRequest, opts ...grpc.CallOption) (*UpdateEwDatabaseResponse, error) {
	out := new(UpdateEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveEwDatabase(ctx context.Context, in *RemoveEwDatabaseRequest, opts ...grpc.CallOption) (*RemoveEwDatabaseResponse, error) {
	out := new(RemoveEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	out := new(UpdateTagResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error) {
	out := new(RemoveTagResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*CreateLanguageResponse, error) {
	out := new(CreateLanguageResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*UpdateLanguageResponse, error) {
	out := new(UpdateLanguageResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveLanguage(ctx context.Context, in *RemoveLanguageRequest, opts ...grpc.CallOption) (*RemoveLanguageResponse, error) {
	out := new(RemoveLanguageResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error) {
	out := new(CreateScheduleResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateSchedule(ctx context.Context, in *UpdateScheduleRequest, opts ...grpc.CallOption) (*UpdateScheduleResponse, error) {
	out := new(UpdateScheduleResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveSchedule(ctx context.Context, in *RemoveScheduleRequest, opts ...grpc.CallOption) (*RemoveScheduleResponse, error) {
	out := new(RemoveScheduleResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeSchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Seppo service

type SeppoServer interface {
	FetchVariationById(context.Context, *FetchVariationByIdRequest) (*FetchVariationByIdResponse, error)
	SearchVariations(context.Context, *SearchVariationsRequest) (*SearchVariationsResponse, error)
	FetchNewestVariationVersionByVariationId(context.Context, *FetchNewestVariationVersionByVariationIdRequest) (*FetchNewestVariationVersionByVariationIdResponse, error)
	FetchVariationVersionById(context.Context, *FetchVariationVersionByIdRequest) (*FetchVariationVersionByIdResponse, error)
	SearchSongDatabases(context.Context, *SearchSongDatabasesRequest) (*SearchSongDatabasesResponse, error)
	FetchSongDatabaseById(context.Context, *FetchSongDatabaseByIdRequest) (*FetchSongDatabaseByIdResponse, error)
	SearchEwDatabases(context.Context, *SearchEwDatabasesRequest) (*SearchEwDatabasesResponse, error)
	FetchEwDatabaseById(context.Context, *FetchEwDatabaseByIdRequest) (*FetchEwDatabaseByIdResponse, error)
	SearchTags(context.Context, *SearchTagsRequest) (*SearchTagsResponse, error)
	FetchTagById(context.Context, *FetchTagByIdRequest) (*FetchTagByIdResponse, error)
	SearchLanguages(context.Context, *SearchLanguagesRequest) (*SearchLanguagesResponse, error)
	FetchLanguageById(context.Context, *FetchLanguageByIdRequest) (*FetchLanguageByIdResponse, error)
	SearchSchedules(context.Context, *SearchSchedulesRequest) (*SearchSchedulesResponse, error)
	FetchScheduleById(context.Context, *FetchScheduleByIdRequest) (*FetchScheduleByIdResponse, error)
	SearchLogs(context.Context, *SearchLogsRequest) (*SearchLogsResponse, error)
	CreateVariation(context.Context, *CreateVariationRequest) (*CreateVariationResponse, error)
	UpdateVariation(context.Context, *UpdateVariationRequest) (*UpdateVariationResponse, error)
	RemoveVariation(context.Context, *RemoveVariationRequest) (*RemoveVariationResponse, error)
	CreateSongDatabase(context.Context, *CreateSongDatabaseRequest) (*CreateSongDatabaseResponse, error)
	UpdateSongDatabase(context.Context, *UpdateSongDatabaseRequest) (*UpdateSongDatabaseResponse, error)
	RemoveSongDatabase(context.Context, *RemoveSongDatabaseRequest) (*RemoveSongDatabaseResponse, error)
	CreateEwDatabase(context.Context, *CreateEwDatabaseRequest) (*CreateEwDatabaseResponse, error)
	UpdateEwDatabase(context.Context, *UpdateEwDatabaseRequest) (*UpdateEwDatabaseResponse, error)
	RemoveEwDatabase(context.Context, *RemoveEwDatabaseRequest) (*RemoveEwDatabaseResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	RemoveTag(context.Context, *RemoveTagRequest) (*RemoveTagResponse, error)
	CreateLanguage(context.Context, *CreateLanguageRequest) (*CreateLanguageResponse, error)
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*UpdateLanguageResponse, error)
	RemoveLanguage(context.Context, *RemoveLanguageRequest) (*RemoveLanguageResponse, error)
	CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error)
	UpdateSchedule(context.Context, *UpdateScheduleRequest) (*UpdateScheduleResponse, error)
	RemoveSchedule(context.Context, *RemoveScheduleRequest) (*RemoveScheduleResponse, error)
}

func RegisterSeppoServer(s *grpc.Server, srv SeppoServer) {
	s.RegisterService(&_Seppo_serviceDesc, srv)
}

func _Seppo_FetchVariationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVariationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchVariationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchVariationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchVariationById(ctx, req.(*FetchVariationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchVariations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVariationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchVariations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchVariations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchVariations(ctx, req.(*SearchVariationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchNewestVariationVersionByVariationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNewestVariationVersionByVariationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchNewestVariationVersionByVariationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchNewestVariationVersionByVariationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchNewestVariationVersionByVariationId(ctx, req.(*FetchNewestVariationVersionByVariationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchVariationVersionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVariationVersionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchVariationVersionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchVariationVersionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchVariationVersionById(ctx, req.(*FetchVariationVersionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchSongDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSongDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchSongDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchSongDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchSongDatabases(ctx, req.(*SearchSongDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchSongDatabaseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSongDatabaseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchSongDatabaseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchSongDatabaseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchSongDatabaseById(ctx, req.(*FetchSongDatabaseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchEwDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEwDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchEwDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchEwDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchEwDatabases(ctx, req.(*SearchEwDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchEwDatabaseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEwDatabaseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchEwDatabaseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchEwDatabaseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchEwDatabaseById(ctx, req.(*FetchEwDatabaseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchTags(ctx, req.(*SearchTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTagByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchTagById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchTagById(ctx, req.(*FetchTagByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchLanguages(ctx, req.(*SearchLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchLanguageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLanguageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchLanguageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchLanguageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchLanguageById(ctx, req.(*FetchLanguageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchSchedules(ctx, req.(*SearchSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchScheduleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchScheduleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchScheduleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchScheduleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchScheduleById(ctx, req.(*FetchScheduleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchLogs(ctx, req.(*SearchLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateVariation(ctx, req.(*CreateVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateVariation(ctx, req.(*UpdateVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveVariation(ctx, req.(*RemoveVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateSongDatabase(ctx, req.(*CreateSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateSongDatabase(ctx, req.(*UpdateSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveSongDatabase(ctx, req.(*RemoveSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateEwDatabase(ctx, req.(*CreateEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateEwDatabase(ctx, req.(*UpdateEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveEwDatabase(ctx, req.(*RemoveEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveTag(ctx, req.(*RemoveTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateLanguage(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveLanguage(ctx, req.(*RemoveLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateSchedule(ctx, req.(*UpdateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveSchedule(ctx, req.(*RemoveScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Seppo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SeppoService.Seppo",
	HandlerType: (*SeppoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchVariationById",
			Handler:    _Seppo_FetchVariationById_Handler,
		},
		{
			MethodName: "searchVariations",
			Handler:    _Seppo_SearchVariations_Handler,
		},
		{
			MethodName: "fetchNewestVariationVersionByVariationId",
			Handler:    _Seppo_FetchNewestVariationVersionByVariationId_Handler,
		},
		{
			MethodName: "fetchVariationVersionById",
			Handler:    _Seppo_FetchVariationVersionById_Handler,
		},
		{
			MethodName: "searchSongDatabases",
			Handler:    _Seppo_SearchSongDatabases_Handler,
		},
		{
			MethodName: "fetchSongDatabaseById",
			Handler:    _Seppo_FetchSongDatabaseById_Handler,
		},
		{
			MethodName: "searchEwDatabases",
			Handler:    _Seppo_SearchEwDatabases_Handler,
		},
		{
			MethodName: "fetchEwDatabaseById",
			Handler:    _Seppo_FetchEwDatabaseById_Handler,
		},
		{
			MethodName: "searchTags",
			Handler:    _Seppo_SearchTags_Handler,
		},
		{
			MethodName: "fetchTagById",
			Handler:    _Seppo_FetchTagById_Handler,
		},
		{
			MethodName: "searchLanguages",
			Handler:    _Seppo_SearchLanguages_Handler,
		},
		{
			MethodName: "fetchLanguageById",
			Handler:    _Seppo_FetchLanguageById_Handler,
		},
		{
			MethodName: "searchSchedules",
			Handler:    _Seppo_SearchSchedules_Handler,
		},
		{
			MethodName: "fetchScheduleById",
			Handler:    _Seppo_FetchScheduleById_Handler,
		},
		{
			MethodName: "searchLogs",
			Handler:    _Seppo_SearchLogs_Handler,
		},
		{
			MethodName: "createVariation",
			Handler:    _Seppo_CreateVariation_Handler,
		},
		{
			MethodName: "updateVariation",
			Handler:    _Seppo_UpdateVariation_Handler,
		},
		{
			MethodName: "removeVariation",
			Handler:    _Seppo_RemoveVariation_Handler,
		},
		{
			MethodName: "createSongDatabase",
			Handler:    _Seppo_CreateSongDatabase_Handler,
		},
		{
			MethodName: "updateSongDatabase",
			Handler:    _Seppo_UpdateSongDatabase_Handler,
		},
		{
			MethodName: "removeSongDatabase",
			Handler:    _Seppo_RemoveSongDatabase_Handler,
		},
		{
			MethodName: "createEwDatabase",
			Handler:    _Seppo_CreateEwDatabase_Handler,
		},
		{
			MethodName: "updateEwDatabase",
			Handler:    _Seppo_UpdateEwDatabase_Handler,
		},
		{
			MethodName: "removeEwDatabase",
			Handler:    _Seppo_RemoveEwDatabase_Handler,
		},
		{
			MethodName: "createTag",
			Handler:    _Seppo_CreateTag_Handler,
		},
		{
			MethodName: "updateTag",
			Handler:    _Seppo_UpdateTag_Handler,
		},
		{
			MethodName: "removeTag",
			Handler:    _Seppo_RemoveTag_Handler,
		},
		{
			MethodName: "createLanguage",
			Handler:    _Seppo_CreateLanguage_Handler,
		},
		{
			MethodName: "updateLanguage",
			Handler:    _Seppo_UpdateLanguage_Handler,
		},
		{
			MethodName: "removeLanguage",
			Handler:    _Seppo_RemoveLanguage_Handler,
		},
		{
			MethodName: "createSchedule",
			Handler:    _Seppo_CreateSchedule_Handler,
		},
		{
			MethodName: "updateSchedule",
			Handler:    _Seppo_UpdateSchedule_Handler,
		},
		{
			MethodName: "removeSchedule",
			Handler:    _Seppo_RemoveSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seppo_service.proto",
}

func init() { proto.RegisterFile("seppo_service.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x97, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xbf, 0x6f, 0x01, 0x52, 0x47, 0xa5, 0xa5, 0x53, 0x21, 0x44, 0x16, 0x14, 0x4a, 0xff,
	0x01, 0x52, 0x90, 0x60, 0x0d, 0x8b, 0x16, 0x90, 0x2a, 0x55, 0x95, 0x70, 0xe2, 0xb2, 0x42, 0x61,
	0x1a, 0x4f, 0x5d, 0x4b, 0xc1, 0x0e, 0x1e, 0x27, 0x51, 0x37, 0x3c, 0x03, 0xef, 0xc1, 0x4b, 0x22,
	0x7b, 0x7c, 0x27, 0x77, 0x3c, 0x73, 0x27, 0x11, 0x3b, 0xe2, 0xf3, 0xcb, 0x39, 0xf7, 0x9e, 0x0c,
	0x93, 0x94, 0xed, 0x2a, 0x39, 0x9d, 0x16, 0x23, 0x25, 0xcb, 0x79, 0x36, 0x96, 0xfd, 0x69, 0x59,
	0x54, 0x05, 0xdf, 0x1c, 0xd4, 0x0f, 0x07, 0xfa, 0x59, 0x6f, 0x57, 0x15, 0x79, 0x3a, 0x4a, 0x44,
	0x25, 0xae, 0x85, 0x6a, 0x91, 0xde, 0x8e, 0x5c, 0x74, 0x1f, 0x3d, 0x90, 0x8b, 0x51, 0x8d, 0xb6,
	0x2f, 0x37, 0x2a, 0x01, 0xff, 0xdc, 0x9a, 0x88, 0x3c, 0x9d, 0x89, 0x14, 0xc8, 0x2d, 0x35, 0xbe,
	0x95, 0xc9, 0x6c, 0x02, 0xaf, 0x1f, 0xcf, 0x45, 0x99, 0x89, 0x2a, 0x2b, 0xf2, 0xd1, 0x5c, 0x96,
	0x2a, 0x2b, 0x72, 0xf0, 0x98, 0x14, 0xe0, 0xb1, 0x6d, 0x18, 0xfd, 0xe0, 0xed, 0xef, 0x1e, 0xbb,
	0xd7, 0xcc, 0xc9, 0x33, 0xc6, 0x6f, 0x64, 0x35, 0xbe, 0xbd, 0x02, 0xe2, 0xf4, 0xee, 0x3c, 0xe1,
	0xc7, 0x7d, 0xbc, 0x45, 0xff, 0xb3, 0x43, 0x44, 0xf2, 0xe7, 0x4c, 0xaa, 0xaa, 0x77, 0xb2, 0x1a,
	0x54, 0xd3, 0x22, 0x57, 0x72, 0xff, 0x3f, 0x3e, 0x66, 0x0f, 0x95, 0x14, 0x25, 0x02, 0x14, 0x3f,
	0xb4, 0xdf, 0x3f, 0xe8, 0xe8, 0x10, 0x73, 0xb4, 0x0a, 0x33, 0x21, 0x7f, 0xfe, 0x67, 0x27, 0xcd,
	0x42, 0x97, 0x72, 0x21, 0x55, 0x65, 0x98, 0x2b, 0xdd, 0xcd, 0xe9, 0x9d, 0x79, 0x72, 0x9e, 0xf0,
	0xf7, 0x9e, 0xe9, 0xd7, 0x78, 0x1f, 0x4c, 0xf5, 0xe1, 0x5f, 0xdf, 0x6e, 0xa6, 0xfd, 0xc5, 0x9e,
	0xd8, 0xed, 0x1b, 0xfe, 0x3c, 0xe1, 0xfd, 0x50, 0xb7, 0x08, 0x84, 0x71, 0xde, 0xac, 0xcd, 0x9b,
	0xfc, 0x49, 0x7d, 0x86, 0xeb, 0x2e, 0x07, 0x45, 0x9e, 0x7e, 0x6c, 0x8f, 0xa4, 0xe2, 0x27, 0xbe,
	0xba, 0x2d, 0x04, 0x32, 0x5f, 0xae, 0x41, 0x9a, 0xb4, 0x92, 0x3d, 0x6a, 0xb6, 0xc5, 0x7a, 0xb3,
	0xe9, 0x2b, 0xcf, 0xe4, 0x5d, 0x08, 0x12, 0x5f, 0xaf, 0xc5, 0x9a, 0xcc, 0x1b, 0xb6, 0xa3, 0x37,
	0xfc, 0xb4, 0x58, 0xee, 0xe7, 0x3d, 0x4e, 0x08, 0x80, 0xac, 0xe3, 0x95, 0x1c, 0x6e, 0xb2, 0xd9,
	0x6d, 0xa9, 0x36, 0x9b, 0xf9, 0xfe, 0x7f, 0xd8, 0x08, 0xd1, 0xa4, 0x97, 0x34, 0x69, 0x5f, 0x18,
	0xd3, 0x5b, 0x0d, 0x45, 0xaa, 0xf8, 0x9e, 0x6f, 0xcc, 0x5a, 0x01, 0xef, 0x67, 0x34, 0x60, 0x2c,
	0xbf, 0xb2, 0xcd, 0x66, 0x81, 0xa1, 0x48, 0x9b, 0xc9, 0x9f, 0x7b, 0xe6, 0x69, 0x35, 0xb0, 0xdd,
	0x0f, 0x21, 0xc6, 0xf8, 0x3b, 0xdb, 0xd6, 0xb3, 0x5e, 0xb4, 0x17, 0x99, 0xe2, 0x07, 0xbe, 0x79,
	0x8c, 0x0c, 0xf6, 0x87, 0x2b, 0x28, 0xfc, 0x19, 0x37, 0xa3, 0x83, 0xd6, 0xcc, 0x7f, 0xe4, 0x19,
	0x0e, 0x03, 0xc4, 0x67, 0xec, 0xe1, 0xdc, 0x4d, 0x06, 0xed, 0x15, 0x4c, 0x6c, 0x62, 0xe4, 0xe0,
	0x26, 0x88, 0x72, 0x36, 0x01, 0x8d, 0xdc, 0x04, 0x03, 0xa1, 0x4d, 0x6c, 0xce, 0x3d, 0x3f, 0x17,
	0x05, 0x75, 0x7e, 0x6a, 0x25, 0x78, 0x7e, 0x34, 0x80, 0xcb, 0x19, 0x97, 0x52, 0x54, 0xd2, 0x5c,
	0x39, 0xdd, 0x72, 0xce, 0x6c, 0x99, 0x28, 0xc7, 0xa1, 0x70, 0xc2, 0x6c, 0x9a, 0x84, 0x12, 0x62,
	0x5b, 0x26, 0x12, 0x1c, 0x0a, 0x27, 0x94, 0xf2, 0x47, 0x31, 0xa7, 0x13, 0x22, 0x5b, 0x26, 0x12,
	0x1c, 0xca, 0x24, 0x64, 0x8c, 0xeb, 0x96, 0xf0, 0x95, 0xd5, 0xfd, 0xba, 0x3d, 0x73, 0x08, 0xe2,
	0xeb, 0xd6, 0x07, 0xe2, 0x28, 0x5d, 0x57, 0x28, 0x2a, 0x76, 0x08, 0x22, 0xca, 0x07, 0xe2, 0x28,
	0xdd, 0x5b, 0x28, 0x2a, 0x72, 0x08, 0x22, 0xca, 0x07, 0xe2, 0x1f, 0x11, 0xba, 0xc0, 0xe5, 0xdd,
	0xc8, 0xbd, 0x27, 0x68, 0xa9, 0x13, 0x3f, 0x22, 0x5c, 0x0c, 0x87, 0xe8, 0xea, 0xe8, 0x90, 0xb8,
	0xa3, 0x13, 0x21, 0x2e, 0x86, 0x43, 0x74, 0x69, 0x74, 0x48, 0xd4, 0xd1, 0x89, 0x10, 0x17, 0x33,
	0x21, 0x97, 0x6c, 0x43, 0xd7, 0x35, 0x14, 0x29, 0x7f, 0xea, 0x2b, 0x60, 0x28, 0x52, 0xb0, 0xdd,
	0x23, 0x75, 0xec, 0xa7, 0x9b, 0xf1, 0xf8, 0xc5, 0x20, 0x10, 0x7e, 0x48, 0xc7, 0x7e, 0xba, 0x04,
	0x8f, 0x5f, 0x04, 0x02, 0xe1, 0x87, 0x74, 0xe3, 0xf7, 0x8d, 0x6d, 0xe9, 0x7d, 0xe1, 0x0a, 0xe7,
	0x2f, 0x7c, 0x4b, 0x81, 0x0a, 0xce, 0x07, 0x61, 0x08, 0xdb, 0xeb, 0xf5, 0x29, 0xfb, 0xd8, 0x52,
	0x09, 0xfb, 0x2e, 0x84, 0xed, 0x75, 0x1b, 0x94, 0x7d, 0x64, 0xa9, 0x84, 0x7d, 0x17, 0x72, 0xcb,
	0x81, 0x6f, 0x05, 0x7f, 0x39, 0xa0, 0x06, 0xcb, 0x59, 0x42, 0x6e, 0x39, 0x94, 0x7d, 0x6c, 0xa9,
	0xc1, 0x72, 0xfc, 0xf6, 0xed, 0x25, 0x43, 0xd8, 0x47, 0x96, 0x1a, 0x2c, 0xc7, 0xb5, 0xbf, 0xbe,
	0xdf, 0xfc, 0x65, 0xf4, 0xee, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0xf2, 0xdd, 0x68, 0xd5,
	0x0d, 0x00, 0x00,
}

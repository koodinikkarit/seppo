// Code generated by protoc-gen-go.
// source: seppo_service.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Seppo service

type SeppoClient interface {
	FetchVariationById(ctx context.Context, in *FetchVariationByIdRequest, opts ...grpc.CallOption) (*FetchVariationByIdResponse, error)
	SearchVariations(ctx context.Context, in *SearchVariationsRequest, opts ...grpc.CallOption) (*SearchVariationsResponse, error)
	ListenForChangedEwSong(ctx context.Context, in *ListenForChangedEwSongRequest, opts ...grpc.CallOption) (Seppo_ListenForChangedEwSongClient, error)
	FetchSongDatabases(ctx context.Context, in *FetchSongDatabasesRequest, opts ...grpc.CallOption) (*SongDatabasesConnection, error)
	FetchSongDatabaseById(ctx context.Context, in *FetchSongDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchSongDatabaseByIdResponse, error)
	FetchEwDatabases(ctx context.Context, in *FetchEwDatabasesRequest, opts ...grpc.CallOption) (*EwDatabasesConnection, error)
	FetchEwDatabaseById(ctx context.Context, in *FetchEwDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchEwDatabaseByIdResponse, error)
	FetchVariationsBySongDatabaseId(ctx context.Context, in *FetchVariationsBySongDatabaseIdRequest, opts ...grpc.CallOption) (*FetchVariationsBySongDatabaseIdResponse, error)
	FetchVariationTextByVariationId(ctx context.Context, in *FetchVariationTextByVariationIdRequest, opts ...grpc.CallOption) (*FetchVariationTextByVariationIdResponse, error)
	FetchTagsBySongDatabaseById(ctx context.Context, in *FetchTagsBySongDatabaseIdRequest, opts ...grpc.CallOption) (*FetchTagsBySongDatabaseIdResponse, error)
	SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...grpc.CallOption) (*TagsConnection, error)
	FetchTagById(ctx context.Context, in *FetchTagByIdRequest, opts ...grpc.CallOption) (*FetchTagByIdResponse, error)
	SearchLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...grpc.CallOption) (*LanguagesConnection, error)
	FetchLanguageById(ctx context.Context, in *FetchLanguageByIdRequest, opts ...grpc.CallOption) (*FetchLanguageByIdResponse, error)
	FetchVariationTags(ctx context.Context, in *FetchVariationTagsRequest, opts ...grpc.CallOption) (*FetchVariationTagsResponse, error)
	// rpc fetchVariationSongDatabases(FetchVariationSongDatabasesRequest) returns(FetchVariationSongDatabasesResponse) {}
	FetchTagVariations(ctx context.Context, in *FetchTagVariationsRequest, opts ...grpc.CallOption) (*FetchTagVariationsResponse, error)
	FetchTagSongDatabases(ctx context.Context, in *FetchTagSongDatabasesRequest, opts ...grpc.CallOption) (*FetchTagSongDatabasesResponse, error)
	FetchSongDatabaseTags(ctx context.Context, in *FetchSongDatabaseTagsRequest, opts ...grpc.CallOption) (*FetchSongDatabaseTagsResponse, error)
	FetchLanguageVariations(ctx context.Context, in *FetchLanguageVariationsRequest, opts ...grpc.CallOption) (*FetchLanguageVariationsResponse, error)
	CreateVariation(ctx context.Context, in *CreateVariationRequest, opts ...grpc.CallOption) (*CreateVariationResponse, error)
	UpdateVariation(ctx context.Context, in *UpdateVariationRequest, opts ...grpc.CallOption) (*UpdateVariationResponse, error)
	RemoveVariation(ctx context.Context, in *RemoveVariationRequest, opts ...grpc.CallOption) (*RemoveVariationResponse, error)
	CreateSongDatabase(ctx context.Context, in *CreateSongDatabaseRequest, opts ...grpc.CallOption) (*CreateSongDatabaseResponse, error)
	UpdateSongDatabase(ctx context.Context, in *UpdateSongDatabaseRequest, opts ...grpc.CallOption) (*UpdateSongDatabaseResponse, error)
	RemoveSongDatabase(ctx context.Context, in *RemoveSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveSongDatabaseResponse, error)
	CreateEwDatabase(ctx context.Context, in *CreateEwDatabaseRequest, opts ...grpc.CallOption) (*CreateEwDatabaseResponse, error)
	UpdateEwDatabase(ctx context.Context, in *UpdateEwDatabaseRequest, opts ...grpc.CallOption) (*UpdateEwDatabaseResponse, error)
	RemoveEwDatabase(ctx context.Context, in *RemoveEwDatabaseRequest, opts ...grpc.CallOption) (*RemoveEwDatabaseResponse, error)
	AddVariationToSongDatabase(ctx context.Context, in *AddVariationToSongDatabaseRequest, opts ...grpc.CallOption) (*AddVariationToSongDatabaseResponse, error)
	RemoveVariationFromSongDatabase(ctx context.Context, in *RemoveVariationFromSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveVariationFromSongDatabaseResponse, error)
	SyncEwDatabase(ctx context.Context, in *SyncEwDatabaseRequest, opts ...grpc.CallOption) (*SyncEwDatabaseResponse, error)
	InsertEwSongIds(ctx context.Context, in *InsertEwSongIdsRequest, opts ...grpc.CallOption) (*InsertEwSongIdsResponse, error)
	ChangeEwSongIds(ctx context.Context, in *ChangeEwSongIdsRequest, opts ...grpc.CallOption) (*ChangeEwSongIdsResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error)
	CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*CreateLanguageResponse, error)
	UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*UpdateLanguageResponse, error)
	RemoveLanguage(ctx context.Context, in *RemoveLanguageRequest, opts ...grpc.CallOption) (*RemoveLanguageResponse, error)
	AddTagToVariation(ctx context.Context, in *AddTagToVariationRequest, opts ...grpc.CallOption) (*AddTagToVariationResponse, error)
	RemoveTagFromVariation(ctx context.Context, in *RemoveTagFromVariationRequest, opts ...grpc.CallOption) (*RemoveTagFromVariationResponse, error)
	AddTagToSongDatabase(ctx context.Context, in *AddTagToSongDatabaseRequest, opts ...grpc.CallOption) (*AddTagToSongDatabaseResponse, error)
	RemoveTagFromSongDatabase(ctx context.Context, in *RemoveTagFromSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveTagFromSongDatabaseResponse, error)
}

type seppoClient struct {
	cc *grpc.ClientConn
}

func NewSeppoClient(cc *grpc.ClientConn) SeppoClient {
	return &seppoClient{cc}
}

func (c *seppoClient) FetchVariationById(ctx context.Context, in *FetchVariationByIdRequest, opts ...grpc.CallOption) (*FetchVariationByIdResponse, error) {
	out := new(FetchVariationByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchVariationById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchVariations(ctx context.Context, in *SearchVariationsRequest, opts ...grpc.CallOption) (*SearchVariationsResponse, error) {
	out := new(SearchVariationsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchVariations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) ListenForChangedEwSong(ctx context.Context, in *ListenForChangedEwSongRequest, opts ...grpc.CallOption) (Seppo_ListenForChangedEwSongClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Seppo_serviceDesc.Streams[0], c.cc, "/SeppoService.Seppo/listenForChangedEwSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &seppoListenForChangedEwSongClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Seppo_ListenForChangedEwSongClient interface {
	Recv() (*EwSong, error)
	grpc.ClientStream
}

type seppoListenForChangedEwSongClient struct {
	grpc.ClientStream
}

func (x *seppoListenForChangedEwSongClient) Recv() (*EwSong, error) {
	m := new(EwSong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seppoClient) FetchSongDatabases(ctx context.Context, in *FetchSongDatabasesRequest, opts ...grpc.CallOption) (*SongDatabasesConnection, error) {
	out := new(SongDatabasesConnection)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchSongDatabases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchSongDatabaseById(ctx context.Context, in *FetchSongDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchSongDatabaseByIdResponse, error) {
	out := new(FetchSongDatabaseByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchSongDatabaseById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchEwDatabases(ctx context.Context, in *FetchEwDatabasesRequest, opts ...grpc.CallOption) (*EwDatabasesConnection, error) {
	out := new(EwDatabasesConnection)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchEwDatabases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchEwDatabaseById(ctx context.Context, in *FetchEwDatabaseByIdRequest, opts ...grpc.CallOption) (*FetchEwDatabaseByIdResponse, error) {
	out := new(FetchEwDatabaseByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchEwDatabaseById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchVariationsBySongDatabaseId(ctx context.Context, in *FetchVariationsBySongDatabaseIdRequest, opts ...grpc.CallOption) (*FetchVariationsBySongDatabaseIdResponse, error) {
	out := new(FetchVariationsBySongDatabaseIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchVariationsBySongDatabaseId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchVariationTextByVariationId(ctx context.Context, in *FetchVariationTextByVariationIdRequest, opts ...grpc.CallOption) (*FetchVariationTextByVariationIdResponse, error) {
	out := new(FetchVariationTextByVariationIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchVariationTextByVariationId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchTagsBySongDatabaseById(ctx context.Context, in *FetchTagsBySongDatabaseIdRequest, opts ...grpc.CallOption) (*FetchTagsBySongDatabaseIdResponse, error) {
	out := new(FetchTagsBySongDatabaseIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchTagsBySongDatabaseById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchTags(ctx context.Context, in *SearchTagsRequest, opts ...grpc.CallOption) (*TagsConnection, error) {
	out := new(TagsConnection)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchTagById(ctx context.Context, in *FetchTagByIdRequest, opts ...grpc.CallOption) (*FetchTagByIdResponse, error) {
	out := new(FetchTagByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchTagById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SearchLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...grpc.CallOption) (*LanguagesConnection, error) {
	out := new(LanguagesConnection)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/searchLanguages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchLanguageById(ctx context.Context, in *FetchLanguageByIdRequest, opts ...grpc.CallOption) (*FetchLanguageByIdResponse, error) {
	out := new(FetchLanguageByIdResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchLanguageById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchVariationTags(ctx context.Context, in *FetchVariationTagsRequest, opts ...grpc.CallOption) (*FetchVariationTagsResponse, error) {
	out := new(FetchVariationTagsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchVariationTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchTagVariations(ctx context.Context, in *FetchTagVariationsRequest, opts ...grpc.CallOption) (*FetchTagVariationsResponse, error) {
	out := new(FetchTagVariationsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchTagVariations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchTagSongDatabases(ctx context.Context, in *FetchTagSongDatabasesRequest, opts ...grpc.CallOption) (*FetchTagSongDatabasesResponse, error) {
	out := new(FetchTagSongDatabasesResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchTagSongDatabases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchSongDatabaseTags(ctx context.Context, in *FetchSongDatabaseTagsRequest, opts ...grpc.CallOption) (*FetchSongDatabaseTagsResponse, error) {
	out := new(FetchSongDatabaseTagsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchSongDatabaseTags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) FetchLanguageVariations(ctx context.Context, in *FetchLanguageVariationsRequest, opts ...grpc.CallOption) (*FetchLanguageVariationsResponse, error) {
	out := new(FetchLanguageVariationsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/fetchLanguageVariations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateVariation(ctx context.Context, in *CreateVariationRequest, opts ...grpc.CallOption) (*CreateVariationResponse, error) {
	out := new(CreateVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateVariation(ctx context.Context, in *UpdateVariationRequest, opts ...grpc.CallOption) (*UpdateVariationResponse, error) {
	out := new(UpdateVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveVariation(ctx context.Context, in *RemoveVariationRequest, opts ...grpc.CallOption) (*RemoveVariationResponse, error) {
	out := new(RemoveVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateSongDatabase(ctx context.Context, in *CreateSongDatabaseRequest, opts ...grpc.CallOption) (*CreateSongDatabaseResponse, error) {
	out := new(CreateSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateSongDatabase(ctx context.Context, in *UpdateSongDatabaseRequest, opts ...grpc.CallOption) (*UpdateSongDatabaseResponse, error) {
	out := new(UpdateSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveSongDatabase(ctx context.Context, in *RemoveSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveSongDatabaseResponse, error) {
	out := new(RemoveSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateEwDatabase(ctx context.Context, in *CreateEwDatabaseRequest, opts ...grpc.CallOption) (*CreateEwDatabaseResponse, error) {
	out := new(CreateEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateEwDatabase(ctx context.Context, in *UpdateEwDatabaseRequest, opts ...grpc.CallOption) (*UpdateEwDatabaseResponse, error) {
	out := new(UpdateEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveEwDatabase(ctx context.Context, in *RemoveEwDatabaseRequest, opts ...grpc.CallOption) (*RemoveEwDatabaseResponse, error) {
	out := new(RemoveEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) AddVariationToSongDatabase(ctx context.Context, in *AddVariationToSongDatabaseRequest, opts ...grpc.CallOption) (*AddVariationToSongDatabaseResponse, error) {
	out := new(AddVariationToSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/addVariationToSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveVariationFromSongDatabase(ctx context.Context, in *RemoveVariationFromSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveVariationFromSongDatabaseResponse, error) {
	out := new(RemoveVariationFromSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeVariationFromSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) SyncEwDatabase(ctx context.Context, in *SyncEwDatabaseRequest, opts ...grpc.CallOption) (*SyncEwDatabaseResponse, error) {
	out := new(SyncEwDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/syncEwDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) InsertEwSongIds(ctx context.Context, in *InsertEwSongIdsRequest, opts ...grpc.CallOption) (*InsertEwSongIdsResponse, error) {
	out := new(InsertEwSongIdsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/insertEwSongIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) ChangeEwSongIds(ctx context.Context, in *ChangeEwSongIdsRequest, opts ...grpc.CallOption) (*ChangeEwSongIdsResponse, error) {
	out := new(ChangeEwSongIdsResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/changeEwSongIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	out := new(CreateTagResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	out := new(UpdateTagResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveTag(ctx context.Context, in *RemoveTagRequest, opts ...grpc.CallOption) (*RemoveTagResponse, error) {
	out := new(RemoveTagResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*CreateLanguageResponse, error) {
	out := new(CreateLanguageResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/createLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*UpdateLanguageResponse, error) {
	out := new(UpdateLanguageResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/updateLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveLanguage(ctx context.Context, in *RemoveLanguageRequest, opts ...grpc.CallOption) (*RemoveLanguageResponse, error) {
	out := new(RemoveLanguageResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeLanguage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) AddTagToVariation(ctx context.Context, in *AddTagToVariationRequest, opts ...grpc.CallOption) (*AddTagToVariationResponse, error) {
	out := new(AddTagToVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/addTagToVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveTagFromVariation(ctx context.Context, in *RemoveTagFromVariationRequest, opts ...grpc.CallOption) (*RemoveTagFromVariationResponse, error) {
	out := new(RemoveTagFromVariationResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeTagFromVariation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) AddTagToSongDatabase(ctx context.Context, in *AddTagToSongDatabaseRequest, opts ...grpc.CallOption) (*AddTagToSongDatabaseResponse, error) {
	out := new(AddTagToSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/addTagToSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seppoClient) RemoveTagFromSongDatabase(ctx context.Context, in *RemoveTagFromSongDatabaseRequest, opts ...grpc.CallOption) (*RemoveTagFromSongDatabaseResponse, error) {
	out := new(RemoveTagFromSongDatabaseResponse)
	err := grpc.Invoke(ctx, "/SeppoService.Seppo/removeTagFromSongDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Seppo service

type SeppoServer interface {
	FetchVariationById(context.Context, *FetchVariationByIdRequest) (*FetchVariationByIdResponse, error)
	SearchVariations(context.Context, *SearchVariationsRequest) (*SearchVariationsResponse, error)
	ListenForChangedEwSong(*ListenForChangedEwSongRequest, Seppo_ListenForChangedEwSongServer) error
	FetchSongDatabases(context.Context, *FetchSongDatabasesRequest) (*SongDatabasesConnection, error)
	FetchSongDatabaseById(context.Context, *FetchSongDatabaseByIdRequest) (*FetchSongDatabaseByIdResponse, error)
	FetchEwDatabases(context.Context, *FetchEwDatabasesRequest) (*EwDatabasesConnection, error)
	FetchEwDatabaseById(context.Context, *FetchEwDatabaseByIdRequest) (*FetchEwDatabaseByIdResponse, error)
	FetchVariationsBySongDatabaseId(context.Context, *FetchVariationsBySongDatabaseIdRequest) (*FetchVariationsBySongDatabaseIdResponse, error)
	FetchVariationTextByVariationId(context.Context, *FetchVariationTextByVariationIdRequest) (*FetchVariationTextByVariationIdResponse, error)
	FetchTagsBySongDatabaseById(context.Context, *FetchTagsBySongDatabaseIdRequest) (*FetchTagsBySongDatabaseIdResponse, error)
	SearchTags(context.Context, *SearchTagsRequest) (*TagsConnection, error)
	FetchTagById(context.Context, *FetchTagByIdRequest) (*FetchTagByIdResponse, error)
	SearchLanguages(context.Context, *SearchLanguagesRequest) (*LanguagesConnection, error)
	FetchLanguageById(context.Context, *FetchLanguageByIdRequest) (*FetchLanguageByIdResponse, error)
	FetchVariationTags(context.Context, *FetchVariationTagsRequest) (*FetchVariationTagsResponse, error)
	// rpc fetchVariationSongDatabases(FetchVariationSongDatabasesRequest) returns(FetchVariationSongDatabasesResponse) {}
	FetchTagVariations(context.Context, *FetchTagVariationsRequest) (*FetchTagVariationsResponse, error)
	FetchTagSongDatabases(context.Context, *FetchTagSongDatabasesRequest) (*FetchTagSongDatabasesResponse, error)
	FetchSongDatabaseTags(context.Context, *FetchSongDatabaseTagsRequest) (*FetchSongDatabaseTagsResponse, error)
	FetchLanguageVariations(context.Context, *FetchLanguageVariationsRequest) (*FetchLanguageVariationsResponse, error)
	CreateVariation(context.Context, *CreateVariationRequest) (*CreateVariationResponse, error)
	UpdateVariation(context.Context, *UpdateVariationRequest) (*UpdateVariationResponse, error)
	RemoveVariation(context.Context, *RemoveVariationRequest) (*RemoveVariationResponse, error)
	CreateSongDatabase(context.Context, *CreateSongDatabaseRequest) (*CreateSongDatabaseResponse, error)
	UpdateSongDatabase(context.Context, *UpdateSongDatabaseRequest) (*UpdateSongDatabaseResponse, error)
	RemoveSongDatabase(context.Context, *RemoveSongDatabaseRequest) (*RemoveSongDatabaseResponse, error)
	CreateEwDatabase(context.Context, *CreateEwDatabaseRequest) (*CreateEwDatabaseResponse, error)
	UpdateEwDatabase(context.Context, *UpdateEwDatabaseRequest) (*UpdateEwDatabaseResponse, error)
	RemoveEwDatabase(context.Context, *RemoveEwDatabaseRequest) (*RemoveEwDatabaseResponse, error)
	AddVariationToSongDatabase(context.Context, *AddVariationToSongDatabaseRequest) (*AddVariationToSongDatabaseResponse, error)
	RemoveVariationFromSongDatabase(context.Context, *RemoveVariationFromSongDatabaseRequest) (*RemoveVariationFromSongDatabaseResponse, error)
	SyncEwDatabase(context.Context, *SyncEwDatabaseRequest) (*SyncEwDatabaseResponse, error)
	InsertEwSongIds(context.Context, *InsertEwSongIdsRequest) (*InsertEwSongIdsResponse, error)
	ChangeEwSongIds(context.Context, *ChangeEwSongIdsRequest) (*ChangeEwSongIdsResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	RemoveTag(context.Context, *RemoveTagRequest) (*RemoveTagResponse, error)
	CreateLanguage(context.Context, *CreateLanguageRequest) (*CreateLanguageResponse, error)
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*UpdateLanguageResponse, error)
	RemoveLanguage(context.Context, *RemoveLanguageRequest) (*RemoveLanguageResponse, error)
	AddTagToVariation(context.Context, *AddTagToVariationRequest) (*AddTagToVariationResponse, error)
	RemoveTagFromVariation(context.Context, *RemoveTagFromVariationRequest) (*RemoveTagFromVariationResponse, error)
	AddTagToSongDatabase(context.Context, *AddTagToSongDatabaseRequest) (*AddTagToSongDatabaseResponse, error)
	RemoveTagFromSongDatabase(context.Context, *RemoveTagFromSongDatabaseRequest) (*RemoveTagFromSongDatabaseResponse, error)
}

func RegisterSeppoServer(s *grpc.Server, srv SeppoServer) {
	s.RegisterService(&_Seppo_serviceDesc, srv)
}

func _Seppo_FetchVariationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVariationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchVariationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchVariationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchVariationById(ctx, req.(*FetchVariationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchVariations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVariationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchVariations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchVariations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchVariations(ctx, req.(*SearchVariationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_ListenForChangedEwSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenForChangedEwSongRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeppoServer).ListenForChangedEwSong(m, &seppoListenForChangedEwSongServer{stream})
}

type Seppo_ListenForChangedEwSongServer interface {
	Send(*EwSong) error
	grpc.ServerStream
}

type seppoListenForChangedEwSongServer struct {
	grpc.ServerStream
}

func (x *seppoListenForChangedEwSongServer) Send(m *EwSong) error {
	return x.ServerStream.SendMsg(m)
}

func _Seppo_FetchSongDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSongDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchSongDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchSongDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchSongDatabases(ctx, req.(*FetchSongDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchSongDatabaseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSongDatabaseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchSongDatabaseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchSongDatabaseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchSongDatabaseById(ctx, req.(*FetchSongDatabaseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchEwDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEwDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchEwDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchEwDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchEwDatabases(ctx, req.(*FetchEwDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchEwDatabaseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEwDatabaseByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchEwDatabaseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchEwDatabaseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchEwDatabaseById(ctx, req.(*FetchEwDatabaseByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchVariationsBySongDatabaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVariationsBySongDatabaseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchVariationsBySongDatabaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchVariationsBySongDatabaseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchVariationsBySongDatabaseId(ctx, req.(*FetchVariationsBySongDatabaseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchVariationTextByVariationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVariationTextByVariationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchVariationTextByVariationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchVariationTextByVariationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchVariationTextByVariationId(ctx, req.(*FetchVariationTextByVariationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchTagsBySongDatabaseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTagsBySongDatabaseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchTagsBySongDatabaseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchTagsBySongDatabaseById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchTagsBySongDatabaseById(ctx, req.(*FetchTagsBySongDatabaseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchTags(ctx, req.(*SearchTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchTagById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTagByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchTagById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchTagById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchTagById(ctx, req.(*FetchTagByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SearchLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SearchLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SearchLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SearchLanguages(ctx, req.(*SearchLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchLanguageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLanguageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchLanguageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchLanguageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchLanguageById(ctx, req.(*FetchLanguageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchVariationTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchVariationTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchVariationTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchVariationTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchVariationTags(ctx, req.(*FetchVariationTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchTagVariations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTagVariationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchTagVariations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchTagVariations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchTagVariations(ctx, req.(*FetchTagVariationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchTagSongDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTagSongDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchTagSongDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchTagSongDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchTagSongDatabases(ctx, req.(*FetchTagSongDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchSongDatabaseTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSongDatabaseTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchSongDatabaseTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchSongDatabaseTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchSongDatabaseTags(ctx, req.(*FetchSongDatabaseTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_FetchLanguageVariations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLanguageVariationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).FetchLanguageVariations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/FetchLanguageVariations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).FetchLanguageVariations(ctx, req.(*FetchLanguageVariationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateVariation(ctx, req.(*CreateVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateVariation(ctx, req.(*UpdateVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveVariation(ctx, req.(*RemoveVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateSongDatabase(ctx, req.(*CreateSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateSongDatabase(ctx, req.(*UpdateSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveSongDatabase(ctx, req.(*RemoveSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateEwDatabase(ctx, req.(*CreateEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateEwDatabase(ctx, req.(*UpdateEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveEwDatabase(ctx, req.(*RemoveEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_AddVariationToSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVariationToSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).AddVariationToSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/AddVariationToSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).AddVariationToSongDatabase(ctx, req.(*AddVariationToSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveVariationFromSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVariationFromSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveVariationFromSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveVariationFromSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveVariationFromSongDatabase(ctx, req.(*RemoveVariationFromSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_SyncEwDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncEwDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).SyncEwDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/SyncEwDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).SyncEwDatabase(ctx, req.(*SyncEwDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_InsertEwSongIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertEwSongIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).InsertEwSongIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/InsertEwSongIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).InsertEwSongIds(ctx, req.(*InsertEwSongIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_ChangeEwSongIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEwSongIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).ChangeEwSongIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/ChangeEwSongIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).ChangeEwSongIds(ctx, req.(*ChangeEwSongIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveTag(ctx, req.(*RemoveTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/CreateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).CreateLanguage(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveLanguage(ctx, req.(*RemoveLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_AddTagToVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagToVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).AddTagToVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/AddTagToVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).AddTagToVariation(ctx, req.(*AddTagToVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveTagFromVariation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagFromVariationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveTagFromVariation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveTagFromVariation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveTagFromVariation(ctx, req.(*RemoveTagFromVariationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_AddTagToSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagToSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).AddTagToSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/AddTagToSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).AddTagToSongDatabase(ctx, req.(*AddTagToSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seppo_RemoveTagFromSongDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTagFromSongDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeppoServer).RemoveTagFromSongDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SeppoService.Seppo/RemoveTagFromSongDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeppoServer).RemoveTagFromSongDatabase(ctx, req.(*RemoveTagFromSongDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Seppo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SeppoService.Seppo",
	HandlerType: (*SeppoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchVariationById",
			Handler:    _Seppo_FetchVariationById_Handler,
		},
		{
			MethodName: "searchVariations",
			Handler:    _Seppo_SearchVariations_Handler,
		},
		{
			MethodName: "fetchSongDatabases",
			Handler:    _Seppo_FetchSongDatabases_Handler,
		},
		{
			MethodName: "fetchSongDatabaseById",
			Handler:    _Seppo_FetchSongDatabaseById_Handler,
		},
		{
			MethodName: "fetchEwDatabases",
			Handler:    _Seppo_FetchEwDatabases_Handler,
		},
		{
			MethodName: "fetchEwDatabaseById",
			Handler:    _Seppo_FetchEwDatabaseById_Handler,
		},
		{
			MethodName: "fetchVariationsBySongDatabaseId",
			Handler:    _Seppo_FetchVariationsBySongDatabaseId_Handler,
		},
		{
			MethodName: "fetchVariationTextByVariationId",
			Handler:    _Seppo_FetchVariationTextByVariationId_Handler,
		},
		{
			MethodName: "fetchTagsBySongDatabaseById",
			Handler:    _Seppo_FetchTagsBySongDatabaseById_Handler,
		},
		{
			MethodName: "searchTags",
			Handler:    _Seppo_SearchTags_Handler,
		},
		{
			MethodName: "fetchTagById",
			Handler:    _Seppo_FetchTagById_Handler,
		},
		{
			MethodName: "searchLanguages",
			Handler:    _Seppo_SearchLanguages_Handler,
		},
		{
			MethodName: "fetchLanguageById",
			Handler:    _Seppo_FetchLanguageById_Handler,
		},
		{
			MethodName: "fetchVariationTags",
			Handler:    _Seppo_FetchVariationTags_Handler,
		},
		{
			MethodName: "fetchTagVariations",
			Handler:    _Seppo_FetchTagVariations_Handler,
		},
		{
			MethodName: "fetchTagSongDatabases",
			Handler:    _Seppo_FetchTagSongDatabases_Handler,
		},
		{
			MethodName: "fetchSongDatabaseTags",
			Handler:    _Seppo_FetchSongDatabaseTags_Handler,
		},
		{
			MethodName: "fetchLanguageVariations",
			Handler:    _Seppo_FetchLanguageVariations_Handler,
		},
		{
			MethodName: "createVariation",
			Handler:    _Seppo_CreateVariation_Handler,
		},
		{
			MethodName: "updateVariation",
			Handler:    _Seppo_UpdateVariation_Handler,
		},
		{
			MethodName: "removeVariation",
			Handler:    _Seppo_RemoveVariation_Handler,
		},
		{
			MethodName: "createSongDatabase",
			Handler:    _Seppo_CreateSongDatabase_Handler,
		},
		{
			MethodName: "updateSongDatabase",
			Handler:    _Seppo_UpdateSongDatabase_Handler,
		},
		{
			MethodName: "removeSongDatabase",
			Handler:    _Seppo_RemoveSongDatabase_Handler,
		},
		{
			MethodName: "createEwDatabase",
			Handler:    _Seppo_CreateEwDatabase_Handler,
		},
		{
			MethodName: "updateEwDatabase",
			Handler:    _Seppo_UpdateEwDatabase_Handler,
		},
		{
			MethodName: "removeEwDatabase",
			Handler:    _Seppo_RemoveEwDatabase_Handler,
		},
		{
			MethodName: "addVariationToSongDatabase",
			Handler:    _Seppo_AddVariationToSongDatabase_Handler,
		},
		{
			MethodName: "removeVariationFromSongDatabase",
			Handler:    _Seppo_RemoveVariationFromSongDatabase_Handler,
		},
		{
			MethodName: "syncEwDatabase",
			Handler:    _Seppo_SyncEwDatabase_Handler,
		},
		{
			MethodName: "insertEwSongIds",
			Handler:    _Seppo_InsertEwSongIds_Handler,
		},
		{
			MethodName: "changeEwSongIds",
			Handler:    _Seppo_ChangeEwSongIds_Handler,
		},
		{
			MethodName: "createTag",
			Handler:    _Seppo_CreateTag_Handler,
		},
		{
			MethodName: "updateTag",
			Handler:    _Seppo_UpdateTag_Handler,
		},
		{
			MethodName: "removeTag",
			Handler:    _Seppo_RemoveTag_Handler,
		},
		{
			MethodName: "createLanguage",
			Handler:    _Seppo_CreateLanguage_Handler,
		},
		{
			MethodName: "updateLanguage",
			Handler:    _Seppo_UpdateLanguage_Handler,
		},
		{
			MethodName: "removeLanguage",
			Handler:    _Seppo_RemoveLanguage_Handler,
		},
		{
			MethodName: "addTagToVariation",
			Handler:    _Seppo_AddTagToVariation_Handler,
		},
		{
			MethodName: "removeTagFromVariation",
			Handler:    _Seppo_RemoveTagFromVariation_Handler,
		},
		{
			MethodName: "addTagToSongDatabase",
			Handler:    _Seppo_AddTagToSongDatabase_Handler,
		},
		{
			MethodName: "removeTagFromSongDatabase",
			Handler:    _Seppo_RemoveTagFromSongDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listenForChangedEwSong",
			Handler:       _Seppo_ListenForChangedEwSong_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "seppo_service.proto",
}

func init() { proto.RegisterFile("seppo_service.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 979 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0xc7, 0xc9, 0xc5, 0xae, 0xc4, 0x88, 0xe5, 0xc3, 0x61, 0x41, 0x64, 0x3f, 0xd0, 0x86, 0xaf,
	0x40, 0xd8, 0x80, 0x76, 0xe9, 0x03, 0x94, 0x14, 0xa4, 0x48, 0xb4, 0x17, 0x89, 0xd3, 0xde, 0xb4,
	0x4a, 0x87, 0x78, 0x62, 0x22, 0x81, 0x9d, 0x7a, 0x9c, 0x84, 0xdc, 0x54, 0xed, 0x1b, 0xf4, 0x11,
	0xfb, 0x28, 0x95, 0x3d, 0x99, 0xf1, 0x99, 0x2f, 0xdb, 0xbd, 0xc4, 0xff, 0xdf, 0x9c, 0xff, 0x39,
	0xc7, 0xc7, 0xc7, 0x0e, 0xa8, 0x4a, 0xc9, 0x64, 0x12, 0x0e, 0x28, 0x89, 0x66, 0xe3, 0x21, 0x69,
	0x4d, 0xa2, 0x30, 0x0e, 0x9d, 0xb5, 0x5e, 0x72, 0xb1, 0xc7, 0xae, 0xd5, 0xaa, 0x34, 0x0c, 0xfc,
	0x81, 0x87, 0x63, 0x7c, 0x8f, 0xe9, 0x12, 0xa9, 0xfd, 0x25, 0x5d, 0x1c, 0xcc, 0x70, 0x34, 0xc6,
	0xf1, 0x38, 0x0c, 0x96, 0xf2, 0x16, 0x99, 0xab, 0x27, 0x7e, 0x23, 0xf3, 0x41, 0x72, 0x68, 0xf9,
	0xe7, 0x3a, 0x99, 0x0f, 0x66, 0x24, 0x12, 0xf2, 0x6a, 0x8c, 0x85, 0xf4, 0x88, 0x03, 0x7f, 0x8a,
	0x7d, 0x2e, 0x6d, 0xa8, 0xd1, 0xb7, 0xc5, 0x85, 0x41, 0x4c, 0x9e, 0xe3, 0xe5, 0xd5, 0x6a, 0x8c,
	0x7d, 0x2d, 0x91, 0x5d, 0x39, 0xcf, 0xcc, 0x64, 0x8f, 0x9b, 0x64, 0x47, 0x28, 0x93, 0xfe, 0xfb,
	0x7e, 0x80, 0x7e, 0x49, 0x3b, 0xe0, 0x8c, 0x91, 0x33, 0x22, 0xf1, 0xf0, 0xe1, 0x2d, 0x47, 0xae,
	0x17, 0x1d, 0xcf, 0x39, 0x69, 0xc1, 0xfe, 0xb4, 0x6e, 0x35, 0xa2, 0x4b, 0x3e, 0x4d, 0x09, 0x8d,
	0x6b, 0x8d, 0x62, 0x90, 0x4e, 0xc2, 0x80, 0x92, 0xfa, 0x8a, 0x33, 0x44, 0x9b, 0x94, 0xe0, 0x08,
	0x00, 0xd4, 0x39, 0x92, 0xcf, 0xf7, 0x14, 0x9d, 0xdb, 0x1c, 0x17, 0x61, 0xc2, 0x64, 0x80, 0x76,
	0x1e, 0xc7, 0x34, 0x26, 0xc1, 0x6d, 0x18, 0xb5, 0x1f, 0x70, 0xe0, 0x13, 0xef, 0x66, 0xde, 0x0b,
	0x03, 0xdf, 0x69, 0xca, 0x31, 0xee, 0x8c, 0x14, 0x37, 0xdc, 0x96, 0x61, 0x26, 0xd6, 0x57, 0x2e,
	0x2b, 0xce, 0x68, 0xd9, 0xb0, 0xe4, 0xc2, 0xab, 0x65, 0xd3, 0xa9, 0xb1, 0x61, 0x12, 0xc1, 0x03,
	0xab, 0x05, 0x43, 0xa6, 0x1d, 0x06, 0x01, 0x19, 0x26, 0x15, 0xd5, 0x57, 0x9c, 0x08, 0xfd, 0xae,
	0xf9, 0xa4, 0xf7, 0xe6, 0xac, 0xc0, 0x0a, 0xde, 0x9e, 0x66, 0x29, 0x56, 0x34, 0xef, 0x23, 0xda,
	0x4c, 0x3d, 0x6f, 0xe6, 0x59, 0x65, 0x47, 0x86, 0x10, 0x40, 0xe7, 0x4e, 0x07, 0x6a, 0xc3, 0xcc,
	0x55, 0x3d, 0xa2, 0xaa, 0xe2, 0x90, 0xd6, 0xd4, 0xc8, 0x35, 0x81, 0x15, 0x9d, 0x96, 0x20, 0x45,
	0x3d, 0xdf, 0x2a, 0x68, 0x5f, 0x9e, 0x6e, 0x7a, 0xbd, 0x80, 0xf5, 0x77, 0x3c, 0xe7, 0x2a, 0x6f,
	0x82, 0x35, 0x9c, 0xa7, 0xf1, 0xe2, 0x27, 0x4f, 0xe5, 0xa4, 0xe4, 0x92, 0xe7, 0xf8, 0x7a, 0x21,
	0xfe, 0x2c, 0x4a, 0x49, 0xc3, 0x4b, 0xa5, 0x64, 0x38, 0x25, 0x52, 0xfa, 0x52, 0x41, 0x7f, 0xa4,
	0x29, 0xb9, 0xd8, 0x57, 0x52, 0x4f, 0x6f, 0x4e, 0xcb, 0x10, 0x58, 0x47, 0xb3, 0x44, 0x2e, 0x4a,
	0xf3, 0x22, 0x85, 0xd7, 0x08, 0xb1, 0xd5, 0x90, 0x70, 0xce, 0xbe, 0xe9, 0x69, 0x4f, 0x14, 0xee,
	0xf0, 0xa7, 0x0c, 0x24, 0x92, 0x34, 0x65, 0xef, 0xd0, 0x1a, 0x2f, 0x28, 0xad, 0xe0, 0x1f, 0x73,
	0x46, 0x70, 0xae, 0xea, 0x79, 0x88, 0xc8, 0xf3, 0x3d, 0xda, 0x60, 0x79, 0xde, 0x2d, 0x57, 0x2b,
	0x75, 0x0e, 0x4d, 0xc9, 0x0a, 0x99, 0x87, 0x57, 0x32, 0x10, 0xba, 0x94, 0xf6, 0x08, 0x6d, 0xa5,
	0x69, 0x73, 0x35, 0xcd, 0xfd, 0xd8, 0x90, 0x18, 0x04, 0xb8, 0xc3, 0x49, 0x21, 0x27, 0xaa, 0xd0,
	0x76, 0x7e, 0xda, 0xf5, 0xdc, 0x9d, 0x0f, 0xbb, 0xdf, 0x28, 0x06, 0x35, 0x2b, 0x17, 0xfb, 0x60,
	0xeb, 0x9f, 0x98, 0x9b, 0xad, 0xef, 0xfd, 0x46, 0x31, 0x28, 0xac, 0xf8, 0xc2, 0x74, 0xb1, 0x2f,
	0xef, 0xe6, 0x33, 0x73, 0x10, 0xe3, 0x7a, 0x6e, 0x96, 0x62, 0x35, 0x4f, 0xa8, 0xa7, 0xcd, 0x2c,
	0x5a, 0xd2, 0xb0, 0x9f, 0xcd, 0x52, 0xac, 0xf0, 0x7c, 0x46, 0xbb, 0xd2, 0x94, 0x80, 0xbe, 0x9e,
	0xe7, 0xcc, 0x80, 0xde, 0xdc, 0x7f, 0x4b, 0xd2, 0xe0, 0xf5, 0xb0, 0x31, 0x8c, 0x08, 0x8e, 0x33,
	0x55, 0x9d, 0xfe, 0xb6, 0x2c, 0x5b, 0x5e, 0x7a, 0x1a, 0x05, 0x1d, 0xa6, 0x13, 0x2f, 0xcf, 0xa1,
	0x2f, 0xcb, 0x16, 0x07, 0x8d, 0x82, 0x0e, 0x11, 0x79, 0x0a, 0x67, 0x76, 0x87, 0xae, 0x2c, 0x5b,
	0x1c, 0x34, 0x0a, 0x8e, 0x3c, 0xeb, 0x12, 0xbc, 0x87, 0xea, 0xc8, 0xb7, 0x35, 0xc2, 0x32, 0xf2,
	0x26, 0x10, 0x5a, 0xb1, 0x76, 0xe5, 0x59, 0xf5, 0x35, 0xc2, 0x62, 0x65, 0x02, 0xa1, 0x15, 0xeb,
	0x5b, 0x9e, 0x55, 0x57, 0x23, 0x2c, 0x56, 0x26, 0x10, 0x7e, 0x27, 0xb2, 0x06, 0x66, 0xef, 0x75,
	0xc7, 0x38, 0x41, 0x99, 0x6e, 0xf9, 0x4e, 0xd4, 0x31, 0x68, 0xc2, 0x5a, 0x67, 0x37, 0xe9, 0x2b,
	0xba, 0xc5, 0x44, 0xc7, 0xa0, 0x09, 0x6b, 0x9a, 0xdd, 0xa4, 0xab, 0xe8, 0x16, 0x13, 0x1d, 0x13,
	0x26, 0x5f, 0x2b, 0xa8, 0x86, 0x3d, 0x2f, 0xdb, 0xc0, 0xa1, 0x74, 0x8b, 0x94, 0xb7, 0xf1, 0x4b,
	0x2b, 0xc9, 0x9d, 0x2f, 0xcb, 0x1f, 0x90, 0xbe, 0x6a, 0x94, 0xc7, 0xea, 0x36, 0x0a, 0x9f, 0xa4,
	0x44, 0xae, 0x72, 0x1f, 0x20, 0x15, 0xb7, 0x7c, 0xd5, 0x14, 0x9e, 0x12, 0x29, 0x7d, 0x40, 0xeb,
	0x74, 0x11, 0x0c, 0x41, 0xe7, 0x95, 0x4f, 0xd4, 0x9e, 0xa4, 0x72, 0xbf, 0xc3, 0x7c, 0x08, 0xee,
	0x91, 0x71, 0x40, 0x49, 0x14, 0xb3, 0x9f, 0x06, 0x1d, 0x4f, 0xfb, 0x12, 0xe8, 0xc8, 0xb2, 0x65,
	0x8f, 0x68, 0x94, 0xb4, 0x6d, 0xd3, 0x9f, 0x26, 0x56, 0x87, 0xb6, 0x2c, 0xdb, 0xb6, 0xad, 0x4a,
	0x09, 0x87, 0x37, 0x68, 0x95, 0x3d, 0x68, 0x2e, 0xf6, 0x9d, 0xbf, 0x4d, 0x8f, 0x8e, 0x8b, 0xc5,
	0x2f, 0xa2, 0x7d, 0xab, 0x0e, 0xe3, 0xb1, 0x67, 0xca, 0x10, 0xaf, 0xcf, 0x05, 0x4b, 0x3c, 0xa0,
	0xc3, 0x78, 0x6c, 0xa8, 0x0c, 0xf1, 0xba, 0x5c, 0xb0, 0xc4, 0x03, 0x3a, 0x1c, 0x09, 0x56, 0x2f,
	0x7f, 0xcb, 0xa9, 0x23, 0xd1, 0x96, 0x54, 0xcb, 0x48, 0xa8, 0x10, 0x0c, 0xcf, 0xca, 0xb7, 0x85,
	0xef, 0x4b, 0xaa, 0x25, 0xbc, 0x0a, 0xc1, 0xf0, 0xac, 0x1b, 0xb6, 0xf0, 0x5d, 0x49, 0xb5, 0x84,
	0x57, 0x21, 0x11, 0x7e, 0x84, 0xb6, 0xb0, 0xe7, 0xb9, 0xd8, 0x77, 0xc3, 0xec, 0xd5, 0x78, 0xac,
	0xed, 0x02, 0x19, 0xb0, 0x7c, 0x7c, 0x1a, 0x38, 0xe1, 0x33, 0x45, 0x3b, 0xe2, 0xa6, 0x26, 0x8f,
	0x6f, 0x66, 0xd6, 0xb4, 0xdc, 0x41, 0x89, 0xe2, 0x8e, 0xe7, 0xe5, 0x60, 0x61, 0x1b, 0xa2, 0x6d,
	0x5e, 0x9e, 0xb4, 0x95, 0x4e, 0xcd, 0x99, 0x9b, 0x56, 0xd1, 0x59, 0x19, 0x54, 0x18, 0x7e, 0x46,
	0x7b, 0x52, 0x9d, 0x92, 0x6b, 0x2b, 0x27, 0x7b, 0x93, 0xf5, 0x45, 0x69, 0x9e, 0xfb, 0xdf, 0xff,
	0x9a, 0xfe, 0xa7, 0xe7, 0xff, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x74, 0x85, 0xbc, 0xff,
	0x12, 0x00, 0x00,
}

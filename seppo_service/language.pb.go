// Code generated by protoc-gen-go.
// source: language.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Language struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Language) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LanguagesConnection struct {
	Languages    []*Language `protobuf:"bytes,1,rep,name=languages" json:"languages,omitempty"`
	MaxLanguages uint32      `protobuf:"varint,2,opt,name=maxLanguages" json:"maxLanguages,omitempty"`
}

func (m *LanguagesConnection) Reset()                    { *m = LanguagesConnection{} }
func (m *LanguagesConnection) String() string            { return proto.CompactTextString(m) }
func (*LanguagesConnection) ProtoMessage()               {}
func (*LanguagesConnection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *LanguagesConnection) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *LanguagesConnection) GetMaxLanguages() uint32 {
	if m != nil {
		return m.MaxLanguages
	}
	return 0
}

type SearchLanguagesRequest struct {
}

func (m *SearchLanguagesRequest) Reset()                    { *m = SearchLanguagesRequest{} }
func (m *SearchLanguagesRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchLanguagesRequest) ProtoMessage()               {}
func (*SearchLanguagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type FetchLanguageByIdRequest struct {
	LanguageIds []uint32 `protobuf:"varint,1,rep,packed,name=languageIds" json:"languageIds,omitempty"`
}

func (m *FetchLanguageByIdRequest) Reset()                    { *m = FetchLanguageByIdRequest{} }
func (m *FetchLanguageByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchLanguageByIdRequest) ProtoMessage()               {}
func (*FetchLanguageByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *FetchLanguageByIdRequest) GetLanguageIds() []uint32 {
	if m != nil {
		return m.LanguageIds
	}
	return nil
}

type FetchLanguageByIdResponse struct {
	Languages []*Language `protobuf:"bytes,1,rep,name=languages" json:"languages,omitempty"`
}

func (m *FetchLanguageByIdResponse) Reset()                    { *m = FetchLanguageByIdResponse{} }
func (m *FetchLanguageByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchLanguageByIdResponse) ProtoMessage()               {}
func (*FetchLanguageByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *FetchLanguageByIdResponse) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

type CreateLanguageRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateLanguageRequest) Reset()                    { *m = CreateLanguageRequest{} }
func (m *CreateLanguageRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateLanguageRequest) ProtoMessage()               {}
func (*CreateLanguageRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *CreateLanguageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateLanguageResponse struct {
	Language *Language `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
}

func (m *CreateLanguageResponse) Reset()                    { *m = CreateLanguageResponse{} }
func (m *CreateLanguageResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateLanguageResponse) ProtoMessage()               {}
func (*CreateLanguageResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *CreateLanguageResponse) GetLanguage() *Language {
	if m != nil {
		return m.Language
	}
	return nil
}

type EditLanguageRequest struct {
	LanguageId uint32 `protobuf:"varint,1,opt,name=languageId" json:"languageId,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *EditLanguageRequest) Reset()                    { *m = EditLanguageRequest{} }
func (m *EditLanguageRequest) String() string            { return proto.CompactTextString(m) }
func (*EditLanguageRequest) ProtoMessage()               {}
func (*EditLanguageRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *EditLanguageRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

func (m *EditLanguageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EditLanguageResponse struct {
	Language *Language `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
}

func (m *EditLanguageResponse) Reset()                    { *m = EditLanguageResponse{} }
func (m *EditLanguageResponse) String() string            { return proto.CompactTextString(m) }
func (*EditLanguageResponse) ProtoMessage()               {}
func (*EditLanguageResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *EditLanguageResponse) GetLanguage() *Language {
	if m != nil {
		return m.Language
	}
	return nil
}

type RemoveLanguageRequest struct {
	LanguageId uint32 `protobuf:"varint,1,opt,name=languageId" json:"languageId,omitempty"`
}

func (m *RemoveLanguageRequest) Reset()                    { *m = RemoveLanguageRequest{} }
func (m *RemoveLanguageRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveLanguageRequest) ProtoMessage()               {}
func (*RemoveLanguageRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *RemoveLanguageRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

type RemoveLanguageResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RemoveLanguageResponse) Reset()                    { *m = RemoveLanguageResponse{} }
func (m *RemoveLanguageResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveLanguageResponse) ProtoMessage()               {}
func (*RemoveLanguageResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *RemoveLanguageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Language)(nil), "SeppoService.Language")
	proto.RegisterType((*LanguagesConnection)(nil), "SeppoService.LanguagesConnection")
	proto.RegisterType((*SearchLanguagesRequest)(nil), "SeppoService.SearchLanguagesRequest")
	proto.RegisterType((*FetchLanguageByIdRequest)(nil), "SeppoService.FetchLanguageByIdRequest")
	proto.RegisterType((*FetchLanguageByIdResponse)(nil), "SeppoService.FetchLanguageByIdResponse")
	proto.RegisterType((*CreateLanguageRequest)(nil), "SeppoService.CreateLanguageRequest")
	proto.RegisterType((*CreateLanguageResponse)(nil), "SeppoService.CreateLanguageResponse")
	proto.RegisterType((*EditLanguageRequest)(nil), "SeppoService.EditLanguageRequest")
	proto.RegisterType((*EditLanguageResponse)(nil), "SeppoService.EditLanguageResponse")
	proto.RegisterType((*RemoveLanguageRequest)(nil), "SeppoService.RemoveLanguageRequest")
	proto.RegisterType((*RemoveLanguageResponse)(nil), "SeppoService.RemoveLanguageResponse")
}

func init() { proto.RegisterFile("language.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4f, 0x4b, 0xfb, 0x30,
	0x18, 0xa6, 0xfb, 0xfd, 0xd0, 0xed, 0xdd, 0x9f, 0x43, 0xe6, 0x4a, 0xbc, 0x48, 0xc9, 0x69, 0x20,
	0xf4, 0x50, 0x05, 0x2f, 0x9e, 0x1c, 0x0a, 0x95, 0x5d, 0x4c, 0x3f, 0x41, 0x6c, 0x5f, 0x66, 0xc1,
	0x26, 0xb5, 0x49, 0x87, 0x7e, 0x7b, 0xa1, 0x26, 0x6d, 0x57, 0xe6, 0x41, 0xbd, 0xb5, 0xcf, 0x9f,
	0xf7, 0x79, 0x92, 0x37, 0xb0, 0x78, 0x15, 0x72, 0x57, 0x8b, 0x1d, 0x86, 0x65, 0xa5, 0x8c, 0x22,
	0xb3, 0x04, 0xcb, 0x52, 0x25, 0x58, 0xed, 0xf3, 0x14, 0x59, 0x08, 0xe3, 0xad, 0xe5, 0xc9, 0x02,
	0x46, 0x79, 0x46, 0xbd, 0xc0, 0x5b, 0xcf, 0xf9, 0x28, 0xcf, 0x08, 0x81, 0xff, 0x52, 0x14, 0x48,
	0x47, 0x81, 0xb7, 0x9e, 0xf0, 0xe6, 0x9b, 0x29, 0x58, 0x3a, 0xbd, 0xde, 0x28, 0x29, 0x31, 0x35,
	0xb9, 0x92, 0xe4, 0x1a, 0x26, 0x2e, 0x46, 0x53, 0x2f, 0xf8, 0xb7, 0x9e, 0x46, 0x7e, 0xd8, 0x0f,
	0x0a, 0x9d, 0x8b, 0x77, 0x42, 0xc2, 0x60, 0x56, 0x88, 0xf7, 0x76, 0x5e, 0x13, 0x34, 0xe7, 0x07,
	0x18, 0xa3, 0xe0, 0x27, 0x28, 0xaa, 0xf4, 0xa5, 0x85, 0x38, 0xbe, 0xd5, 0xa8, 0x0d, 0xbb, 0x05,
	0xfa, 0x80, 0xa6, 0x23, 0xee, 0x3e, 0xe2, 0xcc, 0x72, 0x24, 0x80, 0xa9, 0x8b, 0x89, 0xb3, 0xaf,
	0x46, 0x73, 0xde, 0x87, 0xd8, 0x13, 0x9c, 0x1f, 0x71, 0xeb, 0x52, 0x49, 0x8d, 0xbf, 0x3b, 0x0e,
	0xbb, 0x84, 0xd5, 0xa6, 0x42, 0x61, 0xb0, 0x25, 0x6d, 0x1b, 0x77, 0x91, 0x5e, 0xef, 0x22, 0xb7,
	0xe0, 0x0f, 0xc5, 0x36, 0x3c, 0x82, 0xb1, 0x9b, 0xd9, 0x38, 0xbe, 0xcf, 0x6e, 0x75, 0x2c, 0x86,
	0xe5, 0x7d, 0x96, 0x9b, 0x61, 0xf0, 0x05, 0x40, 0x77, 0x66, 0xbb, 0xd9, 0x1e, 0x72, 0x74, 0xc3,
	0x8f, 0x70, 0x76, 0x38, 0xea, 0x0f, 0xb5, 0x6e, 0x60, 0xc5, 0xb1, 0x50, 0x7b, 0xfc, 0x61, 0x31,
	0x16, 0x81, 0x3f, 0x34, 0xda, 0x1a, 0x14, 0x4e, 0x75, 0x9d, 0xa6, 0xa8, 0x75, 0x63, 0x1b, 0x73,
	0xf7, 0xfb, 0x7c, 0xd2, 0xbc, 0xef, 0xab, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x10, 0x0e,
	0x44, 0xf1, 0x02, 0x00, 0x00,
}

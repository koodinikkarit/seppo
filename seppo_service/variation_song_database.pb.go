// Code generated by protoc-gen-go.
// source: variation_song_database.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VariationSongDatabases struct {
	VariationId   uint32          `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
	SongDatabases []*SongDatabase `protobuf:"bytes,2,rep,name=songDatabases" json:"songDatabases,omitempty"`
}

func (m *VariationSongDatabases) Reset()                    { *m = VariationSongDatabases{} }
func (m *VariationSongDatabases) String() string            { return proto.CompactTextString(m) }
func (*VariationSongDatabases) ProtoMessage()               {}
func (*VariationSongDatabases) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *VariationSongDatabases) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

func (m *VariationSongDatabases) GetSongDatabases() []*SongDatabase {
	if m != nil {
		return m.SongDatabases
	}
	return nil
}

type FetchVariationSongDatabasesRequest struct {
	VariationIds []uint32 `protobuf:"varint,1,rep,packed,name=variationIds" json:"variationIds,omitempty"`
}

func (m *FetchVariationSongDatabasesRequest) Reset()         { *m = FetchVariationSongDatabasesRequest{} }
func (m *FetchVariationSongDatabasesRequest) String() string { return proto.CompactTextString(m) }
func (*FetchVariationSongDatabasesRequest) ProtoMessage()    {}
func (*FetchVariationSongDatabasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor14, []int{1}
}

func (m *FetchVariationSongDatabasesRequest) GetVariationIds() []uint32 {
	if m != nil {
		return m.VariationIds
	}
	return nil
}

type FetchVariationSongDatabasesResponse struct {
	VariationSongDatabases []*VariationSongDatabases `protobuf:"bytes,1,rep,name=variationSongDatabases" json:"variationSongDatabases,omitempty"`
}

func (m *FetchVariationSongDatabasesResponse) Reset()         { *m = FetchVariationSongDatabasesResponse{} }
func (m *FetchVariationSongDatabasesResponse) String() string { return proto.CompactTextString(m) }
func (*FetchVariationSongDatabasesResponse) ProtoMessage()    {}
func (*FetchVariationSongDatabasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor14, []int{2}
}

func (m *FetchVariationSongDatabasesResponse) GetVariationSongDatabases() []*VariationSongDatabases {
	if m != nil {
		return m.VariationSongDatabases
	}
	return nil
}

func init() {
	proto.RegisterType((*VariationSongDatabases)(nil), "SeppoService.VariationSongDatabases")
	proto.RegisterType((*FetchVariationSongDatabasesRequest)(nil), "SeppoService.FetchVariationSongDatabasesRequest")
	proto.RegisterType((*FetchVariationSongDatabasesResponse)(nil), "SeppoService.FetchVariationSongDatabasesResponse")
}

func init() { proto.RegisterFile("variation_song_database.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x4b, 0x2c, 0xca,
	0x4c, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0xce, 0xcf, 0x4b, 0x8f, 0x4f, 0x49, 0x2c, 0x49, 0x4c,
	0x4a, 0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x09, 0x4e, 0x2d, 0x28, 0xc8,
	0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x95, 0x12, 0xc6, 0xa2, 0x44, 0xa9, 0x86, 0x4b, 0x2c,
	0x0c, 0x66, 0x46, 0x70, 0x7e, 0x5e, 0xba, 0x0b, 0x54, 0xba, 0x58, 0x48, 0x81, 0x8b, 0x1b, 0x6e,
	0xba, 0x67, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0xb2, 0x90, 0x90, 0x03, 0x17, 0x6f,
	0x31, 0xb2, 0x16, 0x09, 0x26, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x29, 0x3d, 0x64, 0x6b, 0xf5, 0x90,
	0x4d, 0x0d, 0x42, 0xd5, 0xa0, 0xe4, 0xc1, 0xa5, 0xe4, 0x96, 0x5a, 0x92, 0x9c, 0x81, 0xdd, 0x09,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x4a, 0x5c, 0x3c, 0x48, 0xd6, 0x16, 0x4b, 0x30,
	0x2a, 0x30, 0x6b, 0xf0, 0x06, 0xa1, 0x88, 0x29, 0x35, 0x33, 0x72, 0x29, 0xe3, 0x35, 0xaa, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x28, 0x86, 0x4b, 0xac, 0x0c, 0xab, 0x0a, 0xb0, 0xa9, 0xdc, 0x46,
	0x2a, 0xa8, 0x8e, 0xc7, 0x61, 0x1a, 0x0e, 0x33, 0x92, 0xd8, 0xc0, 0x81, 0x6a, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0x95, 0xd3, 0x47, 0x98, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: variation.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Variation struct {
	Id                 uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SongId             uint32 `protobuf:"varint,3,opt,name=songId" json:"songId,omitempty"`
	Version            uint64 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	LanguageId         uint32 `protobuf:"varint,6,opt,name=languageId" json:"languageId,omitempty"`
	VariationVersionId uint32 `protobuf:"varint,7,opt,name=variationVersionId" json:"variationVersionId,omitempty"`
}

func (m *Variation) Reset()                    { *m = Variation{} }
func (m *Variation) String() string            { return proto.CompactTextString(m) }
func (*Variation) ProtoMessage()               {}
func (*Variation) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *Variation) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Variation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Variation) GetSongId() uint32 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *Variation) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Variation) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

func (m *Variation) GetVariationVersionId() uint32 {
	if m != nil {
		return m.VariationVersionId
	}
	return 0
}

type SearchVariationsRequest struct {
	SearchWord           string   `protobuf:"bytes,1,opt,name=searchWord" json:"searchWord,omitempty"`
	SongDatabaseId       uint32   `protobuf:"varint,2,opt,name=songDatabaseId" json:"songDatabaseId,omitempty"`
	SongDatabaseFilterId uint32   `protobuf:"varint,3,opt,name=songDatabaseFilterId" json:"songDatabaseFilterId,omitempty"`
	TagId                uint32   `protobuf:"varint,4,opt,name=tagId" json:"tagId,omitempty"`
	LanguageId           uint32   `protobuf:"varint,5,opt,name=languageId" json:"languageId,omitempty"`
	Offset               uint32   `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	Limit                uint32   `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	ScheduleId           uint32   `protobuf:"varint,8,opt,name=scheduleId" json:"scheduleId,omitempty"`
	SkipVariationIds     []uint32 `protobuf:"varint,9,rep,packed,name=skipVariationIds" json:"skipVariationIds,omitempty"`
	OrderBy              uint32   `protobuf:"varint,10,opt,name=orderBy" json:"orderBy,omitempty"`
	SearchFrom           uint32   `protobuf:"varint,11,opt,name=searchFrom" json:"searchFrom,omitempty"`
}

func (m *SearchVariationsRequest) Reset()                    { *m = SearchVariationsRequest{} }
func (m *SearchVariationsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchVariationsRequest) ProtoMessage()               {}
func (*SearchVariationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *SearchVariationsRequest) GetSearchWord() string {
	if m != nil {
		return m.SearchWord
	}
	return ""
}

func (m *SearchVariationsRequest) GetSongDatabaseId() uint32 {
	if m != nil {
		return m.SongDatabaseId
	}
	return 0
}

func (m *SearchVariationsRequest) GetSongDatabaseFilterId() uint32 {
	if m != nil {
		return m.SongDatabaseFilterId
	}
	return 0
}

func (m *SearchVariationsRequest) GetTagId() uint32 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *SearchVariationsRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

func (m *SearchVariationsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchVariationsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchVariationsRequest) GetScheduleId() uint32 {
	if m != nil {
		return m.ScheduleId
	}
	return 0
}

func (m *SearchVariationsRequest) GetSkipVariationIds() []uint32 {
	if m != nil {
		return m.SkipVariationIds
	}
	return nil
}

func (m *SearchVariationsRequest) GetOrderBy() uint32 {
	if m != nil {
		return m.OrderBy
	}
	return 0
}

func (m *SearchVariationsRequest) GetSearchFrom() uint32 {
	if m != nil {
		return m.SearchFrom
	}
	return 0
}

type SearchVariationsResponse struct {
	Variations    []*Variation `protobuf:"bytes,1,rep,name=variations" json:"variations,omitempty"`
	MaxVariations uint32       `protobuf:"varint,2,opt,name=maxVariations" json:"maxVariations,omitempty"`
}

func (m *SearchVariationsResponse) Reset()                    { *m = SearchVariationsResponse{} }
func (m *SearchVariationsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchVariationsResponse) ProtoMessage()               {}
func (*SearchVariationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *SearchVariationsResponse) GetVariations() []*Variation {
	if m != nil {
		return m.Variations
	}
	return nil
}

func (m *SearchVariationsResponse) GetMaxVariations() uint32 {
	if m != nil {
		return m.MaxVariations
	}
	return 0
}

type FetchVariationByIdRequest struct {
	VariationIds []uint32 `protobuf:"varint,1,rep,packed,name=variationIds" json:"variationIds,omitempty"`
}

func (m *FetchVariationByIdRequest) Reset()                    { *m = FetchVariationByIdRequest{} }
func (m *FetchVariationByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchVariationByIdRequest) ProtoMessage()               {}
func (*FetchVariationByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *FetchVariationByIdRequest) GetVariationIds() []uint32 {
	if m != nil {
		return m.VariationIds
	}
	return nil
}

type FetchVariationByIdResponse struct {
	Variations []*Variation `protobuf:"bytes,1,rep,name=variations" json:"variations,omitempty"`
}

func (m *FetchVariationByIdResponse) Reset()                    { *m = FetchVariationByIdResponse{} }
func (m *FetchVariationByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchVariationByIdResponse) ProtoMessage()               {}
func (*FetchVariationByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *FetchVariationByIdResponse) GetVariations() []*Variation {
	if m != nil {
		return m.Variations
	}
	return nil
}

type CreateVariationRequest struct {
	Name            string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Text            string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Origin          string   `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
	TagIds          []uint32 `protobuf:"varint,4,rep,packed,name=tagIds" json:"tagIds,omitempty"`
	SongDatabaseIds []uint32 `protobuf:"varint,5,rep,packed,name=songDatabaseIds" json:"songDatabaseIds,omitempty"`
}

func (m *CreateVariationRequest) Reset()                    { *m = CreateVariationRequest{} }
func (m *CreateVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVariationRequest) ProtoMessage()               {}
func (*CreateVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *CreateVariationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CreateVariationRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *CreateVariationRequest) GetTagIds() []uint32 {
	if m != nil {
		return m.TagIds
	}
	return nil
}

func (m *CreateVariationRequest) GetSongDatabaseIds() []uint32 {
	if m != nil {
		return m.SongDatabaseIds
	}
	return nil
}

type CreateVariationResponse struct {
	Variation *Variation `protobuf:"bytes,1,opt,name=variation" json:"variation,omitempty"`
}

func (m *CreateVariationResponse) Reset()                    { *m = CreateVariationResponse{} }
func (m *CreateVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVariationResponse) ProtoMessage()               {}
func (*CreateVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *CreateVariationResponse) GetVariation() *Variation {
	if m != nil {
		return m.Variation
	}
	return nil
}

type UpdateVariationRequest struct {
	VariationId           uint32   `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Text                  string   `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	SongId                uint32   `protobuf:"varint,4,opt,name=songId" json:"songId,omitempty"`
	LanguageId            uint32   `protobuf:"varint,5,opt,name=languageId" json:"languageId,omitempty"`
	AddTagIds             []uint32 `protobuf:"varint,6,rep,packed,name=addTagIds" json:"addTagIds,omitempty"`
	RemoveTagIds          []uint32 `protobuf:"varint,7,rep,packed,name=removeTagIds" json:"removeTagIds,omitempty"`
	AddSongDatabaseIds    []uint32 `protobuf:"varint,8,rep,packed,name=addSongDatabaseIds" json:"addSongDatabaseIds,omitempty"`
	RemoveSongDatabaseIds []uint32 `protobuf:"varint,9,rep,packed,name=removeSongDatabaseIds" json:"removeSongDatabaseIds,omitempty"`
}

func (m *UpdateVariationRequest) Reset()                    { *m = UpdateVariationRequest{} }
func (m *UpdateVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariationRequest) ProtoMessage()               {}
func (*UpdateVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *UpdateVariationRequest) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

func (m *UpdateVariationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateVariationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *UpdateVariationRequest) GetSongId() uint32 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *UpdateVariationRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

func (m *UpdateVariationRequest) GetAddTagIds() []uint32 {
	if m != nil {
		return m.AddTagIds
	}
	return nil
}

func (m *UpdateVariationRequest) GetRemoveTagIds() []uint32 {
	if m != nil {
		return m.RemoveTagIds
	}
	return nil
}

func (m *UpdateVariationRequest) GetAddSongDatabaseIds() []uint32 {
	if m != nil {
		return m.AddSongDatabaseIds
	}
	return nil
}

func (m *UpdateVariationRequest) GetRemoveSongDatabaseIds() []uint32 {
	if m != nil {
		return m.RemoveSongDatabaseIds
	}
	return nil
}

type UpdateVariationResponse struct {
	Variation *Variation `protobuf:"bytes,1,opt,name=variation" json:"variation,omitempty"`
	Success   bool       `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *UpdateVariationResponse) Reset()                    { *m = UpdateVariationResponse{} }
func (m *UpdateVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariationResponse) ProtoMessage()               {}
func (*UpdateVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *UpdateVariationResponse) GetVariation() *Variation {
	if m != nil {
		return m.Variation
	}
	return nil
}

func (m *UpdateVariationResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RemoveVariationRequest struct {
	VariationId uint32 `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
}

func (m *RemoveVariationRequest) Reset()                    { *m = RemoveVariationRequest{} }
func (m *RemoveVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveVariationRequest) ProtoMessage()               {}
func (*RemoveVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *RemoveVariationRequest) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

type RemoveVariationResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RemoveVariationResponse) Reset()                    { *m = RemoveVariationResponse{} }
func (m *RemoveVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveVariationResponse) ProtoMessage()               {}
func (*RemoveVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *RemoveVariationResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Variation)(nil), "SeppoService.Variation")
	proto.RegisterType((*SearchVariationsRequest)(nil), "SeppoService.SearchVariationsRequest")
	proto.RegisterType((*SearchVariationsResponse)(nil), "SeppoService.SearchVariationsResponse")
	proto.RegisterType((*FetchVariationByIdRequest)(nil), "SeppoService.FetchVariationByIdRequest")
	proto.RegisterType((*FetchVariationByIdResponse)(nil), "SeppoService.FetchVariationByIdResponse")
	proto.RegisterType((*CreateVariationRequest)(nil), "SeppoService.CreateVariationRequest")
	proto.RegisterType((*CreateVariationResponse)(nil), "SeppoService.CreateVariationResponse")
	proto.RegisterType((*UpdateVariationRequest)(nil), "SeppoService.UpdateVariationRequest")
	proto.RegisterType((*UpdateVariationResponse)(nil), "SeppoService.UpdateVariationResponse")
	proto.RegisterType((*RemoveVariationRequest)(nil), "SeppoService.RemoveVariationRequest")
	proto.RegisterType((*RemoveVariationResponse)(nil), "SeppoService.RemoveVariationResponse")
}

func init() { proto.RegisterFile("variation.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xd6, 0xe6, 0xaf, 0xdd, 0xe9, 0x1f, 0xb2, 0x4a, 0x62, 0x10, 0x42, 0x91, 0x85, 0x50, 0xc4,
	0x21, 0x87, 0x16, 0x84, 0xc4, 0x05, 0xa9, 0xa0, 0x4a, 0xb9, 0xa1, 0x0d, 0x2d, 0x67, 0x37, 0x76,
	0x53, 0x43, 0xb2, 0x0e, 0xb6, 0x13, 0x35, 0xaf, 0xc2, 0x5b, 0xf0, 0x0a, 0xbc, 0x18, 0xc8, 0x5e,
	0xef, 0xae, 0x37, 0xbb, 0x02, 0xa1, 0xde, 0x76, 0x3e, 0x8f, 0x67, 0xe6, 0xfb, 0x66, 0xc6, 0x0b,
	0x27, 0x1b, 0xaa, 0x04, 0x35, 0x42, 0xa6, 0xe3, 0x95, 0x92, 0x46, 0xa2, 0xc3, 0x29, 0x5f, 0xad,
	0xe4, 0x94, 0xab, 0x8d, 0x98, 0x71, 0xf2, 0x33, 0x82, 0xf8, 0x3a, 0xf7, 0x40, 0xc7, 0xd0, 0x12,
	0x0c, 0x47, 0xc3, 0x68, 0x74, 0x94, 0xb4, 0x04, 0x43, 0x08, 0x3a, 0x29, 0x5d, 0x72, 0xdc, 0x1a,
	0x46, 0xa3, 0x38, 0x71, 0xdf, 0xa8, 0x0f, 0x3d, 0x2d, 0xd3, 0xf9, 0x84, 0xe1, 0xb6, 0xf3, 0xf3,
	0x16, 0xc2, 0xb0, 0xb7, 0xe1, 0x4a, 0x0b, 0x99, 0xe2, 0xee, 0x30, 0x1a, 0x75, 0x92, 0xdc, 0x44,
	0xcf, 0x01, 0x16, 0x34, 0x9d, 0xaf, 0xe9, 0x9c, 0x4f, 0x18, 0xee, 0xb9, 0x5b, 0x01, 0x82, 0xc6,
	0x80, 0x8a, 0x22, 0xaf, 0xb3, 0x3b, 0x13, 0x86, 0xf7, 0x9c, 0x5f, 0xc3, 0x09, 0xf9, 0xdd, 0x82,
	0xc1, 0x94, 0x53, 0x35, 0xbb, 0x2b, 0x2a, 0xd7, 0x09, 0xff, 0xbe, 0xe6, 0xda, 0xd8, 0x5c, 0xda,
	0x1d, 0x7d, 0x91, 0x2a, 0x63, 0x12, 0x27, 0x01, 0x82, 0x5e, 0xc2, 0xb1, 0xad, 0xf7, 0x23, 0x35,
	0xf4, 0x86, 0x6a, 0x5b, 0x4f, 0xcb, 0xe5, 0xd9, 0x41, 0xd1, 0x19, 0x9c, 0x86, 0xc8, 0xa5, 0x58,
	0x18, 0xae, 0x0a, 0xce, 0x8d, 0x67, 0xe8, 0x14, 0xba, 0x86, 0x5a, 0x61, 0x3a, 0xce, 0x29, 0x33,
	0x76, 0xd8, 0x77, 0x6b, 0xec, 0xfb, 0xd0, 0x93, 0xb7, 0xb7, 0x9a, 0x1b, 0xaf, 0x8c, 0xb7, 0x6c,
	0xb4, 0x85, 0x58, 0x0a, 0xe3, 0x85, 0xc8, 0x0c, 0xc7, 0x6f, 0x76, 0xc7, 0xd9, 0x7a, 0x61, 0xa3,
	0xed, 0x67, 0xd1, 0x4a, 0x04, 0xbd, 0x82, 0x47, 0xfa, 0x9b, 0x58, 0x15, 0xc2, 0x4c, 0x98, 0xc6,
	0xf1, 0xb0, 0x3d, 0x3a, 0x4a, 0x6a, 0xb8, 0xed, 0x98, 0x54, 0x8c, 0xab, 0x8b, 0x2d, 0x06, 0x17,
	0x28, 0x37, 0x4b, 0x15, 0x2f, 0x95, 0x5c, 0xe2, 0x03, 0x9f, 0xa5, 0x40, 0xc8, 0x16, 0x70, 0xbd,
	0x01, 0x7a, 0x25, 0x53, 0xcd, 0xd1, 0x5b, 0x80, 0xa2, 0x67, 0x1a, 0x47, 0xc3, 0xf6, 0xe8, 0xe0,
	0x6c, 0x30, 0x0e, 0x87, 0x6e, 0x5c, 0xdc, 0x4a, 0x02, 0x57, 0xf4, 0x02, 0x8e, 0x96, 0xf4, 0xbe,
	0x8c, 0xe8, 0x3b, 0x53, 0x05, 0xc9, 0x7b, 0x78, 0x72, 0xc9, 0x4d, 0x90, 0xf9, 0x62, 0x3b, 0x61,
	0x79, 0xf7, 0x09, 0x1c, 0x6e, 0x42, 0xe6, 0x91, 0x63, 0x5e, 0xc1, 0xc8, 0x15, 0x3c, 0x6d, 0x0a,
	0xf0, 0xc0, 0xea, 0xc9, 0x8f, 0x08, 0xfa, 0x1f, 0x14, 0xa7, 0x86, 0x97, 0xe7, 0xbe, 0xaa, 0x7c,
	0x8b, 0xa2, 0x60, 0x8b, 0x10, 0x74, 0x0c, 0xbf, 0x37, 0xf9, 0x66, 0xd9, 0x6f, 0x37, 0x09, 0x4a,
	0xcc, 0x45, 0xea, 0xa6, 0x2c, 0x4e, 0xbc, 0x65, 0x71, 0x37, 0x4a, 0x1a, 0x77, 0x1c, 0x1f, 0x6f,
	0xa1, 0x11, 0x9c, 0x54, 0xa7, 0x56, 0xe3, 0xae, 0x73, 0xd8, 0x85, 0xc9, 0x27, 0x18, 0xd4, 0x6a,
	0xf3, 0x84, 0xdf, 0x40, 0x5c, 0xb0, 0x70, 0x15, 0xfe, 0x85, 0x6f, 0xe9, 0x49, 0x7e, 0xb5, 0xa0,
	0x7f, 0xb5, 0x62, 0x4d, 0x74, 0x87, 0x70, 0x10, 0x08, 0xee, 0x5f, 0x93, 0x10, 0x6a, 0x7c, 0x56,
	0x72, 0x41, 0xda, 0x55, 0x41, 0xfc, 0x53, 0xd3, 0xa9, 0x3c, 0x35, 0xff, 0x5a, 0xa9, 0x67, 0x10,
	0x53, 0xc6, 0x3e, 0x67, 0x9a, 0xf5, 0x9c, 0x24, 0x25, 0x60, 0x87, 0x44, 0xf1, 0xa5, 0xdc, 0x70,
	0xef, 0xb0, 0x97, 0x0d, 0x49, 0x88, 0xd9, 0x27, 0x89, 0x32, 0x36, 0xdd, 0x51, 0x77, 0xdf, 0x79,
	0x36, 0x9c, 0xa0, 0xd7, 0xf0, 0x38, 0xbb, 0xbf, 0x7b, 0x25, 0xdb, 0xbd, 0xe6, 0x43, 0xf2, 0x15,
	0x06, 0x35, 0x0d, 0x1f, 0xd4, 0x16, 0xbb, 0xd2, 0x7a, 0x3d, 0x9b, 0x71, 0x9d, 0x6d, 0xcf, 0x7e,
	0x92, 0x9b, 0xe4, 0x1d, 0xf4, 0x13, 0x57, 0xc4, 0xff, 0xf7, 0x8b, 0x9c, 0xc3, 0xa0, 0x76, 0xd7,
	0xd7, 0x19, 0x24, 0x8c, 0x2a, 0x09, 0x6f, 0x7a, 0xee, 0x77, 0x73, 0xfe, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xde, 0xff, 0x38, 0xf5, 0x81, 0x06, 0x00, 0x00,
}

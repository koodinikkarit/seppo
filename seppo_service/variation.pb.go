// Code generated by protoc-gen-go.
// source: variation.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Variation struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SongId     uint32 `protobuf:"varint,3,opt,name=songId" json:"songId,omitempty"`
	Version    uint64 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	LanguageId uint32 `protobuf:"varint,6,opt,name=languageId" json:"languageId,omitempty"`
}

func (m *Variation) Reset()                    { *m = Variation{} }
func (m *Variation) String() string            { return proto.CompactTextString(m) }
func (*Variation) ProtoMessage()               {}
func (*Variation) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *Variation) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Variation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Variation) GetSongId() uint32 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *Variation) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Variation) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

type CreateVariationRequest struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Origin string `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
}

func (m *CreateVariationRequest) Reset()                    { *m = CreateVariationRequest{} }
func (m *CreateVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVariationRequest) ProtoMessage()               {}
func (*CreateVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *CreateVariationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CreateVariationRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type CreateVariationResponse struct {
	Variation *Variation `protobuf:"bytes,1,opt,name=variation" json:"variation,omitempty"`
}

func (m *CreateVariationResponse) Reset()                    { *m = CreateVariationResponse{} }
func (m *CreateVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVariationResponse) ProtoMessage()               {}
func (*CreateVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *CreateVariationResponse) GetVariation() *Variation {
	if m != nil {
		return m.Variation
	}
	return nil
}

type EditVariationRequest struct {
	VariationId uint32 `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Text        string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	SongId      uint32 `protobuf:"varint,4,opt,name=songId" json:"songId,omitempty"`
	LanguageId  uint32 `protobuf:"varint,5,opt,name=languageId" json:"languageId,omitempty"`
}

func (m *EditVariationRequest) Reset()                    { *m = EditVariationRequest{} }
func (m *EditVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*EditVariationRequest) ProtoMessage()               {}
func (*EditVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *EditVariationRequest) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

func (m *EditVariationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EditVariationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *EditVariationRequest) GetSongId() uint32 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *EditVariationRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

type EditVariationResponse struct {
	Variation *Variation `protobuf:"bytes,1,opt,name=variation" json:"variation,omitempty"`
}

func (m *EditVariationResponse) Reset()                    { *m = EditVariationResponse{} }
func (m *EditVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*EditVariationResponse) ProtoMessage()               {}
func (*EditVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *EditVariationResponse) GetVariation() *Variation {
	if m != nil {
		return m.Variation
	}
	return nil
}

type RemoveVariationRequest struct {
	VariationId uint32 `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
}

func (m *RemoveVariationRequest) Reset()                    { *m = RemoveVariationRequest{} }
func (m *RemoveVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveVariationRequest) ProtoMessage()               {}
func (*RemoveVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *RemoveVariationRequest) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

type RemoveVariationResponse struct {
}

func (m *RemoveVariationResponse) Reset()                    { *m = RemoveVariationResponse{} }
func (m *RemoveVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveVariationResponse) ProtoMessage()               {}
func (*RemoveVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

type FetchVariationByIdRequest struct {
	VariationIds []uint32 `protobuf:"varint,1,rep,packed,name=variationIds" json:"variationIds,omitempty"`
}

func (m *FetchVariationByIdRequest) Reset()                    { *m = FetchVariationByIdRequest{} }
func (m *FetchVariationByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchVariationByIdRequest) ProtoMessage()               {}
func (*FetchVariationByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *FetchVariationByIdRequest) GetVariationIds() []uint32 {
	if m != nil {
		return m.VariationIds
	}
	return nil
}

type FetchVariationByIdResponse struct {
	Variations []*Variation `protobuf:"bytes,1,rep,name=variations" json:"variations,omitempty"`
}

func (m *FetchVariationByIdResponse) Reset()                    { *m = FetchVariationByIdResponse{} }
func (m *FetchVariationByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchVariationByIdResponse) ProtoMessage()               {}
func (*FetchVariationByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *FetchVariationByIdResponse) GetVariations() []*Variation {
	if m != nil {
		return m.Variations
	}
	return nil
}

type SearchVariationsRequest struct {
	SearchWord           string `protobuf:"bytes,1,opt,name=searchWord" json:"searchWord,omitempty"`
	SongDatabaseId       uint32 `protobuf:"varint,2,opt,name=songDatabaseId" json:"songDatabaseId,omitempty"`
	SongDatabaseFilterId uint32 `protobuf:"varint,3,opt,name=songDatabaseFilterId" json:"songDatabaseFilterId,omitempty"`
	TagId                uint32 `protobuf:"varint,4,opt,name=tagId" json:"tagId,omitempty"`
	LanguageId           uint32 `protobuf:"varint,5,opt,name=languageId" json:"languageId,omitempty"`
}

func (m *SearchVariationsRequest) Reset()                    { *m = SearchVariationsRequest{} }
func (m *SearchVariationsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchVariationsRequest) ProtoMessage()               {}
func (*SearchVariationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *SearchVariationsRequest) GetSearchWord() string {
	if m != nil {
		return m.SearchWord
	}
	return ""
}

func (m *SearchVariationsRequest) GetSongDatabaseId() uint32 {
	if m != nil {
		return m.SongDatabaseId
	}
	return 0
}

func (m *SearchVariationsRequest) GetSongDatabaseFilterId() uint32 {
	if m != nil {
		return m.SongDatabaseFilterId
	}
	return 0
}

func (m *SearchVariationsRequest) GetTagId() uint32 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *SearchVariationsRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

type SearchVariationsResponse struct {
	Variations    []*Variation `protobuf:"bytes,1,rep,name=variations" json:"variations,omitempty"`
	MaxVariations uint32       `protobuf:"varint,2,opt,name=maxVariations" json:"maxVariations,omitempty"`
}

func (m *SearchVariationsResponse) Reset()                    { *m = SearchVariationsResponse{} }
func (m *SearchVariationsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchVariationsResponse) ProtoMessage()               {}
func (*SearchVariationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *SearchVariationsResponse) GetVariations() []*Variation {
	if m != nil {
		return m.Variations
	}
	return nil
}

func (m *SearchVariationsResponse) GetMaxVariations() uint32 {
	if m != nil {
		return m.MaxVariations
	}
	return 0
}

func init() {
	proto.RegisterType((*Variation)(nil), "SeppoService.Variation")
	proto.RegisterType((*CreateVariationRequest)(nil), "SeppoService.CreateVariationRequest")
	proto.RegisterType((*CreateVariationResponse)(nil), "SeppoService.CreateVariationResponse")
	proto.RegisterType((*EditVariationRequest)(nil), "SeppoService.EditVariationRequest")
	proto.RegisterType((*EditVariationResponse)(nil), "SeppoService.EditVariationResponse")
	proto.RegisterType((*RemoveVariationRequest)(nil), "SeppoService.RemoveVariationRequest")
	proto.RegisterType((*RemoveVariationResponse)(nil), "SeppoService.RemoveVariationResponse")
	proto.RegisterType((*FetchVariationByIdRequest)(nil), "SeppoService.FetchVariationByIdRequest")
	proto.RegisterType((*FetchVariationByIdResponse)(nil), "SeppoService.FetchVariationByIdResponse")
	proto.RegisterType((*SearchVariationsRequest)(nil), "SeppoService.SearchVariationsRequest")
	proto.RegisterType((*SearchVariationsResponse)(nil), "SeppoService.SearchVariationsResponse")
}

func init() { proto.RegisterFile("variation.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcb, 0x6a, 0xdc, 0x30,
	0x14, 0x45, 0xf3, 0x2a, 0xbe, 0xc9, 0xa4, 0x20, 0xa6, 0x63, 0xa5, 0x8b, 0x60, 0x44, 0x29, 0x5e,
	0xcd, 0x22, 0xa5, 0x14, 0xba, 0x29, 0xf4, 0x11, 0xf0, 0xa6, 0x14, 0x0f, 0x7d, 0x6c, 0x95, 0xf8,
	0xe2, 0x0a, 0x32, 0x96, 0x2b, 0x29, 0x26, 0x59, 0xf6, 0x2f, 0xfa, 0x4f, 0xfd, 0xa9, 0x62, 0x8d,
	0x1f, 0x72, 0x3c, 0xb4, 0x94, 0xec, 0x74, 0x8f, 0xee, 0x3d, 0x3a, 0xe7, 0x48, 0x36, 0x3c, 0xae,
	0x84, 0x96, 0xc2, 0x4a, 0x55, 0x6c, 0x4a, 0xad, 0xac, 0xa2, 0xc7, 0x5b, 0x2c, 0x4b, 0xb5, 0x45,
	0x5d, 0xc9, 0x2b, 0xe4, 0x3f, 0x09, 0x04, 0x5f, 0xda, 0x0e, 0x7a, 0x02, 0x13, 0x99, 0x31, 0x12,
	0x91, 0x78, 0x99, 0x4e, 0x64, 0x46, 0x29, 0xcc, 0x0a, 0xb1, 0x43, 0x36, 0x89, 0x48, 0x1c, 0xa4,
	0x6e, 0x4d, 0xd7, 0xb0, 0x30, 0xaa, 0xc8, 0x93, 0x8c, 0x4d, 0x5d, 0x5f, 0x53, 0x51, 0x06, 0x8f,
	0x2a, 0xd4, 0x46, 0xaa, 0x82, 0xcd, 0x23, 0x12, 0xcf, 0xd2, 0xb6, 0xa4, 0x67, 0x00, 0xd7, 0xa2,
	0xc8, 0x6f, 0x44, 0x8e, 0x49, 0xc6, 0x16, 0x6e, 0xca, 0x43, 0xf8, 0x37, 0x58, 0xbf, 0xd3, 0x28,
	0x2c, 0x76, 0x42, 0x52, 0xfc, 0x71, 0x83, 0xc6, 0x76, 0xe7, 0x13, 0xef, 0x7c, 0x0a, 0x33, 0x8b,
	0xb7, 0xb6, 0xd5, 0x54, 0xaf, 0x6b, 0x4d, 0x4a, 0xcb, 0x5c, 0x16, 0x4e, 0x53, 0x90, 0x36, 0x15,
	0xff, 0x04, 0xe1, 0x88, 0xd9, 0x94, 0xaa, 0x30, 0x48, 0x5f, 0x42, 0xd0, 0x25, 0xe3, 0xf8, 0x8f,
	0xce, 0xc3, 0x8d, 0x1f, 0xcd, 0xa6, 0x9f, 0xe9, 0x3b, 0xf9, 0x2f, 0x02, 0xab, 0x0f, 0x99, 0xb4,
	0x23, 0xa9, 0x11, 0x1c, 0x75, 0x5d, 0x49, 0x9b, 0xa1, 0x0f, 0x1d, 0x0c, 0xb3, 0x35, 0x33, 0x1d,
	0x9a, 0x69, 0x02, 0x9e, 0x0d, 0x02, 0x1e, 0xc6, 0x38, 0x1f, 0xc5, 0xf8, 0x11, 0x9e, 0xdc, 0x53,
	0xf6, 0x30, 0xab, 0xaf, 0x61, 0x9d, 0xe2, 0x4e, 0x55, 0xf8, 0xff, 0x5e, 0xf9, 0x29, 0x84, 0xa3,
	0xd9, 0xbd, 0x1a, 0xfe, 0x06, 0x4e, 0x2f, 0xd0, 0x5e, 0x7d, 0xef, 0x76, 0xde, 0xde, 0x25, 0x59,
	0xcb, 0xcc, 0xe1, 0xd8, 0xa3, 0x31, 0x8c, 0x44, 0xd3, 0x78, 0x99, 0x0e, 0x30, 0xfe, 0x19, 0x9e,
	0x1e, 0x22, 0x68, 0xcc, 0xbe, 0x02, 0xe8, 0xba, 0xf7, 0xf3, 0x7f, 0x71, 0xeb, 0xb5, 0xf2, 0xdf,
	0x04, 0xc2, 0x2d, 0x0a, 0xed, 0x11, 0x9b, 0x56, 0xd6, 0x19, 0x80, 0x71, 0x5b, 0x5f, 0x95, 0xce,
	0x9a, 0xd7, 0xe8, 0x21, 0xf4, 0x39, 0x9c, 0xd4, 0x97, 0xf4, 0x5e, 0x58, 0x71, 0x29, 0x4c, 0x7d,
	0x3d, 0x13, 0x97, 0xc9, 0x3d, 0x94, 0x9e, 0xc3, 0xca, 0x47, 0x2e, 0xe4, 0xb5, 0x45, 0xdd, 0x7d,
	0x49, 0x07, 0xf7, 0xe8, 0x0a, 0xe6, 0x56, 0xf4, 0xaf, 0x61, 0x5f, 0xfc, 0xf3, 0x31, 0xdc, 0x01,
	0x1b, 0x9b, 0x79, 0x60, 0x44, 0xf4, 0x19, 0x2c, 0x77, 0xe2, 0xb6, 0x67, 0x6c, 0x5c, 0x0e, 0xc1,
	0xcb, 0x85, 0xfb, 0xcf, 0xbc, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x44, 0x54, 0x6c, 0xcb, 0x7a,
	0x04, 0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: variation.proto
// DO NOT EDIT!

package SeppoService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Variation struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SongId     uint32 `protobuf:"varint,3,opt,name=songId" json:"songId,omitempty"`
	Version    uint64 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	LanguageId uint32 `protobuf:"varint,6,opt,name=languageId" json:"languageId,omitempty"`
}

func (m *Variation) Reset()                    { *m = Variation{} }
func (m *Variation) String() string            { return proto.CompactTextString(m) }
func (*Variation) ProtoMessage()               {}
func (*Variation) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *Variation) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Variation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Variation) GetSongId() uint32 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *Variation) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Variation) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

type CreateVariationRequest struct {
	Name            string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Text            string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Origin          string   `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
	TagIds          []uint32 `protobuf:"varint,4,rep,packed,name=tagIds" json:"tagIds,omitempty"`
	SongDatabaseIds []uint32 `protobuf:"varint,5,rep,packed,name=songDatabaseIds" json:"songDatabaseIds,omitempty"`
}

func (m *CreateVariationRequest) Reset()                    { *m = CreateVariationRequest{} }
func (m *CreateVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVariationRequest) ProtoMessage()               {}
func (*CreateVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *CreateVariationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateVariationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CreateVariationRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *CreateVariationRequest) GetTagIds() []uint32 {
	if m != nil {
		return m.TagIds
	}
	return nil
}

func (m *CreateVariationRequest) GetSongDatabaseIds() []uint32 {
	if m != nil {
		return m.SongDatabaseIds
	}
	return nil
}

type CreateVariationResponse struct {
	Variation *Variation `protobuf:"bytes,1,opt,name=variation" json:"variation,omitempty"`
}

func (m *CreateVariationResponse) Reset()                    { *m = CreateVariationResponse{} }
func (m *CreateVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVariationResponse) ProtoMessage()               {}
func (*CreateVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *CreateVariationResponse) GetVariation() *Variation {
	if m != nil {
		return m.Variation
	}
	return nil
}

type UpdateVariationRequest struct {
	VariationId           uint32   `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Text                  string   `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	SongId                uint32   `protobuf:"varint,4,opt,name=songId" json:"songId,omitempty"`
	LanguageId            uint32   `protobuf:"varint,5,opt,name=languageId" json:"languageId,omitempty"`
	AddTagIds             []uint32 `protobuf:"varint,6,rep,packed,name=addTagIds" json:"addTagIds,omitempty"`
	RemoveTagIds          []uint32 `protobuf:"varint,7,rep,packed,name=removeTagIds" json:"removeTagIds,omitempty"`
	AddSongDatabaseIds    []uint32 `protobuf:"varint,8,rep,packed,name=addSongDatabaseIds" json:"addSongDatabaseIds,omitempty"`
	RemoveSongDatabaseIds []uint32 `protobuf:"varint,9,rep,packed,name=removeSongDatabaseIds" json:"removeSongDatabaseIds,omitempty"`
}

func (m *UpdateVariationRequest) Reset()                    { *m = UpdateVariationRequest{} }
func (m *UpdateVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariationRequest) ProtoMessage()               {}
func (*UpdateVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *UpdateVariationRequest) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

func (m *UpdateVariationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateVariationRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *UpdateVariationRequest) GetSongId() uint32 {
	if m != nil {
		return m.SongId
	}
	return 0
}

func (m *UpdateVariationRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

func (m *UpdateVariationRequest) GetAddTagIds() []uint32 {
	if m != nil {
		return m.AddTagIds
	}
	return nil
}

func (m *UpdateVariationRequest) GetRemoveTagIds() []uint32 {
	if m != nil {
		return m.RemoveTagIds
	}
	return nil
}

func (m *UpdateVariationRequest) GetAddSongDatabaseIds() []uint32 {
	if m != nil {
		return m.AddSongDatabaseIds
	}
	return nil
}

func (m *UpdateVariationRequest) GetRemoveSongDatabaseIds() []uint32 {
	if m != nil {
		return m.RemoveSongDatabaseIds
	}
	return nil
}

type UpdateVariationResponse struct {
	Variation *Variation `protobuf:"bytes,1,opt,name=variation" json:"variation,omitempty"`
}

func (m *UpdateVariationResponse) Reset()                    { *m = UpdateVariationResponse{} }
func (m *UpdateVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateVariationResponse) ProtoMessage()               {}
func (*UpdateVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *UpdateVariationResponse) GetVariation() *Variation {
	if m != nil {
		return m.Variation
	}
	return nil
}

type RemoveVariationRequest struct {
	VariationId uint32 `protobuf:"varint,1,opt,name=variationId" json:"variationId,omitempty"`
}

func (m *RemoveVariationRequest) Reset()                    { *m = RemoveVariationRequest{} }
func (m *RemoveVariationRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveVariationRequest) ProtoMessage()               {}
func (*RemoveVariationRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *RemoveVariationRequest) GetVariationId() uint32 {
	if m != nil {
		return m.VariationId
	}
	return 0
}

type RemoveVariationResponse struct {
}

func (m *RemoveVariationResponse) Reset()                    { *m = RemoveVariationResponse{} }
func (m *RemoveVariationResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveVariationResponse) ProtoMessage()               {}
func (*RemoveVariationResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

type FetchVariationByIdRequest struct {
	VariationIds []uint32 `protobuf:"varint,1,rep,packed,name=variationIds" json:"variationIds,omitempty"`
}

func (m *FetchVariationByIdRequest) Reset()                    { *m = FetchVariationByIdRequest{} }
func (m *FetchVariationByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchVariationByIdRequest) ProtoMessage()               {}
func (*FetchVariationByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *FetchVariationByIdRequest) GetVariationIds() []uint32 {
	if m != nil {
		return m.VariationIds
	}
	return nil
}

type FetchVariationByIdResponse struct {
	Variations []*Variation `protobuf:"bytes,1,rep,name=variations" json:"variations,omitempty"`
}

func (m *FetchVariationByIdResponse) Reset()                    { *m = FetchVariationByIdResponse{} }
func (m *FetchVariationByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchVariationByIdResponse) ProtoMessage()               {}
func (*FetchVariationByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *FetchVariationByIdResponse) GetVariations() []*Variation {
	if m != nil {
		return m.Variations
	}
	return nil
}

type SearchVariationsRequest struct {
	SearchWord           string `protobuf:"bytes,1,opt,name=searchWord" json:"searchWord,omitempty"`
	SongDatabaseId       uint32 `protobuf:"varint,2,opt,name=songDatabaseId" json:"songDatabaseId,omitempty"`
	SongDatabaseFilterId uint32 `protobuf:"varint,3,opt,name=songDatabaseFilterId" json:"songDatabaseFilterId,omitempty"`
	TagId                uint32 `protobuf:"varint,4,opt,name=tagId" json:"tagId,omitempty"`
	LanguageId           uint32 `protobuf:"varint,5,opt,name=languageId" json:"languageId,omitempty"`
	Offset               uint32 `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	Limit                uint32 `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

func (m *SearchVariationsRequest) Reset()                    { *m = SearchVariationsRequest{} }
func (m *SearchVariationsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchVariationsRequest) ProtoMessage()               {}
func (*SearchVariationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *SearchVariationsRequest) GetSearchWord() string {
	if m != nil {
		return m.SearchWord
	}
	return ""
}

func (m *SearchVariationsRequest) GetSongDatabaseId() uint32 {
	if m != nil {
		return m.SongDatabaseId
	}
	return 0
}

func (m *SearchVariationsRequest) GetSongDatabaseFilterId() uint32 {
	if m != nil {
		return m.SongDatabaseFilterId
	}
	return 0
}

func (m *SearchVariationsRequest) GetTagId() uint32 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *SearchVariationsRequest) GetLanguageId() uint32 {
	if m != nil {
		return m.LanguageId
	}
	return 0
}

func (m *SearchVariationsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchVariationsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchVariationsResponse struct {
	Variations    []*Variation `protobuf:"bytes,1,rep,name=variations" json:"variations,omitempty"`
	MaxVariations uint32       `protobuf:"varint,2,opt,name=maxVariations" json:"maxVariations,omitempty"`
}

func (m *SearchVariationsResponse) Reset()                    { *m = SearchVariationsResponse{} }
func (m *SearchVariationsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchVariationsResponse) ProtoMessage()               {}
func (*SearchVariationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *SearchVariationsResponse) GetVariations() []*Variation {
	if m != nil {
		return m.Variations
	}
	return nil
}

func (m *SearchVariationsResponse) GetMaxVariations() uint32 {
	if m != nil {
		return m.MaxVariations
	}
	return 0
}

func init() {
	proto.RegisterType((*Variation)(nil), "SeppoService.Variation")
	proto.RegisterType((*CreateVariationRequest)(nil), "SeppoService.CreateVariationRequest")
	proto.RegisterType((*CreateVariationResponse)(nil), "SeppoService.CreateVariationResponse")
	proto.RegisterType((*UpdateVariationRequest)(nil), "SeppoService.UpdateVariationRequest")
	proto.RegisterType((*UpdateVariationResponse)(nil), "SeppoService.UpdateVariationResponse")
	proto.RegisterType((*RemoveVariationRequest)(nil), "SeppoService.RemoveVariationRequest")
	proto.RegisterType((*RemoveVariationResponse)(nil), "SeppoService.RemoveVariationResponse")
	proto.RegisterType((*FetchVariationByIdRequest)(nil), "SeppoService.FetchVariationByIdRequest")
	proto.RegisterType((*FetchVariationByIdResponse)(nil), "SeppoService.FetchVariationByIdResponse")
	proto.RegisterType((*SearchVariationsRequest)(nil), "SeppoService.SearchVariationsRequest")
	proto.RegisterType((*SearchVariationsResponse)(nil), "SeppoService.SearchVariationsResponse")
}

func init() { proto.RegisterFile("variation.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x51, 0x6f, 0xd3, 0x3c,
	0x14, 0x55, 0xda, 0xb4, 0xfd, 0x72, 0xd7, 0x6e, 0x92, 0xb5, 0xaf, 0xf5, 0x10, 0x9a, 0x22, 0x0b,
	0xa1, 0x3e, 0xf5, 0x61, 0x80, 0x90, 0x78, 0x41, 0x02, 0x34, 0x29, 0x6f, 0x28, 0x65, 0xf0, 0xec,
	0xcd, 0x5e, 0xb0, 0xd4, 0xc6, 0xc1, 0xf6, 0xaa, 0xed, 0x91, 0xbf, 0xc1, 0xcf, 0xe1, 0x5f, 0xf1,
	0x86, 0xe2, 0x38, 0xa9, 0x93, 0x46, 0x20, 0xb4, 0xb7, 0xdc, 0xe3, 0x73, 0x6f, 0x8e, 0xcf, 0xb1,
	0x0d, 0x27, 0x3b, 0xaa, 0x04, 0x35, 0x42, 0xe6, 0xab, 0x42, 0x49, 0x23, 0xd1, 0x74, 0xcd, 0x8b,
	0x42, 0xae, 0xb9, 0xda, 0x89, 0x1b, 0x4e, 0xbe, 0x07, 0x10, 0x7d, 0xae, 0x19, 0xe8, 0x18, 0x06,
	0x82, 0xe1, 0x20, 0x0e, 0x96, 0xb3, 0x74, 0x20, 0x18, 0x42, 0x10, 0xe6, 0x74, 0xcb, 0xf1, 0x20,
	0x0e, 0x96, 0x51, 0x6a, 0xbf, 0xd1, 0x1c, 0xc6, 0x5a, 0xe6, 0x59, 0xc2, 0xf0, 0xd0, 0xf2, 0x5c,
	0x85, 0x30, 0x4c, 0x76, 0x5c, 0x69, 0x21, 0x73, 0x3c, 0x8a, 0x83, 0x65, 0x98, 0xd6, 0x25, 0x3a,
	0x07, 0xd8, 0xd0, 0x3c, 0xbb, 0xa3, 0x19, 0x4f, 0x18, 0x1e, 0xdb, 0x2e, 0x0f, 0x21, 0x3f, 0x02,
	0x98, 0xbf, 0x57, 0x9c, 0x1a, 0xde, 0x28, 0x49, 0xf9, 0xb7, 0x3b, 0xae, 0x4d, 0x23, 0x20, 0xf0,
	0x04, 0x20, 0x08, 0x0d, 0xbf, 0x37, 0xb5, 0xa8, 0xf2, 0xbb, 0x14, 0x25, 0x95, 0xc8, 0x44, 0x6e,
	0x45, 0x45, 0xa9, 0xab, 0x4a, 0xdc, 0xd0, 0x2c, 0x61, 0x1a, 0x87, 0xf1, 0xb0, 0x14, 0x5b, 0x55,
	0x68, 0x09, 0x27, 0xa5, 0xec, 0x0f, 0xd4, 0xd0, 0x6b, 0xaa, 0x79, 0x49, 0x18, 0x59, 0x42, 0x17,
	0x26, 0x1f, 0x61, 0x71, 0xa0, 0x4d, 0x17, 0x32, 0xd7, 0x1c, 0xbd, 0x82, 0xa8, 0x31, 0xd7, 0x2a,
	0x3c, 0xba, 0x58, 0xac, 0x7c, 0x77, 0x57, 0xfb, 0x9e, 0x3d, 0x93, 0xfc, 0x1c, 0xc0, 0xfc, 0xaa,
	0x60, 0x7d, 0xdb, 0x8d, 0xe1, 0xa8, 0xe1, 0x25, 0x75, 0x10, 0x3e, 0xd4, 0x9b, 0x48, 0x6d, 0xc8,
	0xb0, 0x6d, 0x88, 0x4b, 0x29, 0x6c, 0xa5, 0xd4, 0xce, 0x62, 0xd4, 0xcd, 0x02, 0x3d, 0x85, 0x88,
	0x32, 0xf6, 0xa9, 0xf2, 0x6c, 0x6c, 0x2d, 0xd9, 0x03, 0x88, 0xc0, 0x54, 0xf1, 0xad, 0xdc, 0x71,
	0x47, 0x98, 0x58, 0x42, 0x0b, 0x43, 0x2b, 0x40, 0x94, 0xb1, 0x75, 0xc7, 0xdd, 0xff, 0x2c, 0xb3,
	0x67, 0x05, 0xbd, 0x84, 0xff, 0xab, 0xfe, 0x6e, 0x4b, 0x64, 0x5b, 0xfa, 0x17, 0xcb, 0x58, 0x0e,
	0x3c, 0x7c, 0x5c, 0x2c, 0x6f, 0x60, 0x9e, 0xda, 0x5f, 0xfd, 0x7b, 0x2a, 0xe4, 0x0c, 0x16, 0x07,
	0xbd, 0x95, 0x1a, 0xf2, 0x16, 0xce, 0x2e, 0xb9, 0xb9, 0xf9, 0xda, 0xac, 0xbc, 0x7b, 0x48, 0x58,
	0x3d, 0x99, 0xc0, 0xd4, 0x1b, 0xa3, 0x71, 0x50, 0xf9, 0xe9, 0x63, 0xe4, 0x0a, 0x9e, 0xf4, 0x0d,
	0x70, 0x9b, 0x7d, 0x0d, 0xd0, 0xb0, 0xab, 0xfe, 0x3f, 0xec, 0xd6, 0xa3, 0x92, 0x5f, 0x01, 0x2c,
	0xd6, 0x9c, 0x2a, 0x6f, 0xb0, 0xae, 0x65, 0x9d, 0x03, 0x68, 0xbb, 0xf4, 0x45, 0x2a, 0xe6, 0xee,
	0x9e, 0x87, 0xa0, 0xe7, 0x70, 0xdc, 0xbe, 0x26, 0xf6, 0x38, 0xce, 0xd2, 0x0e, 0x8a, 0x2e, 0xe0,
	0xd4, 0x47, 0x2e, 0xc5, 0xc6, 0x70, 0xd5, 0x3c, 0x1c, 0xbd, 0x6b, 0xe8, 0x14, 0x46, 0xf6, 0x8e,
	0xba, 0x73, 0x5b, 0x15, 0x7f, 0x3d, 0xb6, 0xe5, 0xfd, 0xbf, 0xbd, 0xd5, 0xdc, 0xb8, 0xe7, 0xc5,
	0x55, 0xe5, 0xb4, 0x8d, 0xd8, 0x0a, 0x83, 0x27, 0xd5, 0x34, 0x5b, 0x90, 0x07, 0xc0, 0x87, 0x5b,
	0x7f, 0xa4, 0xa1, 0xe8, 0x19, 0xcc, 0xb6, 0xf4, 0x7e, 0x3f, 0xd1, 0x79, 0xd2, 0x06, 0xaf, 0xc7,
	0xf6, 0x11, 0x7e, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xab, 0xfe, 0xc5, 0xcb, 0x97, 0x05, 0x00,
	0x00,
}
